# If you are not familiar with YAML format just like me, read https://en.wikipedia.org/wiki/YAML
# and js-yaml https://www.npmjs.com/package/js-yaml
# PLEASE DON'T MODIFY THIS FILE, instead you may create a local file called `config.local.yaml`
# to overwrites this file.

# destDir contains build results like node server required data, template and timestamp file which
# helps to speed up build process in local dev environment
destDir: dist
# staticDir folder ideally should be inside `destDir`, you can change name of it
# or move its location out of `destDir`, but it can't not be out of process.cwd()
staticDir: dist/static

# file store for Webpack dll plugin 
dllDestDir: dist/dll

port: 14333 # read by @dr/http-server
# ssl:
#     enabled: true
#     port: 13043
#     key: "ssl/key.pem"
#     cert: "ssl/cert.pem"

packageScopes:
  - wfh
  - bk
  - bk-core
  - dr
  - dr-core
  - types

# Only build out i18n bundles for following locales, e.g. for angularjs it means only
# some locales for file match pattern:
#  i18n/angular-locale_{locale}.js
# will be built out into bundles.
locales:
    - zh
    - en

nodeRoutePath: /

# enable devMode to denote default builder tool do not do things like uglify JS bundles,
# and also it will set process.env.NODE_ENV = 'production' if false
# revisioning file name...
devMode: true

# You don't want others read your source code in production environment
enableSourceMaps: false
# If we have public CDN domain name like "http://cdn.foobar.com", like Webpack's publicPath

staticAssetsURL: "" # Same as 'output.publicPath' in Webpack configuration

serverURL: ""

packageContextPathMapping:
    # Package short name - route path map, used by Express server @dr/express-app.
    # By default, each package's node server `api.router()`` is mapped to a route
    # context path "/<package short name>"
    # e.g.
    #   if package name is "@dr/example-dr", default route root path will be `/example-dr`
    # If you want change this rule, config route path here.

# If there are any dependencies from workspace's package.json file and their match following patterns,
# then they are recipe packages, their dependencies are considered as our components for being loaded and compiled.
installedRecipes:
    - ^@dr/.*?-recipe$
    - ^@dr/recipe-.*?$
    - ^@bk/.*?-recipe$
    - ^@bk/recipe-.*?$

# Following is a list of current configuration property names of which property
# are visible to browser side environment, meaning those properties will be stringified
# and downloaded to client browser as a property of API object, can be returned from
# script:
#   __api.config()
#
# Not everything in these file should be visible to browser, e.g. database connection setting
browserSideConfigProp:
    # following are default properties
    # - staticAssetsURL
    # - serverURL
    # - packageContextPathMapping
    # - locales
    # - devMode

e2etestHelper:
    selenium:
        driverPath: 'node_modules/@dr/chrome-driver/linux64'


# To enable HTTP access control (CORS), you may set `express-app-enableCORS` to `true` or
# a white list for allowed origins
#
# express-app-enableCORS: false
# Or
# express-app-enableCORS:
#   - http://www.example.com
#   - http://other-allowed-origin.com
# Also call
#   api.router().use('/api', api.cors());
# in server javascript
express-app-enableCORS: true

# Disable colorful console log message, useful for outputing console log to a file instead of terminal screen,
# because the colorful log message contains extra messy character as special color indicator, that's what terminal can understand for printing colorful text.
#
# e.g. When you running `gulp compile` on a Jenkins server remotely, you will need to disable `colorfulConsole`,
# since Jenkins actually stores console message to file and shows it on web page.
#
# Also you make set environment variable "CHALK_ENABLED" to `false` to disable colorful console log.
# colorfulConsole: false

