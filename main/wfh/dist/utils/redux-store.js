"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateFactory = exports.ofPayloadAction = void 0;
/// <reference lib="es2017" />
/// <reference path="./hmr-module.d.ts" />
// tslint:disable: max-line-length
/**
 * A combo set for using Redux-toolkit along with redux-observable
 */
const toolkit_1 = require("@reduxjs/toolkit");
const redux_observable_1 = require("redux-observable");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
function ofPayloadAction(...actionCreators) {
    return redux_observable_1.ofType(...actionCreators.map(c => c.type));
}
exports.ofPayloadAction = ofPayloadAction;
class StateFactory {
    constructor(preloadedState) {
        this.preloadedState = preloadedState;
        this.store$ = new rxjs_1.BehaviorSubject(undefined);
        this.epicSeq = 0;
        // private globalChangeActionCreator = createAction<(draftState: Draft<any>) => void>('__global_change');
        this.debugLog = new rxjs_1.ReplaySubject(15);
        /**
         * Unlike store.dispatch(action),
         * If you call next() on this subject, it can save action dispatch an action even before store is configured
         */
        this.actionsToDispatch = new rxjs_1.ReplaySubject(10);
        this.realtimeState$ = new rxjs_1.BehaviorSubject(preloadedState);
        this.epicWithUnsub$ = new rxjs_1.BehaviorSubject(this.createRootEpic());
        this.log$ = this.debugLog.asObservable();
        this.reducerMap = {};
        this.rootStoreReady = this.store$.pipe(operators_1.filter(store => store != null), operators_1.take(1)).toPromise();
        this.newSlice({
            initialState: {},
            name: 'debug',
            reducers: {}
        });
        this.defaultSliceReducers = {
            _change: (state, action) => {
                action.payload(state);
            }
        };
    }
    configureStore() {
        if (this.store$.getValue())
            return;
        const rootReducer = this.createRootReducer();
        const epicMiddleware = redux_observable_1.createEpicMiddleware();
        const store = toolkit_1.configureStore({
            reducer: rootReducer,
            // preloadedState: this.preloadedState,
            middleware: [epicMiddleware]
        });
        this.store$.next(store);
        store.subscribe(() => {
            const state = store.getState();
            this.realtimeState$.next(state);
        });
        this.realtimeState$.pipe(operators_1.distinctUntilChanged(), 
        // tap(() => console.log('state changed')),
        operators_1.tap(state => this.debugLog.next(['state', state]))).subscribe();
        epicMiddleware.run((action$, state$, dependencies) => {
            return this.epicWithUnsub$.pipe(operators_1.mergeMap(([epic, unsub]) => epic(action$, state$, dependencies)
                .pipe(operators_1.takeUntil(unsub.pipe(operators_1.tap((epicId) => {
                this.debugLog.next(['[redux-toolkit-obs]', `unsubscribe from ${epicId}`]);
            }))))));
        });
        return this;
    }
    /**
     * Create our special slice with a default reducer action:
     * - `change(state: Draft<S>, action: PayloadAction<(draftState: Draft<SS>) => void>)`
     * - initialState is loaded from StateFactory's partial preloadedState
     */
    newSlice(opt) {
        const _opt = opt;
        const reducers = _opt.reducers;
        if (reducers._change == null)
            Object.assign(_opt.reducers, this.defaultSliceReducers);
        if (reducers._init == null) {
            reducers._init = (draft, action) => {
                this.debugLog.next(['[redux-toolkit-obs]', `slice "${opt.name}" is created ${action.payload.isLazy ? 'lazily' : ''}`]);
            };
        }
        if (this.preloadedState && this.preloadedState[opt.name]) {
            Object.assign(opt.initialState, this.preloadedState[opt.name]);
        }
        const slice = toolkit_1.createSlice(opt);
        this.addSliceMaybeReplaceReducer(slice);
        return slice;
    }
    removeSlice(slice) {
        delete this.reducerMap[slice.name];
        if (this.getRootStore()) {
            this.debugLog.next(['[redux-toolkit-obs]', 'remove slice ' + slice.name]);
            const newRootReducer = this.createRootReducer();
            this.getRootStore().replaceReducer(newRootReducer);
        }
    }
    /**
     * @returns a function to unsubscribe from this epic
     * @param epic
     */
    addEpic(epic) {
        const epicId = 'Epic-' + ++this.epicSeq;
        const unsubscribeEpic = new rxjs_1.Subject();
        this.epicWithUnsub$.next([epic, unsubscribeEpic]);
        this.debugLog.next(['[redux-toolkit-obs]', epicId + ' is added']);
        return () => unsubscribeEpic.next(epicId);
    }
    sliceState(slice) {
        const store = this.getRootStore();
        return store ? store.getState()[slice.name] : {};
    }
    sliceStore(slice) {
        return this.realtimeState$.pipe(operators_1.map(s => s[slice.name]), operators_1.filter(ss => ss != null), operators_1.distinctUntilChanged());
    }
    dispatch(action) {
        this.actionsToDispatch.next(action);
    }
    /**
     * Unlink Redux's bindActionCreators, our store is lazily created, dispatch is not available at beginning.
     * Parameter is a Slice instead of action map
     */
    bindActionCreators(slice) {
        const actionMap = {};
        for (const [sliceName, actionCreator] of Object.entries(slice.actions)) {
            const name = sliceName;
            const doAction = (...param) => {
                const action = actionCreator(...param);
                this.dispatch(action);
                return action;
            };
            actionMap[name] = doAction;
        }
        return actionMap;
    }
    addSliceMaybeReplaceReducer(slice) {
        this.reducerMap[slice.name] = slice.reducer;
        if (this.getRootStore()) {
            this.dispatch(slice.actions._init({ isLazy: true }));
            // store has been configured, in this case we do replaceReducer()
            const newRootReducer = this.createRootReducer();
            this.getRootStore().replaceReducer(newRootReducer);
        }
        else {
            this.dispatch(slice.actions._init({ isLazy: false }));
        }
        // return slices.map(slice => typedBindActionCreaters(slice.actions, store.dispatch));
        return slice;
    }
    createRootReducer() {
        // createReducer({}, builder => {
        //   builder.addCase(this.globalChangeActionCreator,(draft, action) => {
        //     action.payload(draft);
        //   })
        //   .addDefaultCase((draft, action) => {
        //     return combineReducers(this.reducerMap)(draft, action);
        //   });
        // });
        return toolkit_1.combineReducers(this.reducerMap);
    }
    getRootStore() {
        return this.store$.getValue();
    }
    createRootEpic() {
        const unsubscribeEpic = new rxjs_1.Subject();
        const logEpic = (action$, state$) => {
            return rxjs_1.merge(
            // state$.pipe(
            //   tap(state => this.debugLog.next(['state', state])),
            //   ignoreElements()
            // ),
            action$.pipe(operators_1.tap(action => {
                this.debugLog.next(['action', action.type]);
            }), operators_1.ignoreElements()), this.actionsToDispatch);
        };
        return [logEpic, unsubscribeEpic];
    }
}
exports.StateFactory = StateFactory;
if (module.hot) {
    module.hot.decline();
}
//# sourceMappingURL=data:application/json;base64,