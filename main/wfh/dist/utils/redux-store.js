"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateFactory = exports.ofPayloadAction = void 0;
/// <reference lib="es2017" />
// tslint:disable: max-line-length
/**
 * A combo set for using Redux-toolkit along with redux-observable
 */
const toolkit_1 = require("@reduxjs/toolkit");
const redux_observable_1 = require("redux-observable");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
function ofPayloadAction(...actionCreators) {
    return redux_observable_1.ofType(...actionCreators.map(c => c.type));
}
exports.ofPayloadAction = ofPayloadAction;
class StateFactory {
    constructor(preloadedState) {
        this.preloadedState = preloadedState;
        this.store$ = new rxjs_1.BehaviorSubject(undefined);
        // private globalChangeActionCreator = createAction<(draftState: Draft<any>) => void>('__global_change');
        this.debugLog = new rxjs_1.ReplaySubject(15);
        /**
         * Unlike store.dispatch(action),
         * If you call next() on this subject, it can save action dispatch an action even before store is configured
         */
        this.actionsToDispatch = new rxjs_1.ReplaySubject(10);
        this.realtimeState$ = new rxjs_1.BehaviorSubject(preloadedState);
        this.epic$ = new rxjs_1.BehaviorSubject(this.createRootEpic());
        this.log$ = this.debugLog.asObservable();
        this.reducerMap = {};
        this.rootStoreReady = this.store$.pipe(operators_1.filter(store => store != null), operators_1.take(1)).toPromise();
        this.newSlice({
            initialState: {},
            name: 'debug',
            reducers: {}
        });
        this.defaultSliceReducers = {
            _change: (state, action) => {
                action.payload(state);
            }
        };
    }
    configureStore() {
        const rootReducer = this.createRootReducer();
        const epicMiddleware = redux_observable_1.createEpicMiddleware();
        const store = toolkit_1.configureStore({
            reducer: rootReducer,
            // preloadedState: this.preloadedState,
            middleware: [epicMiddleware]
        });
        this.store$.next(store);
        store.subscribe(() => {
            const state = store.getState();
            this.realtimeState$.next(state);
            this.debugLog.next(['state', state]);
        });
        epicMiddleware.run((action$, state$, dependencies) => {
            return this.epic$.pipe(operators_1.mergeMap(epic => epic(action$, state$, dependencies).pipe(operators_1.takeUntil(action$.pipe(redux_observable_1.ofType('EPIC_END'))))));
        });
        return this;
    }
    /**
     * Create our special slice with a default reducer action:
     * - `change(state: Draft<S>, action: PayloadAction<(draftState: Draft<SS>) => void>)`
     * - initialState is loaded from StateFactory's partial preloadedState
     */
    newSlice(opt) {
        const _opt = opt;
        const reducers = _opt.reducers;
        if (reducers._change == null)
            Object.assign(_opt.reducers, this.defaultSliceReducers);
        if (reducers._init == null) {
            reducers._init = (draft, action) => {
                this.debugLog.next(['slice', `"${opt.name}" is created ${action.payload.isLazy ? 'lazily' : ''}`]);
            };
        }
        if (this.preloadedState && this.preloadedState[opt.name]) {
            Object.assign(opt.initialState, this.preloadedState[opt.name]);
        }
        const slice = toolkit_1.createSlice(opt);
        this.addSliceMaybeReplaceReducer(slice);
        return slice;
    }
    addEpic(epic) {
        this.epic$.next(epic);
    }
    sliceState(slice) {
        const store = this.getRootStore();
        return store ? store.getState()[slice.name] : {};
    }
    sliceStore(slice) {
        return this.realtimeState$.pipe(operators_1.map(s => s[slice.name]), operators_1.filter(ss => ss != null), operators_1.distinctUntilChanged());
    }
    dispatch(action) {
        this.actionsToDispatch.next(action);
    }
    /**
     * Unlink Redux's bindActionCreators, our store is lazily created, dispatch is not available at beginning.
     * Parameter is a Slice instead of action map
     */
    bindActionCreators(slice) {
        const actionMap = {};
        for (const [sliceName, actionCreator] of Object.entries(slice.actions)) {
            const name = sliceName;
            const doAction = (...param) => {
                const action = actionCreator(...param);
                this.dispatch(action);
                return action;
            };
            actionMap[name] = doAction;
        }
        return actionMap;
    }
    addSliceMaybeReplaceReducer(slice) {
        this.reducerMap[slice.name] = slice.reducer;
        if (this.getRootStore()) {
            this.dispatch(slice.actions._init({ isLazy: true }));
            // store has been configured, in this case we do replaceReducer()
            const newRootReducer = this.createRootReducer();
            this.getRootStore().replaceReducer(newRootReducer);
        }
        else {
            this.dispatch(slice.actions._init({ isLazy: false }));
        }
        // return slices.map(slice => typedBindActionCreaters(slice.actions, store.dispatch));
        return slice;
    }
    createRootReducer() {
        // createReducer({}, builder => {
        //   builder.addCase(this.globalChangeActionCreator,(draft, action) => {
        //     action.payload(draft);
        //   })
        //   .addDefaultCase((draft, action) => {
        //     return combineReducers(this.reducerMap)(draft, action);
        //   });
        // });
        return toolkit_1.combineReducers(this.reducerMap);
    }
    getRootStore() {
        return this.store$.getValue();
    }
    createRootEpic() {
        const logEpic = (action$, _state$) => {
            action$.pipe(operators_1.tap(action => {
                this.debugLog.next(['action', action.type]);
            })).subscribe();
            return this.actionsToDispatch;
            // return merge(
            //   this.actionsToDispatch,
            //   of<PayloadAction>({type: 'main/start', payload: undefined})
            // );
        };
        return logEpic;
    }
}
exports.StateFactory = StateFactory;
// if (process.env.NODE_ENV !== 'production' && module.hot) {
//   module.hot.accept('./rootReducer', () => {
//     const newRootReducer = require('./rootReducer').default as typeof rootReducer;
//     store.replaceReducer(newRootReducer);
//   });
//   module.hot.accept('./rootEpic', () => {
//     const nextRootEpic = require('./rootEpic').default as typeof rootEpic;
//     // First kill any running epics
//     store.dispatch({ type: 'EPIC_END' });
//     epic$.next(nextRootEpic);
//   });
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdXgtc3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy91dGlscy9yZWR1eC1zdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4QkFBOEI7QUFDOUIsa0NBQWtDO0FBQ2xDOztHQUVHO0FBQ0gsOENBTzBCO0FBQzFCLHVEQUFzRTtBQUN0RSwrQkFBa0U7QUFDbEUsOENBQW1HO0FBWW5HLFNBQWdCLGVBQWUsQ0FHN0IsR0FBRyxjQUE0QztJQUMvQyxPQUFPLHlCQUFNLENBQUksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUxELDBDQUtDO0FBV0QsTUFBYSxZQUFZO0lBd0J2QixZQUFvQixjQUF1RDtRQUF2RCxtQkFBYyxHQUFkLGNBQWMsQ0FBeUM7UUFqQjNFLFdBQU0sR0FBRyxJQUFJLHNCQUFlLENBQXFELFNBQVMsQ0FBQyxDQUFDO1FBSTVGLHlHQUF5RztRQUVqRyxhQUFRLEdBQUcsSUFBSSxvQkFBYSxDQUFRLEVBQUUsQ0FBQyxDQUFDO1FBS2hEOzs7V0FHRztRQUNLLHNCQUFpQixHQUFHLElBQUksb0JBQWEsQ0FBcUIsRUFBRSxDQUFDLENBQUM7UUFHcEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHNCQUFlLENBQU0sY0FBYyxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHNCQUFlLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBRXJCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3BDLGtCQUFNLENBQXlDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxFQUN0RSxnQkFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFZCxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1osWUFBWSxFQUFFLEVBQUU7WUFDaEIsSUFBSSxFQUFFLE9BQU87WUFDYixRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxvQkFBb0IsR0FBRztZQUMxQixPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEIsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYztRQUNaLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzdDLE1BQU0sY0FBYyxHQUFHLHVDQUFvQixFQUFzQixDQUFDO1FBRWxFLE1BQU0sS0FBSyxHQUFHLHdCQUFjLENBQTBCO1lBQ3BELE9BQU8sRUFBRSxXQUFXO1lBQ3BCLHVDQUF1QztZQUN2QyxVQUFVLEVBQUUsQ0FBQyxjQUFjLENBQUM7U0FDN0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFeEIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDbkIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsRUFBRTtZQUNuRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNwQixvQkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUcsSUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFzQixDQUFDLElBQUksQ0FDdkYscUJBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNwQix5QkFBTSxDQUFDLFVBQVUsQ0FBQyxDQUNuQixDQUFDLENBQ0gsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQ04sR0FBK0M7UUFFL0MsTUFBTSxJQUFJLEdBQUcsR0FBMEUsQ0FBQztRQUN4RixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBdUQsQ0FBQztRQUU5RSxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksSUFBSTtZQUMxQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFFMUQsSUFBSSxRQUFRLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRTtZQUMxQixRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLGdCQUFnQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckcsQ0FBQyxDQUFDO1NBQ0g7UUFFRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDaEU7UUFDRCxNQUFNLEtBQUssR0FBRyxxQkFBZ0IsQ0FDNUIsR0FBMEUsQ0FBQyxDQUFDO1FBRTlFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxPQUFPLENBQ0wsSUFBMEM7UUFDMUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELFVBQVUsQ0FDUixLQUFvQztRQUNwQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbEMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFPLENBQUMsQ0FBQyxDQUFDLEVBQVEsQ0FBQztJQUMvRCxDQUFDO0lBRUQsVUFBVSxDQUFLLEtBQWdCO1FBQzdCLE9BQVEsSUFBSSxDQUFDLGNBQXVELENBQUMsSUFBSSxDQUN2RSxlQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3ZCLGtCQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQ3hCLGdDQUFvQixFQUFFLENBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUSxDQUFJLE1BQXdCO1FBQ2xDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGtCQUFrQixDQUFnQyxLQUFZO1FBRTVELE1BQU0sU0FBUyxHQUFHLEVBQTBCLENBQUM7UUFDN0MsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RFLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQztZQUN2QixNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQUcsS0FBWSxFQUFFLEVBQUU7Z0JBQ25DLE1BQU0sTUFBTSxHQUFJLGFBQXFCLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdEIsT0FBTyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxDQUFDO1lBQ0YsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQztTQUM1QjtRQUNELE9BQU8sU0FBNkIsQ0FBQztJQUN2QyxDQUFDO0lBRU8sMkJBQTJCLENBR2pDLEtBQXVDO1FBR3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDNUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQWEsQ0FBQyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUQsaUVBQWlFO1lBQ2pFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2hELElBQUksQ0FBQyxZQUFZLEVBQUcsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDckQ7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLENBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFhLENBQUMsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0Qsc0ZBQXNGO1FBQ3RGLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixpQ0FBaUM7UUFDakMsd0VBQXdFO1FBQ3hFLDZCQUE2QjtRQUM3QixPQUFPO1FBQ1AseUNBQXlDO1FBQ3pDLDhEQUE4RDtRQUM5RCxRQUFRO1FBQ1IsTUFBTTtRQUNOLE9BQU8seUJBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVPLFlBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFTyxjQUFjO1FBQ3BCLE1BQU0sT0FBTyxHQUE2QixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUM3RCxPQUFPLENBQUMsSUFBSSxDQUNWLGVBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDWCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM5QyxDQUFDLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDOUIsZ0JBQWdCO1lBQ2hCLDRCQUE0QjtZQUM1QixnRUFBZ0U7WUFDaEUsS0FBSztRQUNQLENBQUMsQ0FBQztRQUVGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRjtBQTFNRCxvQ0EwTUM7QUFFRCw2REFBNkQ7QUFDN0QsK0NBQStDO0FBQy9DLHFGQUFxRjtBQUNyRiw0Q0FBNEM7QUFDNUMsUUFBUTtBQUVSLDRDQUE0QztBQUM1Qyw2RUFBNkU7QUFDN0Usc0NBQXNDO0FBQ3RDLDRDQUE0QztBQUM1QyxnQ0FBZ0M7QUFDaEMsUUFBUTtBQUNSLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBsaWI9XCJlczIwMTdcIiAvPlxuLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxuLyoqXG4gKiBBIGNvbWJvIHNldCBmb3IgdXNpbmcgUmVkdXgtdG9vbGtpdCBhbG9uZyB3aXRoIHJlZHV4LW9ic2VydmFibGVcbiAqL1xuaW1wb3J0IHtcbiAgQ2FzZVJlZHVjZXIsIGNvbWJpbmVSZWR1Y2VycywgY29uZmlndXJlU3RvcmUsXG4gIENvbmZpZ3VyZVN0b3JlT3B0aW9ucywgY3JlYXRlU2xpY2UgYXMgcmVkdXhDcmVhdGVTbGljZSwgQ3JlYXRlU2xpY2VPcHRpb25zLFxuICBEcmFmdCwgRW5oYW5jZWRTdG9yZSwgUGF5bG9hZEFjdGlvbixcbiAgUGF5bG9hZEFjdGlvbkNyZWF0b3IsIFJlZHVjZXJzTWFwT2JqZWN0LFxuICBTbGljZSwgU2xpY2VDYXNlUmVkdWNlcnMsIFJlZHVjZXIsXG4gIFZhbGlkYXRlU2xpY2VDYXNlUmVkdWNlcnNcbn0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQgeyBjcmVhdGVFcGljTWlkZGxld2FyZSwgRXBpYywgb2ZUeXBlIH0gZnJvbSAncmVkdXgtb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgbWVyZ2VNYXAsIHRha2UsIHRha2VVbnRpbCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBleHBvcnQgdHlwZSBDYWxsQmFja0FjdGlvblJlZHVjZXI8U1M+ID0gQ2FzZVJlZHVjZXI8U1MsIFBheWxvYWRBY3Rpb248KGRyYWZ0U3RhdGU6IERyYWZ0PFNTPikgPT4gdm9pZD4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4dHJhU2xpY2VSZWR1Y2VyczxTUz4ge1xuICBfaW5pdDogQ2FzZVJlZHVjZXI8U1MsIFBheWxvYWRBY3Rpb248e2lzTGF6eTogYm9vbGVhbn0+PjtcbiAgX2NoYW5nZTogQ2FzZVJlZHVjZXI8U1MsIFBheWxvYWRBY3Rpb248KGRyYWZ0U3RhdGU6IERyYWZ0PFNTPikgPT4gdm9pZD4+O1xufVxuXG5leHBvcnQgdHlwZSBSZWR1Y2VyV2l0aERlZmF1bHRBY3Rpb25zPFNTLFxuICBBQ1IgZXh0ZW5kcyBTbGljZUNhc2VSZWR1Y2VyczxTUz4+ID0gVmFsaWRhdGVTbGljZUNhc2VSZWR1Y2VyczxTUywgQUNSPiAmIEV4dHJhU2xpY2VSZWR1Y2VyczxTUz47XG5cbmV4cG9ydCBmdW5jdGlvbiBvZlBheWxvYWRBY3Rpb248XG5QLCBUIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuQSBleHRlbmRzIFJldHVyblR5cGU8UGF5bG9hZEFjdGlvbkNyZWF0b3I8UCwgVD4+ID0gUmV0dXJuVHlwZTxQYXlsb2FkQWN0aW9uQ3JlYXRvcjxQLCBUPj4+KFxuICAuLi5hY3Rpb25DcmVhdG9yczogUGF5bG9hZEFjdGlvbkNyZWF0b3I8UCwgVD5bXSkge1xuICByZXR1cm4gb2ZUeXBlPEE+KC4uLmFjdGlvbkNyZWF0b3JzLm1hcChjID0+IGMudHlwZSkpO1xufVxuXG4vLyB0eXBlIFN0YXRlRnJvbVJlZHVjZXI8VD4gPSBUIGV4dGVuZHMgUmVkdWNlcjxDb21iaW5lZFN0YXRlPGluZmVyIFM+PiA/IFMgOiB1bmtub3duO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZHV4U3RvcmVXaXRoRXBpY09wdGlvbnM8U3RhdGUgPSBhbnksIFBheWxvYWQgPSBhbnksIE91dHB1dCBleHRlbmRzIFBheWxvYWRBY3Rpb248UGF5bG9hZD4gPSBQYXlsb2FkQWN0aW9uPFBheWxvYWQ+LFxuQ2FzZVJlZHVjZXJzIGV4dGVuZHMgU2xpY2VDYXNlUmVkdWNlcnM8YW55PiA9IFNsaWNlQ2FzZVJlZHVjZXJzPGFueT4sIE5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgcHJlbG9hZGVkU3RhdGU6IENvbmZpZ3VyZVN0b3JlT3B0aW9uc1sncHJlbG9hZGVkU3RhdGUnXTtcbiAgc2xpY2VzOiBTbGljZTxTdGF0ZSwgQ2FzZVJlZHVjZXJzLCBOYW1lPltdO1xuICBlcGljczogRXBpYzxQYXlsb2FkQWN0aW9uPFBheWxvYWQ+LCBPdXRwdXQsIFN0YXRlPltdO1xufVxuXG5leHBvcnQgY2xhc3MgU3RhdGVGYWN0b3J5IHtcbiAgLyoqXG4gICAqIFdoeSBJIGRvbid0IHVzZSBFcGljJ3Mgc3RhdGUkIHBhcmFtZXRlcjpcbiAgICogXG4gICAqIFJlZHV4LW9ic2VydmFibGUncyBzdGF0ZSQgZG9lcyBub3Qgbm90aWZ5IHN0YXRlIGNoYW5nZSBldmVudCB3aGVuIGEgbGF6eSBsb2FkZWQgKHJlcGxhY2VkKSBzbGljZSBpbml0aWFsaXplIHN0YXRlIFxuICAgKi9cbiAgcmVhbHRpbWVTdGF0ZSQ6IEJlaGF2aW9yU3ViamVjdDx7W2tleTogc3RyaW5nXTogYW55fT47XG4gIHN0b3JlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RW5oYW5jZWRTdG9yZTxhbnksIFBheWxvYWRBY3Rpb248YW55Pj4gfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG4gIGxvZyQ6IE9ic2VydmFibGU8YW55W10+O1xuICByb290U3RvcmVSZWFkeTogUHJvbWlzZTxFbmhhbmNlZFN0b3JlPGFueSwgUGF5bG9hZEFjdGlvbjxhbnk+Pj47XG5cbiAgLy8gcHJpdmF0ZSBnbG9iYWxDaGFuZ2VBY3Rpb25DcmVhdG9yID0gY3JlYXRlQWN0aW9uPChkcmFmdFN0YXRlOiBEcmFmdDxhbnk+KSA9PiB2b2lkPignX19nbG9iYWxfY2hhbmdlJyk7XG5cbiAgcHJpdmF0ZSBkZWJ1Z0xvZyA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueVtdPigxNSk7XG4gIHByaXZhdGUgcmVkdWNlck1hcDogUmVkdWNlcnNNYXBPYmplY3Q8YW55LCBQYXlsb2FkQWN0aW9uPGFueT4+O1xuICBwcml2YXRlIGVwaWMkOiBCZWhhdmlvclN1YmplY3Q8RXBpYz47XG5cbiAgcHJpdmF0ZSBkZWZhdWx0U2xpY2VSZWR1Y2VyczogUGFydGlhbDxFeHRyYVNsaWNlUmVkdWNlcnM8YW55Pj47XG4gIC8qKlxuICAgKiBVbmxpa2Ugc3RvcmUuZGlzcGF0Y2goYWN0aW9uKSxcbiAgICogSWYgeW91IGNhbGwgbmV4dCgpIG9uIHRoaXMgc3ViamVjdCwgaXQgY2FuIHNhdmUgYWN0aW9uIGRpc3BhdGNoIGFuIGFjdGlvbiBldmVuIGJlZm9yZSBzdG9yZSBpcyBjb25maWd1cmVkXG4gICAqL1xuICBwcml2YXRlIGFjdGlvbnNUb0Rpc3BhdGNoID0gbmV3IFJlcGxheVN1YmplY3Q8UGF5bG9hZEFjdGlvbjxhbnk+PigxMCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwcmVsb2FkZWRTdGF0ZTogQ29uZmlndXJlU3RvcmVPcHRpb25zWydwcmVsb2FkZWRTdGF0ZSddKSB7XG4gICAgdGhpcy5yZWFsdGltZVN0YXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55PihwcmVsb2FkZWRTdGF0ZSk7XG4gICAgdGhpcy5lcGljJCA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy5jcmVhdGVSb290RXBpYygpKTtcbiAgICB0aGlzLmxvZyQgPSB0aGlzLmRlYnVnTG9nLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMucmVkdWNlck1hcCA9IHt9O1xuXG4gICAgdGhpcy5yb290U3RvcmVSZWFkeSA9IHRoaXMuc3RvcmUkLnBpcGUoXG4gICAgICBmaWx0ZXI8RW5oYW5jZWRTdG9yZTxhbnksIFBheWxvYWRBY3Rpb248YW55Pj4+KHN0b3JlID0+IHN0b3JlICE9IG51bGwpLFxuICAgICAgdGFrZSgxKVxuICAgICkudG9Qcm9taXNlKCk7XG5cbiAgICB0aGlzLm5ld1NsaWNlKHtcbiAgICAgIGluaXRpYWxTdGF0ZToge30sXG4gICAgICBuYW1lOiAnZGVidWcnLFxuICAgICAgcmVkdWNlcnM6IHt9XG4gICAgfSk7XG5cbiAgICB0aGlzLmRlZmF1bHRTbGljZVJlZHVjZXJzID0ge1xuICAgICAgX2NoYW5nZTogKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgICAgYWN0aW9uLnBheWxvYWQoc3RhdGUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25maWd1cmVTdG9yZSgpIHtcbiAgICBjb25zdCByb290UmVkdWNlciA9IHRoaXMuY3JlYXRlUm9vdFJlZHVjZXIoKTtcbiAgICBjb25zdCBlcGljTWlkZGxld2FyZSA9IGNyZWF0ZUVwaWNNaWRkbGV3YXJlPFBheWxvYWRBY3Rpb248YW55Pj4oKTtcblxuICAgIGNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmU8YW55LCBQYXlsb2FkQWN0aW9uPGFueT4+KHtcbiAgICAgIHJlZHVjZXI6IHJvb3RSZWR1Y2VyLFxuICAgICAgLy8gcHJlbG9hZGVkU3RhdGU6IHRoaXMucHJlbG9hZGVkU3RhdGUsXG4gICAgICBtaWRkbGV3YXJlOiBbZXBpY01pZGRsZXdhcmVdXG4gICAgfSk7XG5cbiAgICB0aGlzLnN0b3JlJC5uZXh0KHN0b3JlKTtcblxuICAgIHN0b3JlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICB0aGlzLnJlYWx0aW1lU3RhdGUkLm5leHQoc3RhdGUpO1xuICAgICAgdGhpcy5kZWJ1Z0xvZy5uZXh0KFsnc3RhdGUnLCBzdGF0ZV0pO1xuICAgIH0pO1xuXG4gICAgZXBpY01pZGRsZXdhcmUucnVuKChhY3Rpb24kLCBzdGF0ZSQsIGRlcGVuZGVuY2llcykgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZXBpYyQucGlwZShcbiAgICAgICAgbWVyZ2VNYXAoZXBpYyA9PiAoKGVwaWMgYXMgRXBpYykoYWN0aW9uJCwgc3RhdGUkLCBkZXBlbmRlbmNpZXMpIGFzIFJldHVyblR5cGU8RXBpYz4pLnBpcGUoXG4gICAgICAgICAgdGFrZVVudGlsKGFjdGlvbiQucGlwZShcbiAgICAgICAgICAgIG9mVHlwZSgnRVBJQ19FTkQnKVxuICAgICAgICAgICkpXG4gICAgICAgICkpXG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBvdXIgc3BlY2lhbCBzbGljZSB3aXRoIGEgZGVmYXVsdCByZWR1Y2VyIGFjdGlvbjogXG4gICAqIC0gYGNoYW5nZShzdGF0ZTogRHJhZnQ8Uz4sIGFjdGlvbjogUGF5bG9hZEFjdGlvbjwoZHJhZnRTdGF0ZTogRHJhZnQ8U1M+KSA9PiB2b2lkPilgXG4gICAqIC0gaW5pdGlhbFN0YXRlIGlzIGxvYWRlZCBmcm9tIFN0YXRlRmFjdG9yeSdzIHBhcnRpYWwgcHJlbG9hZGVkU3RhdGVcbiAgICovXG4gIG5ld1NsaWNlPFNTLCBfQ2FzZVJlZHVjZXIgZXh0ZW5kcyBTbGljZUNhc2VSZWR1Y2VyczxTUz4gPSBTbGljZUNhc2VSZWR1Y2VyczxTUz4sIE5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+KFxuICAgIG9wdDogQ3JlYXRlU2xpY2VPcHRpb25zPFNTLCBfQ2FzZVJlZHVjZXIsIE5hbWU+KSB7XG5cbiAgICBjb25zdCBfb3B0ID0gb3B0IGFzIENyZWF0ZVNsaWNlT3B0aW9uczxTUywgX0Nhc2VSZWR1Y2VyICYgRXh0cmFTbGljZVJlZHVjZXJzPFNTPiwgTmFtZT47XG4gICAgY29uc3QgcmVkdWNlcnMgPSBfb3B0LnJlZHVjZXJzIGFzIFJlZHVjZXJXaXRoRGVmYXVsdEFjdGlvbnM8U1MsIF9DYXNlUmVkdWNlcj47XG5cbiAgICBpZiAocmVkdWNlcnMuX2NoYW5nZSA9PSBudWxsKVxuICAgICAgT2JqZWN0LmFzc2lnbihfb3B0LnJlZHVjZXJzLCB0aGlzLmRlZmF1bHRTbGljZVJlZHVjZXJzKTtcblxuICAgIGlmIChyZWR1Y2Vycy5faW5pdCA9PSBudWxsKSB7XG4gICAgICByZWR1Y2Vycy5faW5pdCA9IChkcmFmdCwgYWN0aW9uKSA9PiB7XG4gICAgICAgIHRoaXMuZGVidWdMb2cubmV4dChbJ3NsaWNlJywgYFwiJHtvcHQubmFtZX1cIiBpcyBjcmVhdGVkICR7YWN0aW9uLnBheWxvYWQuaXNMYXp5ID8gJ2xhemlseScgOiAnJ31gXSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByZWxvYWRlZFN0YXRlICYmIHRoaXMucHJlbG9hZGVkU3RhdGVbb3B0Lm5hbWVdKSB7XG4gICAgICBPYmplY3QuYXNzaWduKG9wdC5pbml0aWFsU3RhdGUsIHRoaXMucHJlbG9hZGVkU3RhdGVbb3B0Lm5hbWVdKTtcbiAgICB9XG4gICAgY29uc3Qgc2xpY2UgPSByZWR1eENyZWF0ZVNsaWNlKFxuICAgICAgb3B0IGFzIENyZWF0ZVNsaWNlT3B0aW9uczxTUywgX0Nhc2VSZWR1Y2VyICYgRXh0cmFTbGljZVJlZHVjZXJzPFNTPiwgTmFtZT4pO1xuXG4gICAgdGhpcy5hZGRTbGljZU1heWJlUmVwbGFjZVJlZHVjZXIoc2xpY2UpO1xuXG4gICAgcmV0dXJuIHNsaWNlO1xuICB9XG5cbiAgYWRkRXBpYzxQYXlsb2FkLCBPdXRwdXQgZXh0ZW5kcyBQYXlsb2FkQWN0aW9uPFBheWxvYWQ+ID0gUGF5bG9hZEFjdGlvbjxQYXlsb2FkPj4oXG4gICAgZXBpYzogRXBpYzxQYXlsb2FkQWN0aW9uPFBheWxvYWQ+LCBPdXRwdXQ+KSB7XG4gICAgdGhpcy5lcGljJC5uZXh0KGVwaWMpO1xuICB9XG5cbiAgc2xpY2VTdGF0ZTxTUywgQ2FzZVJlZHVjZXJzIGV4dGVuZHMgU2xpY2VDYXNlUmVkdWNlcnM8U1M+ID0gU2xpY2VDYXNlUmVkdWNlcnM8U1M+LCBOYW1lIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPihcbiAgICBzbGljZTogU2xpY2U8U1MsIENhc2VSZWR1Y2VycywgTmFtZT4pOiBTUyB7XG4gICAgY29uc3Qgc3RvcmUgPSB0aGlzLmdldFJvb3RTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZSA/IHN0b3JlLmdldFN0YXRlKClbc2xpY2UubmFtZV0gYXMgU1MgOiB7fSBhcyBTUztcbiAgfVxuXG4gIHNsaWNlU3RvcmU8U1M+KHNsaWNlOiBTbGljZTxTUz4pOiBPYnNlcnZhYmxlPFNTPiB7XG4gICAgcmV0dXJuICh0aGlzLnJlYWx0aW1lU3RhdGUkIGFzIEJlaGF2aW9yU3ViamVjdDx7W2tleTogc3RyaW5nXTogU1N9PikucGlwZShcbiAgICAgIG1hcChzID0+IHNbc2xpY2UubmFtZV0pLFxuICAgICAgZmlsdGVyKHNzID0+IHNzICE9IG51bGwpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICk7XG4gIH1cblxuICBkaXNwYXRjaDxUPihhY3Rpb246IFBheWxvYWRBY3Rpb248VD4pIHtcbiAgICB0aGlzLmFjdGlvbnNUb0Rpc3BhdGNoLm5leHQoYWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmxpbmsgUmVkdXgncyBiaW5kQWN0aW9uQ3JlYXRvcnMsIG91ciBzdG9yZSBpcyBsYXppbHkgY3JlYXRlZCwgZGlzcGF0Y2ggaXMgbm90IGF2YWlsYWJsZSBhdCBiZWdpbm5pbmcuXG4gICAqIFBhcmFtZXRlciBpcyBhIFNsaWNlIGluc3RlYWQgb2YgYWN0aW9uIG1hcFxuICAgKi9cbiAgYmluZEFjdGlvbkNyZWF0b3JzPEEsIFNsaWNlIGV4dGVuZHMge2FjdGlvbnM6IEF9PihzbGljZTogU2xpY2UpIHtcblxuICAgIGNvbnN0IGFjdGlvbk1hcCA9IHt9IGFzIHR5cGVvZiBzbGljZS5hY3Rpb25zO1xuICAgIGZvciAoY29uc3QgW3NsaWNlTmFtZSwgYWN0aW9uQ3JlYXRvcl0gb2YgT2JqZWN0LmVudHJpZXMoc2xpY2UuYWN0aW9ucykpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBzbGljZU5hbWU7XG4gICAgICBjb25zdCBkb0FjdGlvbiA9ICguLi5wYXJhbTogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gKGFjdGlvbkNyZWF0b3IgYXMgYW55KSguLi5wYXJhbSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICAgIH07XG4gICAgICBhY3Rpb25NYXBbbmFtZV0gPSBkb0FjdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvbk1hcCBhcyBTbGljZVsnYWN0aW9ucyddO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRTbGljZU1heWJlUmVwbGFjZVJlZHVjZXI8U3RhdGUsXG4gICAgQ2FzZVJlZHVjZXJzIGV4dGVuZHMgU2xpY2VDYXNlUmVkdWNlcnM8U3RhdGU+LFxuICAgIE5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+KFxuICAgIHNsaWNlOiBTbGljZTxTdGF0ZSwgQ2FzZVJlZHVjZXJzLCBOYW1lPlxuICAgICkge1xuXG4gICAgdGhpcy5yZWR1Y2VyTWFwW3NsaWNlLm5hbWVdID0gc2xpY2UucmVkdWNlcjtcbiAgICBpZiAodGhpcy5nZXRSb290U3RvcmUoKSkge1xuICAgICAgdGhpcy5kaXNwYXRjaCgoc2xpY2UuYWN0aW9ucy5faW5pdCBhcyBhbnkpKHtpc0xhenk6IHRydWV9KSk7XG4gICAgICAvLyBzdG9yZSBoYXMgYmVlbiBjb25maWd1cmVkLCBpbiB0aGlzIGNhc2Ugd2UgZG8gcmVwbGFjZVJlZHVjZXIoKVxuICAgICAgY29uc3QgbmV3Um9vdFJlZHVjZXIgPSB0aGlzLmNyZWF0ZVJvb3RSZWR1Y2VyKCk7XG4gICAgICB0aGlzLmdldFJvb3RTdG9yZSgpIS5yZXBsYWNlUmVkdWNlcihuZXdSb290UmVkdWNlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goKHNsaWNlLmFjdGlvbnMuX2luaXQgYXMgYW55KSh7aXNMYXp5OiBmYWxzZX0pKTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIHNsaWNlcy5tYXAoc2xpY2UgPT4gdHlwZWRCaW5kQWN0aW9uQ3JlYXRlcnMoc2xpY2UuYWN0aW9ucywgc3RvcmUuZGlzcGF0Y2gpKTtcbiAgICByZXR1cm4gc2xpY2U7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVJvb3RSZWR1Y2VyKCk6IFJlZHVjZXIge1xuICAgIC8vIGNyZWF0ZVJlZHVjZXIoe30sIGJ1aWxkZXIgPT4ge1xuICAgIC8vICAgYnVpbGRlci5hZGRDYXNlKHRoaXMuZ2xvYmFsQ2hhbmdlQWN0aW9uQ3JlYXRvciwoZHJhZnQsIGFjdGlvbikgPT4ge1xuICAgIC8vICAgICBhY3Rpb24ucGF5bG9hZChkcmFmdCk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLmFkZERlZmF1bHRDYXNlKChkcmFmdCwgYWN0aW9uKSA9PiB7XG4gICAgLy8gICAgIHJldHVybiBjb21iaW5lUmVkdWNlcnModGhpcy5yZWR1Y2VyTWFwKShkcmFmdCwgYWN0aW9uKTtcbiAgICAvLyAgIH0pO1xuICAgIC8vIH0pO1xuICAgIHJldHVybiBjb21iaW5lUmVkdWNlcnModGhpcy5yZWR1Y2VyTWFwKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Um9vdFN0b3JlKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlJC5nZXRWYWx1ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVSb290RXBpYygpIHtcbiAgICBjb25zdCBsb2dFcGljOiBFcGljPFBheWxvYWRBY3Rpb248YW55Pj4gPSAoYWN0aW9uJCwgX3N0YXRlJCkgPT4ge1xuICAgICAgYWN0aW9uJC5waXBlKFxuICAgICAgICB0YXAoYWN0aW9uID0+IHtcbiAgICAgICAgICB0aGlzLmRlYnVnTG9nLm5leHQoWydhY3Rpb24nLCBhY3Rpb24udHlwZV0pO1xuICAgICAgICB9KVxuICAgICAgKS5zdWJzY3JpYmUoKTtcbiAgICAgIHJldHVybiB0aGlzLmFjdGlvbnNUb0Rpc3BhdGNoO1xuICAgICAgLy8gcmV0dXJuIG1lcmdlKFxuICAgICAgLy8gICB0aGlzLmFjdGlvbnNUb0Rpc3BhdGNoLFxuICAgICAgLy8gICBvZjxQYXlsb2FkQWN0aW9uPih7dHlwZTogJ21haW4vc3RhcnQnLCBwYXlsb2FkOiB1bmRlZmluZWR9KVxuICAgICAgLy8gKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGxvZ0VwaWM7XG4gIH1cbn1cblxuLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbW9kdWxlLmhvdCkge1xuLy8gICBtb2R1bGUuaG90LmFjY2VwdCgnLi9yb290UmVkdWNlcicsICgpID0+IHtcbi8vICAgICBjb25zdCBuZXdSb290UmVkdWNlciA9IHJlcXVpcmUoJy4vcm9vdFJlZHVjZXInKS5kZWZhdWx0IGFzIHR5cGVvZiByb290UmVkdWNlcjtcbi8vICAgICBzdG9yZS5yZXBsYWNlUmVkdWNlcihuZXdSb290UmVkdWNlcik7XG4vLyAgIH0pO1xuXG4vLyAgIG1vZHVsZS5ob3QuYWNjZXB0KCcuL3Jvb3RFcGljJywgKCkgPT4ge1xuLy8gICAgIGNvbnN0IG5leHRSb290RXBpYyA9IHJlcXVpcmUoJy4vcm9vdEVwaWMnKS5kZWZhdWx0IGFzIHR5cGVvZiByb290RXBpYztcbi8vICAgICAvLyBGaXJzdCBraWxsIGFueSBydW5uaW5nIGVwaWNzXG4vLyAgICAgc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiAnRVBJQ19FTkQnIH0pO1xuLy8gICAgIGVwaWMkLm5leHQobmV4dFJvb3RFcGljKTtcbi8vICAgfSk7XG4vLyB9XG4iXX0=