"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DFS = exports.getPathTo = exports.Vertex = exports.Color = void 0;
var Color;
(function (Color) {
    Color[Color["white"] = 0] = "white";
    Color[Color["gray"] = 1] = "gray";
    Color[Color["black"] = 2] = "black";
})(Color = exports.Color || (exports.Color = {}));
class Vertex {
    constructor(color = Color.white, data) {
        this.color = color;
        this.data = data;
    }
}
exports.Vertex = Vertex;
function getPathTo(v, temp = []) {
    if (v.p) {
        getPathTo(v.p[0], temp);
    }
    temp.push(v);
}
exports.getPathTo = getPathTo;
class DFS {
    constructor(adjacencyOf) {
        this.adjacencyOf = adjacencyOf;
        this.time = 0;
    }
    visit(g) {
        this.time = 0;
        for (const u of g) {
            if (u.color === Color.white) {
                this.visitVertex(u);
            }
        }
    }
    visitVertex(u) {
        u.d = ++this.time;
        u.color = Color.gray;
        for (const v of this.adjacencyOf(u)) {
            if (v.color === Color.white) {
                v.p = [u];
                this.visitVertex(v);
            }
            else if (v.color === Color.gray) {
                this.backEdges.push([u, v]);
            }
            else {
                v.p.push(u);
            }
        }
        u.color = Color.black;
        u.f = ++this.time;
    }
}
exports.DFS = DFS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy91dGlscy9ncmFwaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLEtBSVg7QUFKRCxXQUFZLEtBQUs7SUFDZixtQ0FBUyxDQUFBO0lBQ1QsaUNBQUksQ0FBQTtJQUNKLG1DQUFLLENBQUE7QUFDUCxDQUFDLEVBSlcsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBSWhCO0FBRUQsTUFBYSxNQUFNO0lBUWpCLFlBQW1CLFFBQVEsS0FBSyxDQUFDLEtBQUssRUFBUyxJQUFPO1FBQW5DLFVBQUssR0FBTCxLQUFLLENBQWM7UUFBUyxTQUFJLEdBQUosSUFBSSxDQUFHO0lBQUcsQ0FBQztDQUMzRDtBQVRELHdCQVNDO0FBRUQsU0FBZ0IsU0FBUyxDQUFJLENBQVksRUFBRSxPQUFPLEVBQWlCO0lBQ2pFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNQLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNmLENBQUM7QUFMRCw4QkFLQztBQUVELE1BQWEsR0FBRztJQUtkLFlBQW1CLFdBQWtEO1FBQWxELGdCQUFXLEdBQVgsV0FBVyxDQUF1QztRQUo3RCxTQUFJLEdBQUcsQ0FBQyxDQUFDO0lBSXVELENBQUM7SUFFekUsS0FBSyxDQUFDLENBQXNCO1FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckI7U0FDRjtJQUNILENBQUM7SUFFTyxXQUFXLENBQUMsQ0FBWTtRQUM5QixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNsQixDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDckIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUMzQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtpQkFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3QjtpQkFBTTtnQkFDTCxDQUFDLENBQUMsQ0FBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNkO1NBQ0Y7UUFDRCxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBaENELGtCQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIENvbG9yIHtcbiAgd2hpdGUgPSAwLFxuICBncmF5LFxuICBibGFja1xufVxuXG5leHBvcnQgY2xhc3MgVmVydGV4PFQ+IHtcbiAgLyoqIGRpc2NvdmVyeSB0aW1lICovXG4gIGQ6IG51bWJlcjtcbiAgLyoqIGZpbmlzaGluZyB0aW1lICovXG4gIGY6IG51bWJlcjtcbiAgLyoqIHBhcmVudCB2ZXJ0aWNlcyAqL1xuICBwPzogVmVydGV4PFQ+W107XG5cbiAgY29uc3RydWN0b3IocHVibGljIGNvbG9yID0gQ29sb3Iud2hpdGUsIHB1YmxpYyBkYXRhOiBUKSB7fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aFRvPFQ+KHY6IFZlcnRleDxUPiwgdGVtcCA9IFtdIGFzIFZlcnRleDxUPltdKSB7XG4gIGlmICh2LnApIHtcbiAgICBnZXRQYXRoVG8odi5wWzBdLCB0ZW1wKTtcbiAgfVxuICB0ZW1wLnB1c2godik7XG59XG5cbmV4cG9ydCBjbGFzcyBERlM8VD4ge1xuICBwcml2YXRlIHRpbWUgPSAwO1xuXG4gIGJhY2tFZGdlczogW1ZlcnRleDxUPiwgVmVydGV4PFQ+XVtdO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhZGphY2VuY3lPZjogKHU6IFZlcnRleDxUPikgPT4gSXRlcmFibGU8VmVydGV4PFQ+Pikge31cblxuICB2aXNpdChnOiBJdGVyYWJsZTxWZXJ0ZXg8VD4+KSB7XG4gICAgdGhpcy50aW1lID0gMDtcbiAgICBmb3IgKGNvbnN0IHUgb2YgZykge1xuICAgICAgaWYgKHUuY29sb3IgPT09IENvbG9yLndoaXRlKSB7XG4gICAgICAgIHRoaXMudmlzaXRWZXJ0ZXgodSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2aXNpdFZlcnRleCh1OiBWZXJ0ZXg8VD4pIHtcbiAgICB1LmQgPSArK3RoaXMudGltZTtcbiAgICB1LmNvbG9yID0gQ29sb3IuZ3JheTtcbiAgICBmb3IgKGNvbnN0IHYgb2YgdGhpcy5hZGphY2VuY3lPZih1KSkge1xuICAgICAgaWYgKHYuY29sb3IgPT09IENvbG9yLndoaXRlKSB7XG4gICAgICAgIHYucCA9IFt1XTtcbiAgICAgICAgdGhpcy52aXNpdFZlcnRleCh2KTtcbiAgICAgIH0gZWxzZSBpZiAodi5jb2xvciA9PT0gQ29sb3IuZ3JheSkge1xuICAgICAgICB0aGlzLmJhY2tFZGdlcy5wdXNoKFt1LCB2XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2LnAhLnB1c2godSk7XG4gICAgICB9XG4gICAgfVxuICAgIHUuY29sb3IgPSBDb2xvci5ibGFjaztcbiAgICB1LmYgPSArK3RoaXMudGltZTtcbiAgfVxufVxuIl19