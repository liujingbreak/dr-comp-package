"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeBaseUrlAndPaths = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 *
 * @param ts
 * @param fromTsconfigFile
 * @param mergeToTsconfigDir
 * @param mergeTo
 * @return json of fromTsconfigFile
 */
function mergeBaseUrlAndPaths(ts, fromTsconfigFile, mergeToTsconfigDir, mergeTo) {
    const mergingTsCfg = ts.parseConfigFileTextToJson(fromTsconfigFile, fs_1.default.readFileSync(fromTsconfigFile, 'utf8')).config;
    const mergingTsCo = mergingTsCfg.compilerOptions;
    if (mergeTo.paths == null) {
        if (mergeTo.baseUrl == null)
            mergeTo.baseUrl = './';
        mergeTo.paths = {};
    }
    if (mergingTsCo.paths) {
        const absBaseUrl = mergingTsCo.baseUrl ?
            path_1.default.resolve(path_1.default.dirname(fromTsconfigFile), mergingTsCo.baseUrl) :
            path_1.default.dirname(fromTsconfigFile);
        for (const [key, plist] of Object.entries(mergingTsCo.paths)) {
            mergeTo.paths[key] = plist.map(item => {
                return path_1.default.relative(path_1.default.resolve(mergeToTsconfigDir, mergeTo.baseUrl), path_1.default.resolve(absBaseUrl, item)).replace(/\\/g, '/');
            });
        }
    }
    return mergingTsCfg;
}
exports.mergeBaseUrlAndPaths = mergeBaseUrlAndPaths;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtY21kLXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy90cy1jbWQtdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBSXhCOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixvQkFBb0IsQ0FBQyxFQUFjLEVBQUUsZ0JBQXdCLEVBQzNFLGtCQUEwQixFQUMxQixPQUFnQztJQUNoQyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsZ0JBQWdCLEVBQUUsWUFBRSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN0SCxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsZUFBMEMsQ0FBQztJQUU1RSxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ3pCLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJO1lBQ3pCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0tBQ3BCO0lBQ0QsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO1FBQ3JCLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0QyxjQUFJLENBQUMsT0FBTyxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNuRSxjQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDakMsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQWtDLENBQUMsRUFBRztZQUMxRixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BDLE9BQU8sY0FBSSxDQUFDLFFBQVEsQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDOUgsQ0FBQyxDQUFDLENBQUM7U0FDSjtLQUNGO0lBQ0QsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQXRCRCxvREFzQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX3RzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtDb21waWxlck9wdGlvbnMgYXMgUmVxdWlyZWRDb21waWxlck9wdGlvbnN9IGZyb20gJy4vcGFja2FnZS1tZ3IvcGFja2FnZS1saXN0LWhlbHBlcic7XG5leHBvcnQge1JlcXVpcmVkQ29tcGlsZXJPcHRpb25zfTtcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB0cyBcbiAqIEBwYXJhbSBmcm9tVHNjb25maWdGaWxlIFxuICogQHBhcmFtIG1lcmdlVG9Uc2NvbmZpZ0RpciBcbiAqIEBwYXJhbSBtZXJnZVRvIFxuICogQHJldHVybiBqc29uIG9mIGZyb21Uc2NvbmZpZ0ZpbGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQmFzZVVybEFuZFBhdGhzKHRzOiB0eXBlb2YgX3RzLCBmcm9tVHNjb25maWdGaWxlOiBzdHJpbmcsXG4gIG1lcmdlVG9Uc2NvbmZpZ0Rpcjogc3RyaW5nLFxuICBtZXJnZVRvOiBSZXF1aXJlZENvbXBpbGVyT3B0aW9ucyk6IHtjb21waWxlck9wdGlvbnM6IFJlcXVpcmVkQ29tcGlsZXJPcHRpb25zfSB7XG4gIGNvbnN0IG1lcmdpbmdUc0NmZyA9IHRzLnBhcnNlQ29uZmlnRmlsZVRleHRUb0pzb24oZnJvbVRzY29uZmlnRmlsZSwgZnMucmVhZEZpbGVTeW5jKGZyb21Uc2NvbmZpZ0ZpbGUsICd1dGY4JykpLmNvbmZpZztcbiAgY29uc3QgbWVyZ2luZ1RzQ28gPSBtZXJnaW5nVHNDZmcuY29tcGlsZXJPcHRpb25zIGFzIFJlcXVpcmVkQ29tcGlsZXJPcHRpb25zO1xuXG4gIGlmIChtZXJnZVRvLnBhdGhzID09IG51bGwpIHtcbiAgICBpZiAobWVyZ2VUby5iYXNlVXJsID09IG51bGwpXG4gICAgICBtZXJnZVRvLmJhc2VVcmwgPSAnLi8nO1xuICAgIG1lcmdlVG8ucGF0aHMgPSB7fTtcbiAgfVxuICBpZiAobWVyZ2luZ1RzQ28ucGF0aHMpIHtcbiAgICBjb25zdCBhYnNCYXNlVXJsID0gbWVyZ2luZ1RzQ28uYmFzZVVybCA/XG4gICAgICBQYXRoLnJlc29sdmUoUGF0aC5kaXJuYW1lKGZyb21Uc2NvbmZpZ0ZpbGUpLCBtZXJnaW5nVHNDby5iYXNlVXJsKSA6XG4gICAgICBQYXRoLmRpcm5hbWUoZnJvbVRzY29uZmlnRmlsZSk7XG4gICAgZm9yIChjb25zdCBba2V5LCBwbGlzdF0gb2YgT2JqZWN0LmVudHJpZXMobWVyZ2luZ1RzQ28ucGF0aHMgYXMge1trZXk6IHN0cmluZ106IHN0cmluZ1tdfSkgKSB7XG4gICAgICBtZXJnZVRvLnBhdGhzW2tleV0gPSBwbGlzdC5tYXAoaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiBQYXRoLnJlbGF0aXZlKFBhdGgucmVzb2x2ZShtZXJnZVRvVHNjb25maWdEaXIsIG1lcmdlVG8uYmFzZVVybCksIFBhdGgucmVzb2x2ZShhYnNCYXNlVXJsLCBpdGVtKSkucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnaW5nVHNDZmc7XG59XG4iXX0=