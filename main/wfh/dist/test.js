"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStore = exports.getState = exports.exampleActionDispatcher = exports.exampleSlice = void 0;
const store_1 = require("./store");
const operators_1 = require("rxjs/operators");
const rxjs_1 = require("rxjs");
const initialState = {
    foo: 0,
    _computed: {
        bar: ''
    }
};
exports.exampleSlice = store_1.stateFactory.newSlice({
    name: 'example',
    initialState,
    reducers: {
        start(d, { payload }) { },
        exampleAction(draft, { payload }) {
            // modify state draft
            draft.foo = payload;
        }
    }
});
exports.exampleActionDispatcher = store_1.stateFactory.bindActionCreators(exports.exampleSlice);
const releaseEpic = store_1.stateFactory.addEpic((action$) => {
    // const gService = getModuleInjector().get(GlobalStateStore);
    return rxjs_1.merge(action$.pipe(store_1.ofPayloadAction(exports.exampleSlice.actions.start), operators_1.map(({ payload }) => {
        exports.exampleActionDispatcher._change(d => d.foo = d.foo + 1);
    })), getStore().pipe(operators_1.map(s => s.foo), operators_1.distinctUntilChanged(), operators_1.map(changedFoo => {
        exports.exampleActionDispatcher._change(draft => {
            draft._computed.bar = 'changed ' + changedFoo;
        });
    }))).pipe(operators_1.catchError(ex => {
        // tslint:disable-next-line: no-console
        console.error(ex);
        // gService.toastAction('网络错误\n' + ex.message);
        return rxjs_1.of();
    }), operators_1.ignoreElements());
});
function getState() {
    return store_1.stateFactory.sliceState(exports.exampleSlice);
}
exports.getState = getState;
function getStore() {
    return store_1.stateFactory.sliceStore(exports.exampleSlice);
}
exports.getStore = getStore;
if (module.hot) {
    module.hot.dispose(data => {
        store_1.stateFactory.removeSlice(exports.exampleSlice);
        releaseEpic();
    });
}
function default_1() {
    process.nextTick(() => console.log('next tick', getState().foo));
    console.log(getState().foo);
    exports.exampleActionDispatcher.start();
    // setTimeout(() => console.log(getState().foo), 0);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUNBQWlGO0FBQ2pGLDhDQUFxRjtBQUNyRiwrQkFBK0I7QUFTL0IsTUFBTSxZQUFZLEdBQWlCO0lBQ2pDLEdBQUcsRUFBRSxDQUFDO0lBQ04sU0FBUyxFQUFFO1FBQ1QsR0FBRyxFQUFFLEVBQUU7S0FDUjtDQUNGLENBQUM7QUFFVyxRQUFBLFlBQVksR0FBRyxvQkFBWSxDQUFDLFFBQVEsQ0FBQztJQUNoRCxJQUFJLEVBQUUsU0FBUztJQUNmLFlBQVk7SUFDWixRQUFRLEVBQUU7UUFDUixLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUMsT0FBTyxFQUFzQixJQUFHLENBQUM7UUFDM0MsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUFDLE9BQU8sRUFBd0I7WUFDbkQscUJBQXFCO1lBQ3JCLEtBQUssQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1FBQ3RCLENBQUM7S0FDRjtDQUNGLENBQUMsQ0FBQztBQUVVLFFBQUEsdUJBQXVCLEdBQUcsb0JBQVksQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBWSxDQUFDLENBQUM7QUFFckYsTUFBTSxXQUFXLEdBQUcsb0JBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtJQUNuRCw4REFBOEQ7SUFFOUQsT0FBTyxZQUFLLENBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBZSxDQUFDLG9CQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN0RCxlQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUU7UUFDaEIsK0JBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUMsQ0FBQyxDQUNILEVBQ0QsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUNiLGVBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDZixnQ0FBb0IsRUFBRSxFQUN0QixlQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDZiwrQkFBdUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FBQyxJQUFJLENBQ0osc0JBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNkLHVDQUF1QztRQUN2QyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLCtDQUErQztRQUMvQyxPQUFPLFNBQUUsRUFBaUIsQ0FBQztJQUM3QixDQUFDLENBQUMsRUFDRiwwQkFBYyxFQUFFLENBQ2pCLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILFNBQWdCLFFBQVE7SUFDdEIsT0FBTyxvQkFBWSxDQUFDLFVBQVUsQ0FBQyxvQkFBWSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUZELDRCQUVDO0FBRUQsU0FBZ0IsUUFBUTtJQUN0QixPQUFPLG9CQUFZLENBQUMsVUFBVSxDQUFDLG9CQUFZLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRkQsNEJBRUM7QUFFRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUU7SUFDZCxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN4QixvQkFBWSxDQUFDLFdBQVcsQ0FBQyxvQkFBWSxDQUFDLENBQUM7UUFDdkMsV0FBVyxFQUFFLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7Q0FDSjtBQUVEO0lBQ0UsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsK0JBQXVCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFaEMsb0RBQW9EO0FBQ3RELENBQUM7QUFORCw0QkFNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBheWxvYWRBY3Rpb24gfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcbmltcG9ydCB7IC8qIGdldE1vZHVsZUluamVjdG9yLCAqLyBvZlBheWxvYWRBY3Rpb24sIHN0YXRlRmFjdG9yeSB9IGZyb20gJy4vc3RvcmUnO1xuaW1wb3J0IHttYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBjYXRjaEVycm9yLCBpZ25vcmVFbGVtZW50c30gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtvZiwgbWVyZ2V9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4YW1wbGVTdGF0ZSB7XG4gIGZvbzogbnVtYmVyO1xuICBfY29tcHV0ZWQ6IHtcbiAgICBiYXI6IHN0cmluZztcbiAgfTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBFeGFtcGxlU3RhdGUgPSB7XG4gIGZvbzogMCxcbiAgX2NvbXB1dGVkOiB7XG4gICAgYmFyOiAnJ1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZXhhbXBsZVNsaWNlID0gc3RhdGVGYWN0b3J5Lm5ld1NsaWNlKHtcbiAgbmFtZTogJ2V4YW1wbGUnLFxuICBpbml0aWFsU3RhdGUsXG4gIHJlZHVjZXJzOiB7XG4gICAgc3RhcnQoZCwge3BheWxvYWR9OiBQYXlsb2FkQWN0aW9uPHZvaWQ+KSB7fSxcbiAgICBleGFtcGxlQWN0aW9uKGRyYWZ0LCB7cGF5bG9hZH06IFBheWxvYWRBY3Rpb248bnVtYmVyPikge1xuICAgICAgLy8gbW9kaWZ5IHN0YXRlIGRyYWZ0XG4gICAgICBkcmFmdC5mb28gPSBwYXlsb2FkO1xuICAgIH1cbiAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBleGFtcGxlQWN0aW9uRGlzcGF0Y2hlciA9IHN0YXRlRmFjdG9yeS5iaW5kQWN0aW9uQ3JlYXRvcnMoZXhhbXBsZVNsaWNlKTtcblxuY29uc3QgcmVsZWFzZUVwaWMgPSBzdGF0ZUZhY3RvcnkuYWRkRXBpYygoYWN0aW9uJCkgPT4ge1xuICAvLyBjb25zdCBnU2VydmljZSA9IGdldE1vZHVsZUluamVjdG9yKCkuZ2V0KEdsb2JhbFN0YXRlU3RvcmUpO1xuXG4gIHJldHVybiBtZXJnZShcbiAgICBhY3Rpb24kLnBpcGUob2ZQYXlsb2FkQWN0aW9uKGV4YW1wbGVTbGljZS5hY3Rpb25zLnN0YXJ0KSxcbiAgICAgIG1hcCgoe3BheWxvYWR9KSA9PiB7XG4gICAgICAgIGV4YW1wbGVBY3Rpb25EaXNwYXRjaGVyLl9jaGFuZ2UoZCA9PiBkLmZvbyA9IGQuZm9vICsgMSk7XG4gICAgICB9KVxuICAgICksXG4gICAgZ2V0U3RvcmUoKS5waXBlKFxuICAgICAgbWFwKHMgPT4gcy5mb28pLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIG1hcChjaGFuZ2VkRm9vID0+IHtcbiAgICAgICAgZXhhbXBsZUFjdGlvbkRpc3BhdGNoZXIuX2NoYW5nZShkcmFmdCA9PiB7XG4gICAgICAgICAgZHJhZnQuX2NvbXB1dGVkLmJhciA9ICdjaGFuZ2VkICcgKyBjaGFuZ2VkRm9vO1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgKVxuICApLnBpcGUoXG4gICAgY2F0Y2hFcnJvcihleCA9PiB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXgpO1xuICAgICAgLy8gZ1NlcnZpY2UudG9hc3RBY3Rpb24oJ+e9kee7nOmUmeivr1xcbicgKyBleC5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBvZjxQYXlsb2FkQWN0aW9uPigpO1xuICAgIH0pLFxuICAgIGlnbm9yZUVsZW1lbnRzKClcbiAgKTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gIHJldHVybiBzdGF0ZUZhY3Rvcnkuc2xpY2VTdGF0ZShleGFtcGxlU2xpY2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RvcmUoKSB7XG4gIHJldHVybiBzdGF0ZUZhY3Rvcnkuc2xpY2VTdG9yZShleGFtcGxlU2xpY2UpO1xufVxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmRpc3Bvc2UoZGF0YSA9PiB7XG4gICAgc3RhdGVGYWN0b3J5LnJlbW92ZVNsaWNlKGV4YW1wbGVTbGljZSk7XG4gICAgcmVsZWFzZUVwaWMoKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNvbnNvbGUubG9nKCduZXh0IHRpY2snLCBnZXRTdGF0ZSgpLmZvbykpO1xuICBjb25zb2xlLmxvZyhnZXRTdGF0ZSgpLmZvbyk7XG4gIGV4YW1wbGVBY3Rpb25EaXNwYXRjaGVyLnN0YXJ0KCk7XG5cbiAgLy8gc2V0VGltZW91dCgoKSA9PiBjb25zb2xlLmxvZyhnZXRTdGF0ZSgpLmZvbyksIDApO1xufVxuIl19