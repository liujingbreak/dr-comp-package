"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStore = exports.getState = exports.actionDispatcher = exports.Observable = void 0;
const store_1 = require("../store");
const operators_1 = require("rxjs/operators");
const rxjs_1 = require("rxjs");
Object.defineProperty(exports, "Observable", { enumerable: true, get: function () { return rxjs_1.Observable; } });
const initialState = {
    foo: true
};
const sliceOpt = {
    name: 'package-versions',
    initialState,
    reducers: {
        exampleAction(s, { payload }) {
            // modify state draft
            s.foo = payload;
        }
    }
};
const exampleSlice = store_1.stateFactory.newSlice(sliceOpt);
exports.actionDispatcher = store_1.stateFactory.bindActionCreators(exampleSlice);
const releaseEpic = store_1.stateFactory.addEpic((action$) => {
    // const gService = getModuleInjector().get(GlobalStateStore);
    return rxjs_1.merge(action$.pipe(store_1.ofPayloadAction(exampleSlice.actions.exampleAction), operators_1.switchMap(({ payload }) => {
        return rxjs_1.from(Promise.resolve('mock async HTTP request call'));
    }))).pipe(operators_1.catchError(ex => {
        // tslint:disable-next-line: no-console
        console.error(ex);
        // gService.toastAction('网络错误\n' + ex.message);
        return rxjs_1.of();
    }), operators_1.ignoreElements());
});
function getState() {
    return store_1.stateFactory.sliceState(exampleSlice);
}
exports.getState = getState;
function getStore() {
    return store_1.stateFactory.sliceStore(exampleSlice);
}
exports.getStore = getStore;
if (module.hot) {
    module.hot.dispose(data => {
        store_1.stateFactory.removeSlice(exampleSlice);
        releaseEpic();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NwYWNlLnNsaWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvcGFja2FnZS1tZ3Ivd29ya3NwYWNlLnNsaWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9DQUFrRjtBQUNsRiw4Q0FBb0c7QUFDcEcsK0JBQWlEO0FBTXpDLDJGQU5pQixpQkFBVSxPQU1qQjtBQU1sQixNQUFNLFlBQVksR0FBd0I7SUFDeEMsR0FBRyxFQUFFLElBQUk7Q0FDVixDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUc7SUFDZixJQUFJLEVBQUUsa0JBQWtCO0lBQ3hCLFlBQVk7SUFDWixRQUFRLEVBQUU7UUFDUixhQUFhLENBQUMsQ0FBc0IsRUFBRSxFQUFDLE9BQU8sRUFBeUI7WUFDckUscUJBQXFCO1lBQ3JCLENBQUMsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLENBQUM7S0FDRjtDQUNGLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxvQkFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV4QyxRQUFBLGdCQUFnQixHQUFzQyxvQkFBWSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRWpILE1BQU0sV0FBVyxHQUFHLG9CQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDbkQsOERBQThEO0lBRTlELE9BQU8sWUFBSyxDQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQWUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUM5RCxxQkFBUyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFFO1FBQ3RCLE9BQU8sV0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FBQyxJQUFJLENBQ0osc0JBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNkLHVDQUF1QztRQUN2QyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLCtDQUErQztRQUMvQyxPQUFPLFNBQUUsRUFBaUIsQ0FBQztJQUM3QixDQUFDLENBQUMsRUFDRiwwQkFBYyxFQUFFLENBQ2pCLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILFNBQWdCLFFBQVE7SUFDdEIsT0FBTyxvQkFBWSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRkQsNEJBRUM7QUFFRCxTQUFnQixRQUFRO0lBQ3RCLE9BQU8sb0JBQVksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUZELDRCQUVDO0FBRUQsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO0lBQ2QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDeEIsb0JBQVksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkMsV0FBVyxFQUFFLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGF5bG9hZEFjdGlvbiwgSW5mZXJBY3Rpb25zVHlwZX0gZnJvbSAnLi4vLi4vLi4vcmVkdXgtdG9vbGtpdC1vYnNlcnZhYmxlL2Rpc3QvcmVkdXgtdG9vbGtpdC1vYnNlcnZhYmxlJztcbmltcG9ydCB7IC8qIGdldE1vZHVsZUluamVjdG9yLCAqLyBvZlBheWxvYWRBY3Rpb24sIHN0YXRlRmFjdG9yeSB9IGZyb20gJy4uL3N0b3JlJztcbmltcG9ydCB7LyptYXAsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCovIGNhdGNoRXJyb3IsIGlnbm9yZUVsZW1lbnRzLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7b2YsIGZyb20sIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuLyoqIFdlIGhhdmUgdG8gZXhwbGljaXR5bHkgZXhwb3J0IE9ic2VydmFibGUsIGZvciBleHBvcnRpbmcgZ2V0U3RvcmUoKSBmdW5jdGlvbiwgb3RoZXJ3aXNlIFR5cGVzY3JpcHQgd2lsbCByZXBvcnQgXG4gKiBcIlRoaXMgaXMgbGlrZWx5IG5vdCBwb3J0YWJsZSwgYSB0eXBlIGFubm90YXRpb24gaXMgbmVjZXNzYXJ5XCIgXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMwODU4XG4gKi9cbmV4cG9ydCB7T2JzZXJ2YWJsZX07XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFrYWdlVmVyc2lvbnNTdGF0ZSB7XG4gIGZvbzogYm9vbGVhbjtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBQYWthZ2VWZXJzaW9uc1N0YXRlID0ge1xuICBmb286IHRydWVcbn07XG5cbmNvbnN0IHNsaWNlT3B0ID0ge1xuICBuYW1lOiAncGFja2FnZS12ZXJzaW9ucycsXG4gIGluaXRpYWxTdGF0ZSxcbiAgcmVkdWNlcnM6IHtcbiAgICBleGFtcGxlQWN0aW9uKHM6IFBha2FnZVZlcnNpb25zU3RhdGUsIHtwYXlsb2FkfTogUGF5bG9hZEFjdGlvbjxib29sZWFuPikge1xuICAgICAgLy8gbW9kaWZ5IHN0YXRlIGRyYWZ0XG4gICAgICBzLmZvbyA9IHBheWxvYWQ7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBleGFtcGxlU2xpY2UgPSBzdGF0ZUZhY3RvcnkubmV3U2xpY2Uoc2xpY2VPcHQpO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uRGlzcGF0Y2hlcjogSW5mZXJBY3Rpb25zVHlwZTx0eXBlb2Ygc2xpY2VPcHQ+ID0gc3RhdGVGYWN0b3J5LmJpbmRBY3Rpb25DcmVhdG9ycyhleGFtcGxlU2xpY2UpO1xuXG5jb25zdCByZWxlYXNlRXBpYyA9IHN0YXRlRmFjdG9yeS5hZGRFcGljKChhY3Rpb24kKSA9PiB7XG4gIC8vIGNvbnN0IGdTZXJ2aWNlID0gZ2V0TW9kdWxlSW5qZWN0b3IoKS5nZXQoR2xvYmFsU3RhdGVTdG9yZSk7XG5cbiAgcmV0dXJuIG1lcmdlKFxuICAgIGFjdGlvbiQucGlwZShvZlBheWxvYWRBY3Rpb24oZXhhbXBsZVNsaWNlLmFjdGlvbnMuZXhhbXBsZUFjdGlvbiksXG4gICAgICBzd2l0Y2hNYXAoKHtwYXlsb2FkfSkgPT4ge1xuICAgICAgICByZXR1cm4gZnJvbShQcm9taXNlLnJlc29sdmUoJ21vY2sgYXN5bmMgSFRUUCByZXF1ZXN0IGNhbGwnKSk7XG4gICAgICB9KVxuICAgIClcbiAgKS5waXBlKFxuICAgIGNhdGNoRXJyb3IoZXggPT4ge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmVycm9yKGV4KTtcbiAgICAgIC8vIGdTZXJ2aWNlLnRvYXN0QWN0aW9uKCfnvZHnu5zplJnor69cXG4nICsgZXgubWVzc2FnZSk7XG4gICAgICByZXR1cm4gb2Y8UGF5bG9hZEFjdGlvbj4oKTtcbiAgICB9KSxcbiAgICBpZ25vcmVFbGVtZW50cygpXG4gICk7XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICByZXR1cm4gc3RhdGVGYWN0b3J5LnNsaWNlU3RhdGUoZXhhbXBsZVNsaWNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JlKCkge1xuICByZXR1cm4gc3RhdGVGYWN0b3J5LnNsaWNlU3RvcmUoZXhhbXBsZVNsaWNlKTtcbn1cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGRhdGEgPT4ge1xuICAgIHN0YXRlRmFjdG9yeS5yZW1vdmVTbGljZShleGFtcGxlU2xpY2UpO1xuICAgIHJlbGVhc2VFcGljKCk7XG4gIH0pO1xufVxuIl19