"use strict";
// export type StateHandler<V> = (machine: LLStateMachine<V>) => void;
Object.defineProperty(exports, "__esModule", { value: true });
class LLStateMachine {
    constructor(firstHandler) {
        this.debugOn = false;
        this.stack = [];
        this.cache = [];
        this.position = 0;
        this.line = 1;
        this.column = 1;
        this.switchDone = Promise.resolve();
        this.cacheReadIdx = 0;
        this.stack.push(firstHandler);
    }
    consume() {
        this.cache.splice(0, this.cacheReadIdx + 1); // Only keep the last one
        this.cacheReadIdx = -1;
    }
    /**
     * Reset to the position after last consumed
     */
    reset() {
        if (this.currChunk && !this.currChunk.isClosed) {
            const resetCnt = this.cacheReadIdx + 1;
            this.currChunk.values.splice(this.currChunk.values.length - resetCnt, resetCnt);
        }
        this.cacheReadIdx = -1;
    }
    push(handler) {
        this.stack.push(handler);
    }
    /**
     * popup current machine from stack, next time it will go to last machine.
     */
    pop() {
        this.stack.pop();
    }
    startChunk(type) {
        if (this.currChunk)
            this.currChunk.close();
        this.currChunk = new Chunk(type, this).open();
        return this.currChunk;
    }
    closeChunk() {
        return this.currChunk.close();
    }
    onNext(values) {
        this.cache.push(...values);
        const switchState = () => {
            this.switchDone = this.switchDone
                .then(() => {
                if (this.cacheReadIdx < this.cache.length) {
                    const value = this.cache[this.cacheReadIdx];
                    if (this.currChunk)
                        this.currChunk.values.push(value);
                    return this.callHandler(value)
                        .then(() => {
                        this.cacheReadIdx++;
                        this.position++;
                        this.column++;
                        if (value === '\n') {
                            this.line++;
                            this.column = 1;
                        }
                        switchState();
                    });
                }
            });
        };
        switchState();
    }
    done() {
        return this.switchDone;
    }
    callHandler(value) {
        const currHandler = this.stack[this.stack.length - 1];
        return Promise.resolve(currHandler.handle(this, value));
    }
}
exports.LLStateMachine = LLStateMachine;
class Chunk {
    constructor(type, machine) {
        this.type = type;
        this.machine = machine;
        this.values = [];
        this.isClosed = false;
    }
    open() {
        this.start = {
            pos: this.machine.position,
            line: this.machine.line,
            column: this.machine.column
        };
        return this;
    }
    close() {
        this.isClosed = true;
        this.end = this.machine.position + 1;
        return this;
    }
    toString() {
        return JSON.stringify({ start: this.start, end: this.end, value: this.values });
    }
}
exports.Chunk = Chunk;
//# sourceMappingURL=data:application/json;base64,