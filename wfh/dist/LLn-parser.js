"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const util_1 = __importDefault(require("util"));
class Chunk {
    constructor(pos, line, col) {
        this.pos = pos;
        this.line = line;
        this.col = col;
        this.values = [];
        this.isClosed = false;
        this.trackValue = true;
    }
    close(position) {
        this.isClosed = true;
        this.end = position;
        return this;
    }
}
exports.Chunk = Chunk;
class Token extends Chunk {
}
exports.Token = Token;
/**
 * Parser
 * @param input string type
 * @param parseLex
 * @param parseGrammar
 */
function parser(name, input, parseLex, pipeOperators, parseGrammar) {
    const _parseGrammarObs = (la) => {
        return parseGrammar(la);
    };
    let tokens = input.pipe(
    // observeOn(queueScheduler),
    mapChunks(name + '-lexer', parseLex), operators_1.map(chunk => {
        chunk.text = chunk.values.join('');
        delete chunk.values;
        return chunk;
    }));
    if (pipeOperators) {
        for (const operator of pipeOperators)
            tokens = tokens.pipe(operator);
    }
    let result;
    tokens.pipe(operators_1.map(token => [token]), mapChunksObs(name + '-parser', _parseGrammarObs), operators_1.tap(ast => {
        result = ast;
    })).subscribe();
    return result;
}
exports.parser = parser;
function mapChunksObs(name, parse) {
    return function (input) {
        return new rxjs_1.Observable(sub => {
            const la = new LookAhead(name);
            input.subscribe(input => la._write(input), err => sub.error(err), () => {
                la._final();
            });
            try {
                sub.next(parse(la));
                sub.complete();
            }
            catch (err) {
                sub.error(err);
            }
        });
    };
}
exports.mapChunksObs = mapChunksObs;
function mapChunks(name, parse) {
    return function (input) {
        return new rxjs_1.Observable(sub => {
            const la = new LookAhead(name);
            input.subscribe(input => la._write(input), err => sub.error(err), () => {
                la._final();
                const la$ = la;
                la$.startToken = la.startChunk;
                la$.emitToken = function () {
                    const chunk = this.closeChunk();
                    sub.next(chunk);
                    return chunk;
                };
                parse(la$, sub);
                sub.complete();
            });
        });
    };
}
exports.mapChunks = mapChunks;
class LookAhead {
    constructor(name) {
        this.name = name;
        this.line = 1;
        this.column = 1;
        this.currPos = 0;
        this.cacheStartPos = 0;
        this.savedState = {};
        this.cached = [];
    }
    // _retryOnRefuel<R>(parseCb: (ctx: LookAhead<T, TT>) => R): R | Promise<R> {
    //   this.saveState();
    //   try {
    //     return parseCb(this);
    //   } catch (e) {
    //     if (e.message === LookAhead.WAIT_ERROR) {
    //       return new Promise(resolve => {
    //         this.readResolve = resolve;
    //         this.restoreState();
    //       }).then(() => {
    //         return this.retryOnRefuel(parseCb);
    //       }).catch(e => {
    //       });
    //     }
    //     throw e;
    //   }
    // }
    retryOnRefuel(parseCb) {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                this.saveState();
                try {
                    const res = yield Promise.resolve(parseCb(this));
                    return res;
                }
                catch (e) {
                    if (e.code === 'WAIT') {
                        this.restoreState();
                        yield new Promise(resolve => {
                            this.readResolve = resolve;
                        });
                    }
                    else {
                        throw e;
                    }
                }
            }
        });
    }
    _write(values) {
        for (const v of values)
            this.cached.push(v);
        if (this.readResolve != null) {
            const resolve = this.readResolve;
            if (this.waitForPos < this.cacheStartPos + this.cached.length) {
                delete this.readResolve;
                delete this.waitForPos;
                resolve();
            }
        }
    }
    _final() {
        this._write([null]);
    }
    get position() {
        return this.currPos;
    }
    /**
       * look ahead for 1 character
       * @param num default is 1
       * @return null if EOF is reached
       */
    la(num = 1) {
        const readPos = this.currPos + num - 1;
        return this.read(readPos);
    }
    advance(count = 1) {
        // return new Promise(resolve => {
        let currValue;
        let i = 0;
        while (i++ < count) {
            const value = this.la(1);
            if (value == null) {
                this.throwError('Unexpect EOF'); // , stack);
                break;
            }
            this.currPos++;
            this.column++;
            if (value === '\n') {
                this.line++;
                this.column = 1;
            }
            if (this.currPos - this.cacheStartPos > 0x100000) {
                this.cached.splice(0, 0x100000);
                this.cacheStartPos += 0x100000;
            }
            if (this.currChunk && !this.currChunk.isClosed && this.currChunk.trackValue) {
                this.currChunk.values.push(value);
            }
            currValue = value;
        }
        this.lastConsumed = currValue;
        return currValue;
    }
    isNext(...values) {
        return this.isNextWith(values);
    }
    /**
       * Same as `return la(1) === values[0] && la(2) === values[1]...`
       * @param values lookahead string or tokens
       */
    isNextWith(values, isEqual = (a, b) => a === b) {
        let compareTo;
        let compareFn;
        compareTo = values;
        compareFn = isEqual;
        let i = 0;
        const l = compareTo.length;
        while (true) {
            if (i === l)
                return true;
            const next = this.la(i + 1);
            if (next == null)
                return false; // EOF
            else if (!compareFn(next, compareTo[i]))
                return false;
            i++;
        }
    }
    assertAdvance(...values) {
        return this.assertAdvanceWith(values);
    }
    assertAdvanceWith(values, isEqual = (a, b) => a === b) {
        return __awaiter(this, void 0, void 0, function* () {
            let compareTo;
            let compareFn;
            compareTo = values;
            compareFn = isEqual;
            let i = 0;
            const l = compareTo.length;
            while (true) {
                if (i === l)
                    return true;
                const next = yield this.advance(i + 1);
                if (next == null)
                    this.throwError('EOF', new Error().stack); // EOF
                else if (!compareFn(next, compareTo[i]))
                    this.throwError(util_1.default.inspect(next), new Error().stack, compareTo[i] + '');
                i++;
            }
        });
    }
    throwError(unexpected = 'End-of-stream', stack, expect) {
        // tslint:disable-next-line: max-line-length
        throw new Error(`In ${this.name} unexpected ${JSON.stringify(unexpected)}` +
            (expect ? `(expecting "${expect}")` : '') +
            `at ${this.getCurrentPosInfo()}, ${stack ? 'previous stack:' + stack : ''}`);
    }
    getCurrentPosInfo() {
        return `offset ${this.currPos} [${this.line}:${this.column}]`;
    }
    startChunk(type, trackValue = true) {
        if (this.currChunk && !this.currChunk.isClosed)
            this.currChunk.close(this.currPos);
        this.currChunk = new Chunk(this.currPos, this.line, this.column);
        this.currChunk.trackValue = trackValue;
        this.currChunk.type = type;
        return this.currChunk;
    }
    closeChunk() {
        return this.currChunk.close(this.currPos);
    }
    saveState() {
        this.savedState.line = this.line;
        this.savedState.column = this.column;
        this.savedState.currPos = this.currPos;
        this.savedState.currChunk = this.currChunk;
        this.savedState.cacheStartPos = this.cacheStartPos;
    }
    restoreState() {
        this.line = this.savedState.line;
        this.column = this.savedState.column;
        this.currPos = this.savedState.currPos;
        this.currChunk = this.savedState.currChunk;
        this.cacheStartPos = this.savedState.cacheStartPos;
    }
    /**
       * Do not read postion less than 0
       * @param pos
       */
    read(pos) {
        const cacheOffset = pos - this.cacheStartPos;
        if (cacheOffset < 0) {
            throw new Error(`Can not read behind stream cache, at position: ${pos}`);
        }
        if (cacheOffset < this.cached.length) {
            return this.cached[cacheOffset];
        }
        else {
            this.waitForPos = pos;
            const err = new WaitError();
            throw err;
            // return new Promise(resolve => {
            //   this.readResolve = resolve;
            // });
        }
    }
}
exports.LookAhead = LookAhead;
class WaitError extends Error {
    constructor() {
        super();
        this.code = 'WAIT';
    }
}
//# sourceMappingURL=data:application/json;base64,