"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const LLn_parser_1 = require("../LLn-parser");
exports.Token = LLn_parser_1.Token;
function parse(content, onToken) {
    const operators = onToken ? [operators_1.tap(onToken)] : null;
    // from([content.split('')]).pipe(observeOn(queueScheduler)).subscribe(s => console.log(s));
    return LLn_parser_1.parser('JSON', rxjs_1.from([content.split('')]), parseLex, operators, parseGrammar);
}
exports.default = parse;
function parseLex(strLookAhead) {
    let char = strLookAhead.la();
    while (char != null) {
        if (/[{}\[\],:]/.test(char)) {
            strLookAhead.startToken(char);
            strLookAhead.advance();
            strLookAhead.emitToken();
        }
        else if (/\s/.test(char)) {
            do {
                strLookAhead.advance();
                char = strLookAhead.la();
            } while (char && /\s/.test(char));
        }
        else if (/["']/.test(char)) {
            strLookAhead.startToken('stringLiteral');
            const openChar = strLookAhead.advance();
            while (true) {
                const la = strLookAhead.la();
                if (la == null) {
                    return strLookAhead.throwError();
                }
                if (la === '\\') {
                    strLookAhead.advance(2);
                }
                else if (la === openChar) {
                    strLookAhead.advance();
                    strLookAhead.emitToken();
                    break;
                }
                else {
                    strLookAhead.advance();
                }
            }
        }
        else {
            strLookAhead.startToken('other');
            let next;
            do {
                strLookAhead.advance();
                next = strLookAhead.la();
            } while (next != null && !/[{}\[\],:\s'"]/.test(next));
            strLookAhead.emitToken();
        }
        char = strLookAhead.la();
    }
}
var AstType;
(function (AstType) {
    AstType[AstType["object"] = 0] = "object";
    AstType[AstType["array"] = 1] = "array";
    AstType[AstType["property"] = 2] = "property";
    AstType[AstType["value"] = 3] = "value";
})(AstType || (AstType = {}));
function parseGrammar(tokenLa) {
    return doObject(tokenLa);
}
function doObject(lexer) {
    const ast = {
        type: AstType.object,
        properties: []
    };
    lexer.advance();
    let next = lexer.la();
    while (next != null && next.type !== '}') {
        const propToken = lexer.advance();
        const colon = lexer.advance();
        if (colon.type !== ':') {
            throw new Error(`Expect ':' but recieve '${colon.text}' at ${colon.line}:${colon.col}`);
        }
        ast.properties.push({ name: propToken, value: doValue(lexer) });
        next = lexer.la();
        if (next && next.type === ',')
            lexer.advance();
        next = lexer.la();
    }
    lexer.advance(); // }
    return ast;
}
function doArray(lexer) {
    const ast = {
        type: AstType.array,
        items: []
    };
    lexer.advance();
    let next = lexer.la();
    while (next != null && next.type !== ']') {
        if (next.type !== ',') {
            ast.items.push(doValue(lexer));
        }
        next = lexer.la();
    }
    if (next && next.type === ']')
        lexer.advance(); // ]
    else if (next == null)
        throw new Error('Unexpect EOF after ' + lexer.lastConsumed.text);
    else
        throw new Error(`Unexpect ${next.text} at ${next.line}:${next.col}`);
    return ast;
}
function doValue(lexer) {
    const next = lexer.la();
    if (next === null) {
        throw new Error('Unexpect EOF');
    }
    if (next.type === '{') {
        return doObject(lexer);
    }
    else if (next.type === '[') {
        return doArray(lexer);
    }
    else if (next.type === 'stringLiteral' || next.type === 'other') {
        return lexer.advance();
    }
    else {
        throw new Error(`Unexpect '${next.text}' at ${next.line}:${next.col}`);
    }
}
//# sourceMappingURL=data:application/json;base64,