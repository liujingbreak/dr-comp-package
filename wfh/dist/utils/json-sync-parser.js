"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LLn_parser_1 = require("../LLn-parser");
const lexer = function (strLookAhead, emitter) {
    let char = strLookAhead.la();
    if (char == null) {
        emitter.end();
        return;
    }
    if (/[{}\[\],:]/.test(char)) {
        strLookAhead.startChunk(char);
        strLookAhead.advance();
        emitter.emit();
    }
    else if (/\s/.test(char)) {
        do {
            strLookAhead.advance();
            char = strLookAhead.la();
        } while (char && /\s/.test(char));
    }
    else if (/["']/.test(char)) {
        strLookAhead.startChunk('stringLiteral');
        const openChar = strLookAhead.advance();
        while (true) {
            const la = strLookAhead.la();
            if (la == null) {
                return strLookAhead.throwError();
            }
            if (la === '\\') {
                strLookAhead.advance(2);
            }
            else if (la === openChar) {
                strLookAhead.advance();
                emitter.emit();
                return;
            }
            else {
                strLookAhead.advance();
            }
        }
    }
    else {
        strLookAhead.startChunk('other');
        let next;
        do {
            strLookAhead.advance();
            next = strLookAhead.la();
        } while (next != null && !/[{}\[\],:\s'"]/.test(next));
        emitter.emit();
    }
    char = strLookAhead.la();
};
var AstType;
(function (AstType) {
    AstType[AstType["object"] = 0] = "object";
    AstType[AstType["array"] = 1] = "array";
    AstType[AstType["property"] = 2] = "property";
    AstType[AstType["value"] = 3] = "value";
})(AstType || (AstType = {}));
const grammar = function (tokenLa) {
    return doObject(tokenLa);
};
function doObject(lexer) {
    const ast = {
        type: AstType.object,
        properties: []
    };
    lexer.advance();
    let next = lexer.la();
    while (next != null && next.type !== '}') {
        const propToken = lexer.advance();
        const colon = lexer.advance();
        if (colon.type !== ':') {
            throw new Error(`Expect ':' but recieve '${colon.text}' at ${colon.line}:${colon.col}`);
        }
        ast.properties.push({ name: propToken, value: doValue(lexer) });
        next = lexer.la();
        if (next && next.type === ',')
            lexer.advance();
        next = lexer.la();
    }
    lexer.advance(); // }
    return ast;
}
function doArray(lexer) {
    const ast = {
        type: AstType.array,
        items: []
    };
    lexer.advance();
    let next = lexer.la();
    while (next != null && next.type !== ']') {
        if (next.type !== ',') {
            ast.items.push(doValue(lexer));
        }
        next = lexer.la();
    }
    if (next && next.type === ']')
        lexer.advance(); // ]
    else if (next == null)
        throw new Error('Unexpect EOF after ' + lexer.lastConsumed.text);
    else
        throw new Error(`Unexpect ${next.text} at ${next.line}:${next.col}`);
    return ast;
}
function doValue(lexer) {
    const next = lexer.la();
    if (next === null) {
        throw new Error('Unexpect EOF');
    }
    if (next.type === '{') {
        return doObject(lexer);
    }
    else if (next.type === '[') {
        return doArray(lexer);
    }
    else if (next.type === 'stringLiteral' || next.type === 'other') {
        return lexer.advance();
    }
    else {
        throw new Error(`Unexpect '${next.text}' at ${next.line}:${next.col}`);
    }
}
function parse(content) {
    const jsonParser = LLn_parser_1.parser('JSON', lexer, grammar);
    jsonParser.write(content);
    jsonParser.end();
    return jsonParser.getResult();
}
exports.default = parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1zeW5jLXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL3V0aWxzL2pzb24tc3luYy1wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4Q0FBOEQ7QUFJOUQsTUFBTSxLQUFLLEdBQWlDLFVBQzFDLFlBQVksRUFBRSxPQUFPO0lBQ3JCLElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUM3QixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDaEIsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2QsT0FBTztLQUNSO0lBQ0QsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzNCLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNoQjtTQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQixHQUFHO1lBQ0QsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3ZCLElBQUksR0FBRyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDMUIsUUFBUSxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtLQUNuQztTQUFNLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixZQUFZLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN4QyxPQUFPLElBQUksRUFBRTtZQUNYLE1BQU0sRUFBRSxHQUFHLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM3QixJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7Z0JBQ2QsT0FBTyxZQUFZLENB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QUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtRQUNqRSxPQUFPLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN4QjtTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUN4RTtBQUNILENBQUM7QUFFRCxTQUF3QixLQUFLLENBQUMsT0FBZTtJQUMzQyxNQUFNLFVBQVUsR0FBRyxtQkFBTSxDQUN2QixNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLE9BQU8sVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2hDLENBQUM7QUFORCx3QkFNQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgQ2h1bmssIEdyYW1tYXIsIExleGVyLCBwYXJzZXIgfSBmcm9tICcuLi9MTG4tcGFyc2VyJztcblxuZXhwb3J0IHR5cGUgVG9rZW4gPSBDaHVuazxzdHJpbmcsIHN0cmluZz4gJiB7dGV4dDogc3RyaW5nfTtcblxuY29uc3QgbGV4ZXI6IExleGVyPHN0cmluZywgc3RyaW5nLCBUb2tlbj4gPSBmdW5jdGlvbihcbiAgc3RyTG9va0FoZWFkLCBlbWl0dGVyKSB7XG4gIGxldCBjaGFyID0gc3RyTG9va0FoZWFkLmxhKCk7XG4gIGlmIChjaGFyID09IG51bGwpIHtcbiAgICBlbWl0dGVyLmVuZCgpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoL1t7fVxcW1xcXSw6XS8udGVzdChjaGFyKSkge1xuICAgIHN0ckxvb2tBaGVhZC5zdGFydENodW5rKGNoYXIpO1xuICAgIHN0ckxvb2tBaGVhZC5hZHZhbmNlKCk7XG4gICAgZW1pdHRlci5lbWl0KCk7XG4gIH0gZWxzZSBpZiAoL1xccy8udGVzdChjaGFyKSkge1xuICAgIGRvIHtcbiAgICAgIHN0ckxvb2tBaGVhZC5hZHZhbmNlKCk7XG4gICAgICBjaGFyID0gc3RyTG9va0FoZWFkLmxhKCk7XG4gICAgfSB3aGlsZSAoY2hhciAmJiAvXFxzLy50ZXN0KGNoYXIpKTtcbiAgfSBlbHNlIGlmICgvW1wiJ10vLnRlc3QoY2hhcikpIHtcbiAgICBzdHJMb29rQWhlYWQuc3RhcnRDaHVuaygnc3RyaW5nTGl0ZXJhbCcpO1xuICAgIGNvbnN0IG9wZW5DaGFyID0gc3RyTG9va0FoZWFkLmFkdmFuY2UoKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29uc3QgbGEgPSBzdHJMb29rQWhlYWQubGEoKTtcbiAgICAgIGlmIChsYSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBzdHJMb29rQWhlYWQudGhyb3dFcnJvcigpO1xuICAgICAgfVxuICAgICAgaWYgKGxhID09PSAnXFxcXCcpIHtcbiAgICAgICAgc3RyTG9va0FoZWFkLmFkdmFuY2UoMik7XG4gICAgICB9IGVsc2UgaWYgKGxhID09PSBvcGVuQ2hhcikge1xuICAgICAgICBzdHJMb29rQWhlYWQuYWR2YW5jZSgpO1xuICAgICAgICBlbWl0dGVyLmVtaXQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyTG9va0FoZWFkLmFkdmFuY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3RyTG9va0FoZWFkLnN0YXJ0Q2h1bmsoJ290aGVyJyk7XG4gICAgbGV0IG5leHQ6IHN0cmluZyB8IG51bGw7XG4gICAgZG8ge1xuICAgICAgc3RyTG9va0FoZWFkLmFkdmFuY2UoKTtcbiAgICAgIG5leHQgPSBzdHJMb29rQWhlYWQubGEoKTtcbiAgICB9IHdoaWxlIChuZXh0ICE9IG51bGwgJiYgIS9be31cXFtcXF0sOlxccydcIl0vLnRlc3QobmV4dCkpO1xuICAgIGVtaXR0ZXIuZW1pdCgpO1xuICB9XG4gIGNoYXIgPSBzdHJMb29rQWhlYWQubGEoKTtcbn07XG5cbmVudW0gQXN0VHlwZSB7XG4gIG9iamVjdCA9IDAsXG4gIGFycmF5LFxuICBwcm9wZXJ0eSxcbiAgdmFsdWVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3Qge1xuICB0eXBlOiBBc3RUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdEFzdCBleHRlbmRzIEFzdCB7XG4gIHByb3BlcnRpZXM6IHtuYW1lOiBUb2tlbiwgdmFsdWU6IEFzdHxUb2tlbn1bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcnJheUFzdCBleHRlbmRzIEFzdCB7XG4gIGl0ZW1zOiBBcnJheTxBc3QgfCBUb2tlbj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWVBc3QgZXh0ZW5kcyBBc3Qge1xuICB2YWx1ZTogVG9rZW47XG59XG5cbmNvbnN0IGdyYW1tYXI6IEdyYW1tYXI8VG9rZW4sIE9iamVjdEFzdD4gPSBmdW5jdGlvbih0b2tlbkxhKSB7XG4gIHJldHVybiBkb09iamVjdCh0b2tlbkxhKTtcbn07XG5cbmZ1bmN0aW9uIGRvT2JqZWN0KGxleGVyOiBQYXJhbWV0ZXJzPEdyYW1tYXI8VG9rZW4sIE9iamVjdEFzdD4+WzBdKTogT2JqZWN0QXN0IHtcbiAgY29uc3QgYXN0OiBPYmplY3RBc3QgPSB7XG4gICAgdHlwZTogQXN0VHlwZS5vYmplY3QsXG4gICAgcHJvcGVydGllczogW11cbiAgfTtcbiAgbGV4ZXIuYWR2YW5jZSgpO1xuICBsZXQgbmV4dCA9IGxleGVyLmxhKCk7XG4gIHdoaWxlIChuZXh0ICE9IG51bGwgJiYgbmV4dC50eXBlICE9PSAnfScpIHtcbiAgICBjb25zdCBwcm9wVG9rZW4gPSBsZXhlci5hZHZhbmNlKCk7XG4gICAgY29uc3QgY29sb24gPSBsZXhlci5hZHZhbmNlKCk7XG4gICAgaWYgKGNvbG9uLnR5cGUgIT09ICc6Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3QgJzonIGJ1dCByZWNpZXZlICcke2NvbG9uLnRleHR9JyBhdCAke2NvbG9uLmxpbmV9OiR7Y29sb24uY29sfWApO1xuICAgIH1cblxuICAgIGFzdC5wcm9wZXJ0aWVzLnB1c2goe25hbWU6IHByb3BUb2tlbiwgdmFsdWU6IGRvVmFsdWUobGV4ZXIpfSk7XG4gICAgbmV4dCA9IGxleGVyLmxhKCk7XG4gICAgaWYgKG5leHQgJiYgbmV4dC50eXBlID09PSAnLCcpXG4gICAgICBsZXhlci5hZHZhbmNlKCk7XG4gICAgbmV4dCA9IGxleGVyLmxhKCk7XG4gIH1cbiAgbGV4ZXIuYWR2YW5jZSgpOyAvLyB9XG4gIHJldHVybiBhc3Q7XG59XG5cbmZ1bmN0aW9uIGRvQXJyYXkobGV4ZXI6IFBhcmFtZXRlcnM8R3JhbW1hcjxUb2tlbiwgT2JqZWN0QXN0Pj5bMF0pOiBBcnJheUFzdCB7XG4gIGNvbnN0IGFzdDogQXJyYXlBc3QgPSB7XG4gICAgdHlwZTogQXN0VHlwZS5hcnJheSxcbiAgICBpdGVtczogW11cbiAgfTtcbiAgbGV4ZXIuYWR2YW5jZSgpO1xuICBsZXQgbmV4dCA9IGxleGVyLmxhKCk7XG4gIHdoaWxlIChuZXh0ICE9IG51bGwgJiYgbmV4dC50eXBlICE9PSAnXScpIHtcbiAgICBpZiAobmV4dC50eXBlICE9PSAnLCcpIHtcbiAgICAgIGFzdC5pdGVtcy5wdXNoKGRvVmFsdWUobGV4ZXIpKTtcbiAgICB9XG4gICAgbmV4dCA9IGxleGVyLmxhKCk7XG4gIH1cbiAgaWYgKG5leHQgJiYgbmV4dC50eXBlID09PSAnXScpXG4gICAgbGV4ZXIuYWR2YW5jZSgpOyAvLyBdXG4gIGVsc2UgaWYgKG5leHQgPT0gbnVsbClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0IEVPRiBhZnRlciAnICsgbGV4ZXIubGFzdENvbnN1bWVkIS50ZXh0KTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3QgJHtuZXh0LnRleHR9IGF0ICR7bmV4dC5saW5lfToke25leHQuY29sfWApO1xuICByZXR1cm4gYXN0O1xufVxuXG5mdW5jdGlvbiBkb1ZhbHVlKGxleGVyOiBQYXJhbWV0ZXJzPEdyYW1tYXI8VG9rZW4sIE9iamVjdEFzdD4+WzBdKSB7XG4gIGNvbnN0IG5leHQgPSBsZXhlci5sYSgpO1xuICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3QgRU9GJyk7XG4gIH1cbiAgaWYgKG5leHQudHlwZSA9PT0gJ3snKSB7XG4gICAgcmV0dXJuIGRvT2JqZWN0KGxleGVyKTtcbiAgfSBlbHNlIGlmIChuZXh0LnR5cGUgPT09ICdbJykge1xuICAgIHJldHVybiBkb0FycmF5KGxleGVyKTtcbiAgfSBlbHNlIGlmIChuZXh0LnR5cGUgPT09ICdzdHJpbmdMaXRlcmFsJyB8fCBuZXh0LnR5cGUgPT09ICdvdGhlcicpIHtcbiAgICByZXR1cm4gbGV4ZXIuYWR2YW5jZSgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3QgJyR7bmV4dC50ZXh0fScgYXQgJHtuZXh0LmxpbmV9OiR7bmV4dC5jb2x9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2UoY29udGVudDogc3RyaW5nKSB7XG4gIGNvbnN0IGpzb25QYXJzZXIgPSBwYXJzZXI8c3RyaW5nLCBzdHJpbmcsIFRva2VuLCBPYmplY3RBc3Q+KFxuICAgICdKU09OJywgbGV4ZXIsIGdyYW1tYXIpO1xuICBqc29uUGFyc2VyLndyaXRlKGNvbnRlbnQpO1xuICBqc29uUGFyc2VyLmVuZCgpO1xuICByZXR1cm4ganNvblBhcnNlci5nZXRSZXN1bHQoKTtcbn1cbiJdfQ==