"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ng_html_parser_1 = require("../utils/ng-html-parser");
const patch_text_1 = tslib_1.__importStar(require("../utils/patch-text"));
const __api_1 = tslib_1.__importDefault(require("__api"));
const url_1 = tslib_1.__importDefault(require("url"));
const _ = tslib_1.__importStar(require("lodash"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const chalk = require('chalk');
const log = require('log4js').getLogger('ng-app-builder.html-assets-resolver');
// export enum ReplaceType {
// 	resolveUrl, loadRes
// }
const toCheckNames = ['href', 'src', 'ng-src', 'ng-href', 'srcset', 'routerLink'];
function replaceForHtml(content, resourcePath, callback) {
    let ast;
    try {
        ast = new ng_html_parser_1.TemplateParser(content).parse();
    }
    catch (e) {
        log.error(content);
        throw e;
    }
    // const proms: Array<PromiseLike<any>> = [];
    const dones = [];
    const resolver = new AttrAssetsUrlResolver(resourcePath, callback);
    for (const el of ast) {
        if (el.name === 'script')
            continue;
        for (const name of toCheckNames) {
            if (_.has(el.attrs, name)) {
                const value = el.attrs[name].value;
                if (el.attrs[name].isNg || value == null || value.text.indexOf('{{') >= 0)
                    continue;
                dones.push(resolver.resolve(name, el.attrs[name].value, el));
            }
        }
    }
    if (dones.length > 0)
        return rxjs_1.forkJoin(dones).pipe(operators_1.map(replacements => patch_text_1.default(content, replacements)));
    else
        return rxjs_1.of(content);
}
exports.replaceForHtml = replaceForHtml;
class AttrAssetsUrlResolver {
    constructor(resourcePath, callback) {
        this.resourcePath = resourcePath;
        this.callback = callback;
    }
    resolve(attrName, valueToken, el) {
        if (!valueToken)
            return;
        if (attrName === 'srcset') {
            // img srcset
            const value = this.doSrcSet(valueToken.text);
            return value.pipe(operators_1.map(value => new patch_text_1.Replacement(valueToken.start, valueToken.end, value)));
            // replacements.push(new Rep(valueToken.start, valueToken.end, value));
        }
        else if (attrName === 'src') {
            // img src
            const url = this.doLoadAssets(valueToken.text);
            return url.pipe(operators_1.map(url => new patch_text_1.Replacement(valueToken.start, valueToken.end, url)));
        }
        else if (attrName === 'routerLink') {
            const url = this.resolveUrl(valueToken.text);
            const parsedUrl = url_1.default.parse(url);
            return rxjs_1.of(new patch_text_1.Replacement(valueToken.start, valueToken.end, parsedUrl.path + (parsedUrl.hash ? parsedUrl.hash : '')));
        }
        else { // href, ng-src, routerLink
            const url = this.resolveUrl(valueToken.text);
            return rxjs_1.of(new patch_text_1.Replacement(valueToken.start, valueToken.end, url));
        }
    }
    doSrcSet(value) {
        const urlSets$s = value.split(/\s*,\s*/).map(urlSet => {
            urlSet = _.trim(urlSet);
            const factors = urlSet.split(/\s+/);
            const image = factors[0];
            return this.doLoadAssets(image)
                .pipe(operators_1.map(url => url + factors[1]));
        });
        return rxjs_1.forkJoin(urlSets$s).pipe(operators_1.map(urlSets => urlSets.join(', ')));
    }
    resolveUrl(href) {
        if (href === '')
            return href;
        var res = __api_1.default.normalizeAssetsUrl(href, this.resourcePath);
        if (_.isObject(res)) {
            const resolved = res.isPage ?
                __api_1.default.entryPageUrl(res.packageName, res.path, res.locale) :
                __api_1.default.assetsUrl(res.packageName, res.path);
            log.info(`resolve URL/routePath ${chalk.yellow(href)} to ${chalk.cyan(resolved)},\n` +
                chalk.grey(this.resourcePath));
            return resolved;
        }
        return href;
    }
    doLoadAssets(src) {
        if (src.startsWith('assets://') || src.startsWith('page://')) {
            const res = __api_1.default.normalizeAssetsUrl(src, this.resourcePath);
            if (_.isObject(res)) {
                return rxjs_1.of(res.isPage ?
                    __api_1.default.entryPageUrl(res.packageName, res.path, res.locale) :
                    __api_1.default.assetsUrl(res.packageName, res.path));
            }
        }
        if (/^(?:https?:|\/\/|data:)/.test(src))
            return rxjs_1.of(src);
        if (src.charAt(0) === '/')
            return rxjs_1.of(src);
        if (src.charAt(0) === '~') {
            src = src.substring(1);
        }
        else if (src.startsWith('npm://')) {
            src = src.substring('npm://'.length);
        }
        else if (src.charAt(0) !== '.' && src.trim().length > 0 && src.indexOf('{') < 0)
            src = './' + src;
        return this.callback(src);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy1hb3QtYXNzZXRzL2h0bWwtYXNzZXRzLXJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDREQUFrRjtBQUNsRiwwRUFBa0U7QUFDbEUsMERBQXdCO0FBQ3hCLHNEQUFzQjtBQUN0QixrREFBNEI7QUFDNUIsK0JBQThDO0FBQzlDLDhDQUFtQztBQUNuQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0FBRS9FLDRCQUE0QjtBQUM1Qix1QkFBdUI7QUFDdkIsSUFBSTtBQUNKLE1BQU0sWUFBWSxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUVsRixTQUFnQixjQUFjLENBQUMsT0FBZSxFQUFFLFlBQW9CLEVBQ25FLFFBQThDO0lBQzlDLElBQUksR0FBYSxDQUFDO0lBQ2xCLElBQUk7UUFDSCxHQUFHLEdBQUcsSUFBSSwrQkFBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQzFDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDWCxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxDQUFDO0tBQ1I7SUFDRCw2Q0FBNkM7SUFDN0MsTUFBTSxLQUFLLEdBQXNCLEVBQUUsQ0FBQztJQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLHFCQUFxQixDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNuRSxLQUFLLE1BQU0sRUFBRSxJQUFJLEdBQUcsRUFBRTtRQUNyQixJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUTtZQUN2QixTQUFTO1FBQ1YsS0FB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SUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7WUFDeEIsT0FBTyxTQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUMxQixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QjthQUFNLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNwQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckM7YUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNoRixHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUVsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNEIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci9kaXN0L25nLWFvdC1hc3NldHMvaHRtbC1hc3NldHMtcmVzb2x2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7VGVtcGxhdGVQYXJzZXIsIEF0dHJpYnV0ZVZhbHVlQXN0LCBUYWdBc3R9IGZyb20gJy4uL3V0aWxzL25nLWh0bWwtcGFyc2VyJztcbmltcG9ydCBwYXRjaFRleHQsIHtSZXBsYWNlbWVudCBhcyBSZXB9IGZyb20gJy4uL3V0aWxzL3BhdGNoLXRleHQnO1xuaW1wb3J0IGFwaSBmcm9tICdfX2FwaSc7XG5pbXBvcnQgVXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge09ic2VydmFibGUsIG9mLCBmb3JrSm9pbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuY29uc3QgY2hhbGsgPSByZXF1aXJlKCdjaGFsaycpO1xuY29uc3QgbG9nID0gcmVxdWlyZSgnbG9nNGpzJykuZ2V0TG9nZ2VyKCduZy1hcHAtYnVpbGRlci5odG1sLWFzc2V0cy1yZXNvbHZlcicpO1xuXG4vLyBleHBvcnQgZW51bSBSZXBsYWNlVHlwZSB7XG4vLyBcdHJlc29sdmVVcmwsIGxvYWRSZXNcbi8vIH1cbmNvbnN0IHRvQ2hlY2tOYW1lcyA9IFsnaHJlZicsICdzcmMnLCAnbmctc3JjJywgJ25nLWhyZWYnLCAnc3Jjc2V0JywgJ3JvdXRlckxpbmsnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VGb3JIdG1sKGNvbnRlbnQ6IHN0cmluZywgcmVzb3VyY2VQYXRoOiBzdHJpbmcsXG5cdGNhbGxiYWNrOiAodGV4dDogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHN0cmluZz4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuXHRsZXQgYXN0OiBUYWdBc3RbXTtcblx0dHJ5IHtcblx0XHRhc3QgPSBuZXcgVGVtcGxhdGVQYXJzZXIoY29udGVudCkucGFyc2UoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGxvZy5lcnJvcihjb250ZW50KTtcblx0XHR0aHJvdyBlO1xuXHR9XG5cdC8vIGNvbnN0IHByb21zOiBBcnJheTxQcm9taXNlTGlrZTxhbnk+PiA9IFtdO1xuXHRjb25zdCBkb25lczogT2JzZXJ2YWJsZTxSZXA+W10gPSBbXTtcblx0Y29uc3QgcmVzb2x2ZXIgPSBuZXcgQXR0ckFzc2V0c1VybFJlc29sdmVyKHJlc291cmNlUGF0aCwgY2FsbGJhY2spO1xuXHRmb3IgKGNvbnN0IGVsIG9mIGFzdCkge1xuXHRcdGlmIChlbC5uYW1lID09PSAnc2NyaXB0Jylcblx0XHRcdGNvbnRpbnVlO1xuXHRcdGZvciAoY29uc3QgbmFtZSBvZiB0b0NoZWNrTmFtZXMpIHtcblx0XHRcdGlmIChfLmhhcyhlbC5hdHRycywgbmFtZSkpIHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBlbC5hdHRyc1tuYW1lXS52YWx1ZTtcblx0XHRcdFx0aWYgKGVsLmF0dHJzW25hbWVdLmlzTmcgfHwgdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZS50ZXh0LmluZGV4T2YoJ3t7JykgPj0gMCApXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdGRvbmVzLnB1c2gocmVzb2x2ZXIucmVzb2x2ZShuYW1lLCBlbC5hdHRyc1tuYW1lXS52YWx1ZSwgZWwpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aWYgKGRvbmVzLmxlbmd0aCA+IDApXG5cdFx0cmV0dXJuIGZvcmtKb2luKGRvbmVzKS5waXBlKG1hcChyZXBsYWNlbWVudHMgPT4gcGF0Y2hUZXh0KGNvbnRlbnQsIHJlcGxhY2VtZW50cykpKTtcblx0ZWxzZVxuXHRcdHJldHVybiBvZihjb250ZW50KTtcbn1cblxuY2xhc3MgQXR0ckFzc2V0c1VybFJlc29sdmVyIHtcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZXNvdXJjZVBhdGg6IHN0cmluZywgcHJpdmF0ZSBjYWxsYmFjazogKHRleHQ6IHN0cmluZykgPT4gT2JzZXJ2YWJsZTxzdHJpbmc+KSB7XG5cdH1cblx0cmVzb2x2ZShhdHRyTmFtZTogc3RyaW5nLCB2YWx1ZVRva2VuOiBBdHRyaWJ1dGVWYWx1ZUFzdCxcblx0XHRlbDogVGFnQXN0KTogT2JzZXJ2YWJsZTxSZXA+IHtcblx0XHRpZiAoIXZhbHVlVG9rZW4pXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKGF0dHJOYW1lID09PSAnc3Jjc2V0Jykge1xuXHRcdFx0Ly8gaW1nIHNyY3NldFxuXHRcdFx0Y29uc3QgdmFsdWUgPSB0aGlzLmRvU3JjU2V0KHZhbHVlVG9rZW4udGV4dCk7XG5cdFx0XHRyZXR1cm4gdmFsdWUucGlwZShtYXAodmFsdWUgPT4gbmV3IFJlcCh2YWx1ZVRva2VuLnN0YXJ0LCB2YWx1ZVRva2VuLmVuZCwgdmFsdWUpKSk7XG5cdFx0XHQvLyByZXBsYWNlbWVudHMucHVzaChuZXcgUmVwKHZhbHVlVG9rZW4uc3RhcnQsIHZhbHVlVG9rZW4uZW5kLCB2YWx1ZSkpO1xuXHRcdH0gZWxzZSBpZiAoYXR0ck5hbWUgPT09ICdzcmMnKSB7XG5cdFx0XHQvLyBpbWcgc3JjXG5cdFx0XHRjb25zdCB1cmwgPSB0aGlzLmRvTG9hZEFzc2V0cyh2YWx1ZVRva2VuLnRleHQpO1xuXHRcdFx0cmV0dXJuIHVybC5waXBlKG1hcCh1cmwgPT4gbmV3IFJlcCh2YWx1ZVRva2VuLnN0YXJ0LCB2YWx1ZVRva2VuLmVuZCwgdXJsKSkpO1xuXHRcdH0gZWxzZSBpZiAoYXR0ck5hbWUgPT09ICdyb3V0ZXJMaW5rJykge1xuXHRcdFx0Y29uc3QgdXJsID0gdGhpcy5yZXNvbHZlVXJsKHZhbHVlVG9rZW4udGV4dCk7XG5cdFx0XHRjb25zdCBwYXJzZWRVcmwgPSBVcmwucGFyc2UodXJsKTtcblx0XHRcdHJldHVybiBvZihuZXcgUmVwKHZhbHVlVG9rZW4uc3RhcnQsIHZhbHVlVG9rZW4uZW5kLCBwYXJzZWRVcmwucGF0aCArIChwYXJzZWRVcmwuaGFzaCA/IHBhcnNlZFVybC5oYXNoIDogJycpKSk7XG5cdFx0fSBlbHNlIHsgLy8gaHJlZiwgbmctc3JjLCByb3V0ZXJMaW5rXG5cdFx0XHRjb25zdCB1cmwgPSB0aGlzLnJlc29sdmVVcmwodmFsdWVUb2tlbi50ZXh0KTtcblx0XHRcdHJldHVybiBvZihuZXcgUmVwKHZhbHVlVG9rZW4uc3RhcnQsIHZhbHVlVG9rZW4uZW5kLCB1cmwpKTtcblx0XHR9XG5cdH1cblx0cHJpdmF0ZSBkb1NyY1NldCh2YWx1ZTogc3RyaW5nKSB7XG5cdFx0Y29uc3QgdXJsU2V0cyRzID0gdmFsdWUuc3BsaXQoL1xccyosXFxzKi8pLm1hcCh1cmxTZXQgPT4ge1xuXHRcdFx0dXJsU2V0ID0gXy50cmltKHVybFNldCk7XG5cdFx0XHRjb25zdCBmYWN0b3JzID0gdXJsU2V0LnNwbGl0KC9cXHMrLyk7XG5cdFx0XHRjb25zdCBpbWFnZSA9IGZhY3RvcnNbMF07XG5cdFx0XHRyZXR1cm4gdGhpcy5kb0xvYWRBc3NldHMoaW1hZ2UpXG5cdFx0XHQucGlwZShtYXAodXJsID0+IHVybCArIGZhY3RvcnNbMV0pKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZm9ya0pvaW4odXJsU2V0cyRzKS5waXBlKG1hcCh1cmxTZXRzID0+IHVybFNldHMuam9pbignLCAnKSkpO1xuXHR9XG5cblx0cHJpdmF0ZSByZXNvbHZlVXJsKGhyZWY6IHN0cmluZykge1xuXHRcdGlmIChocmVmID09PSAnJylcblx0XHRcdHJldHVybiBocmVmO1xuXHRcdHZhciByZXMgPSBhcGkubm9ybWFsaXplQXNzZXRzVXJsKGhyZWYsIHRoaXMucmVzb3VyY2VQYXRoKTtcblx0XHRpZiAoXy5pc09iamVjdChyZXMpKSB7XG5cdFx0XHRjb25zdCByZXNvbHZlZCA9IHJlcy5pc1BhZ2UgP1xuXHRcdFx0XHRhcGkuZW50cnlQYWdlVXJsKHJlcy5wYWNrYWdlTmFtZSwgcmVzLnBhdGgsIHJlcy5sb2NhbGUpIDpcblx0XHRcdFx0YXBpLmFzc2V0c1VybChyZXMucGFja2FnZU5hbWUsIHJlcy5wYXRoKTtcblx0XHRcdGxvZy5pbmZvKGByZXNvbHZlIFVSTC9yb3V0ZVBhdGggJHtjaGFsay55ZWxsb3coaHJlZil9IHRvICR7Y2hhbGsuY3lhbihyZXNvbHZlZCl9LFxcbmAgK1xuXHRcdFx0XHRjaGFsay5ncmV5KHRoaXMucmVzb3VyY2VQYXRoKSk7XG5cdFx0XHRyZXR1cm4gcmVzb2x2ZWQ7XG5cdFx0fVxuXHRcdHJldHVybiBocmVmO1xuXHR9XG5cblx0cHJpdmF0ZSBkb0xvYWRBc3NldHMoc3JjOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuXHRcdGlmIChzcmMuc3RhcnRzV2l0aCgnYXNzZXRzOi8vJykgfHwgc3JjLnN0YXJ0c1dpdGgoJ3BhZ2U6Ly8nKSkge1xuXHRcdFx0Y29uc3QgcmVzID0gYXBpLm5vcm1hbGl6ZUFzc2V0c1VybChzcmMsIHRoaXMucmVzb3VyY2VQYXRoKTtcblx0XHRcdGlmIChfLmlzT2JqZWN0KHJlcykpIHtcblx0XHRcdFx0cmV0dXJuIG9mKHJlcy5pc1BhZ2UgP1xuXHRcdFx0XHRcdGFwaS5lbnRyeVBhZ2VVcmwocmVzLnBhY2thZ2VOYW1lLCByZXMucGF0aCwgcmVzLmxvY2FsZSkgOlxuXHRcdFx0XHRcdGFwaS5hc3NldHNVcmwocmVzLnBhY2thZ2VOYW1lLCByZXMucGF0aCkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICgvXig/Omh0dHBzPzp8XFwvXFwvfGRhdGE6KS8udGVzdChzcmMpKVxuXHRcdFx0cmV0dXJuIG9mKHNyYyk7XG5cdFx0aWYgKHNyYy5jaGFyQXQoMCkgPT09ICcvJylcblx0XHRcdHJldHVybiBvZihzcmMpO1xuXHRcdGlmIChzcmMuY2hhckF0KDApID09PSAnficpIHtcblx0XHRcdHNyYyA9IHNyYy5zdWJzdHJpbmcoMSk7XG5cdFx0fSBlbHNlIGlmIChzcmMuc3RhcnRzV2l0aCgnbnBtOi8vJykpIHtcblx0XHRcdHNyYyA9IHNyYy5zdWJzdHJpbmcoJ25wbTovLycubGVuZ3RoKTtcblx0XHR9IGVsc2UgaWYgKHNyYy5jaGFyQXQoMCkgIT09ICcuJyAmJiBzcmMudHJpbSgpLmxlbmd0aCA+IDAgJiYgc3JjLmluZGV4T2YoJ3snKSA8IDApXG5cdFx0XHRzcmMgPSAnLi8nICsgc3JjO1xuXG5cdFx0cmV0dXJuIHRoaXMuY2FsbGJhY2soc3JjKTtcblx0fVxufVxuIl19
