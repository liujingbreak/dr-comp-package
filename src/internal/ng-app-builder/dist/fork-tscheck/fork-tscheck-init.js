"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@wfh/plink/wfh/dist/node-path");
const dist_1 = require("@wfh/plink/wfh/dist");
const package_info_gathering_1 = require("@wfh/plink/wfh/dist/package-mgr/package-info-gathering");
const injector_setup_1 = require("../ng/injector-setup");
// import {nodeInjector} from '@wfh/plink/wfh/dist/injector-factory';
// import Path from 'path';
// import * as ngDevkitNode from '@angular-devkit/core/node';
// import TSReadHooker from '../ng-ts-replace';
// import ReadHookHost from '../utils/read-hook-vfshost';
// import * as fs from 'fs';
dist_1.initProcess();
const drcpCliOpt = JSON.parse(process.env._ngcli_plink_arg);
dist_1.initConfig(drcpCliOpt);
const otherCfg = JSON.parse(process.env._ngcli_plink_cfg);
const packageInfo = package_info_gathering_1.walkPackages();
injector_setup_1.injectorSetup(packageInfo, drcpCliOpt, otherCfg.deployUrl, otherCfg.baseHref);
// const [pks, apiProto] = initInjectorForNodePackages({}, packageInfo);
// initWebInjector(pks, apiProto);
require('./hack-type-checker').init();
// const hooker = new TSReadHooker(require.resolve('@wfh/plink/wfh/tsconfig-base.json'), false);
// const host = new ReadHookHost(fs, hooker.hookFunc);
// nodeInjector.fromDir(Path.resolve('node_modules/@ngtools/webpack'))
// .factory('@angular-devkit/core/node', (file) => {
//   return {
//     ...ngDevkitNode,
//     NodeJsSyncHost: host
//   };
// });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yay10c2NoZWNrLWluaXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmb3JrLXRzY2hlY2staW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUF1QztBQUN2Qyw4Q0FBMkU7QUFDM0UsbUdBQXFGO0FBSXJGLHlEQUFtRDtBQUNuRCxxRUFBcUU7QUFDckUsMkJBQTJCO0FBQzNCLDZEQUE2RDtBQUM3RCwrQ0FBK0M7QUFDL0MseURBQXlEO0FBQ3pELDRCQUE0QjtBQUU1QixrQkFBVyxFQUFFLENBQUM7QUFDZCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWlCLENBQWtCLENBQUM7QUFDOUUsaUJBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN2QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWlCLENBQUMsQ0FBQztBQUczRCxNQUFNLFdBQVcsR0FBRyxxQ0FBWSxFQUFFLENBQUM7QUFDbkMsOEJBQWEsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTlFLHdFQUF3RTtBQUV4RSxrQ0FBa0M7QUFFakMsT0FBTyxDQUFDLHFCQUFxQixDQUFxQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQzNELGdHQUFnRztBQUNoRyxzREFBc0Q7QUFFdEQsc0VBQXNFO0FBQ3RFLG9EQUFvRDtBQUNwRCxhQUFhO0FBQ2IsdUJBQXVCO0FBQ3ZCLDJCQUEyQjtBQUMzQixPQUFPO0FBQ1AsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHdmaC9wbGluay93ZmgvZGlzdC9ub2RlLXBhdGgnO1xuaW1wb3J0IHtpbml0UHJvY2VzcywgaW5pdENvbmZpZywgR2xvYmFsT3B0aW9uc30gZnJvbSAnQHdmaC9wbGluay93ZmgvZGlzdCc7XG5pbXBvcnQge3dhbGtQYWNrYWdlcyB9IGZyb20gJ0B3ZmgvcGxpbmsvd2ZoL2Rpc3QvcGFja2FnZS1tZ3IvcGFja2FnZS1pbmZvLWdhdGhlcmluZyc7XG5cbi8vIGltcG9ydCB7aW5pdEluamVjdG9yRm9yTm9kZVBhY2thZ2VzLCBpbml0V2ViSW5qZWN0b3J9IGZyb20gJ0B3ZmgvcGxpbmsvd2ZoL2Rpc3QvcGFja2FnZS1ydW5uZXInO1xuaW1wb3J0ICogYXMgX2NoZWNrZXIgZnJvbSAnLi9oYWNrLXR5cGUtY2hlY2tlcic7XG5pbXBvcnQge2luamVjdG9yU2V0dXB9IGZyb20gJy4uL25nL2luamVjdG9yLXNldHVwJztcbi8vIGltcG9ydCB7bm9kZUluamVjdG9yfSBmcm9tICdAd2ZoL3BsaW5rL3dmaC9kaXN0L2luamVjdG9yLWZhY3RvcnknO1xuLy8gaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG4vLyBpbXBvcnQgKiBhcyBuZ0RldmtpdE5vZGUgZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUvbm9kZSc7XG4vLyBpbXBvcnQgVFNSZWFkSG9va2VyIGZyb20gJy4uL25nLXRzLXJlcGxhY2UnO1xuLy8gaW1wb3J0IFJlYWRIb29rSG9zdCBmcm9tICcuLi91dGlscy9yZWFkLWhvb2stdmZzaG9zdCc7XG4vLyBpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmluaXRQcm9jZXNzKCk7XG5jb25zdCBkcmNwQ2xpT3B0ID0gSlNPTi5wYXJzZShwcm9jZXNzLmVudi5fbmdjbGlfcGxpbmtfYXJnISkgYXMgR2xvYmFsT3B0aW9ucztcbmluaXRDb25maWcoZHJjcENsaU9wdCk7XG5jb25zdCBvdGhlckNmZyA9IEpTT04ucGFyc2UocHJvY2Vzcy5lbnYuX25nY2xpX3BsaW5rX2NmZyEpO1xuXG5cbmNvbnN0IHBhY2thZ2VJbmZvID0gd2Fsa1BhY2thZ2VzKCk7XG5pbmplY3RvclNldHVwKHBhY2thZ2VJbmZvLCBkcmNwQ2xpT3B0LCBvdGhlckNmZy5kZXBsb3lVcmwsIG90aGVyQ2ZnLmJhc2VIcmVmKTtcblxuLy8gY29uc3QgW3BrcywgYXBpUHJvdG9dID0gaW5pdEluamVjdG9yRm9yTm9kZVBhY2thZ2VzKHt9LCBwYWNrYWdlSW5mbyk7XG5cbi8vIGluaXRXZWJJbmplY3Rvcihwa3MsIGFwaVByb3RvKTtcblxuKHJlcXVpcmUoJy4vaGFjay10eXBlLWNoZWNrZXInKSBhcyB0eXBlb2YgX2NoZWNrZXIpLmluaXQoKTtcbi8vIGNvbnN0IGhvb2tlciA9IG5ldyBUU1JlYWRIb29rZXIocmVxdWlyZS5yZXNvbHZlKCdAd2ZoL3BsaW5rL3dmaC90c2NvbmZpZy1iYXNlLmpzb24nKSwgZmFsc2UpO1xuLy8gY29uc3QgaG9zdCA9IG5ldyBSZWFkSG9va0hvc3QoZnMsIGhvb2tlci5ob29rRnVuYyk7XG5cbi8vIG5vZGVJbmplY3Rvci5mcm9tRGlyKFBhdGgucmVzb2x2ZSgnbm9kZV9tb2R1bGVzL0BuZ3Rvb2xzL3dlYnBhY2snKSlcbi8vIC5mYWN0b3J5KCdAYW5ndWxhci1kZXZraXQvY29yZS9ub2RlJywgKGZpbGUpID0+IHtcbi8vICAgcmV0dXJuIHtcbi8vICAgICAuLi5uZ0RldmtpdE5vZGUsXG4vLyAgICAgTm9kZUpzU3luY0hvc3Q6IGhvc3Rcbi8vICAgfTtcbi8vIH0pO1xuIl19