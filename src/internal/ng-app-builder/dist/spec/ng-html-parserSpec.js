"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable no-console */
const ng_html_parser_1 = require("../utils/ng-html-parser");
const fs = tslib_1.__importStar(require("fs"));
const _ = tslib_1.__importStar(require("lodash"));
describe('ng-html-parser', () => {
    let lexer;
    beforeEach(() => {
        lexer = new ng_html_parser_1.TemplateLexer('abcde');
    });
    xit('Lexer.la()  should work', () => {
        // let lexer = new ps.Lexer('abcde');
        expect(lexer.la()).toEqual('a');
        expect(lexer.la(2)).toEqual('b');
        expect(lexer.la(3)).toEqual('c');
    });
    xit('Lexer.advance()  should work', () => {
        lexer.advance(2);
        expect(lexer.la()).toEqual('c');
        expect(lexer.la(3)).toEqual('e');
        expect(lexer.la(7)).toEqual(null);
    });
    xit('Lexer.isNext("cde") should work', () => {
        lexer = new ng_html_parser_1.TemplateLexer('cde');
        expect(lexer.isNext('cde')).toBeTruthy();
        expect(lexer.isNext('cd')).toBeTruthy();
        expect(lexer.isNext('cdef')).toBeFalsy();
    });
    const lexer2 = new ng_html_parser_1.TemplateLexer('0123\n5678\n0abcd\n');
    xit('line and column shoud be correct', () => {
        expect(lexer2.la(10 + 1)).toEqual('0');
        let chr = lexer2.la();
        while (chr != null) {
            lexer2.advance();
            console.log(lexer2.getCurrentPosInfo());
            chr = lexer2.la();
        }
        console.log(lexer2.lineBeginPositions);
        expect(lexer2.getLineColumn(0)).toEqual([0, 0]);
        expect(lexer2.getLineColumn(3)).toEqual([0, 3]);
        expect(lexer2.getLineColumn(11)).toEqual([2, 1]);
    });
    xit('template lexer should work for test html file', () => {
        const ngHtml = fs.readFileSync(__dirname + '/../../ts/spec/test-parser.html', 'utf8');
        const lexer = new ng_html_parser_1.TemplateLexer(ngHtml);
        for (const token of lexer) {
            console.log(`type: ${ng_html_parser_1.TokenType[token.type]},\ttext: ` + token.text);
        }
    });
    it('parser should work for test html file', () => {
        const ngHtml = fs.readFileSync(__dirname + '/../../ts/spec/test-parser.html', 'utf8');
        const ast = new ng_html_parser_1.TemplateParser(ngHtml).parse();
        console.log(JSON.stringify(ast, null, '  '));
        for (const tag of ast) {
            console.log(tag);
            for (const attrValue of _.values(tag.attrs)) {
                if (attrValue.value == null)
                    continue;
                expect(attrValue.value.start).not.toBe(attrValue.value.end);
                expect(ngHtml.substring(attrValue.value.start, attrValue.value.end)).toEqual(attrValue.value.text);
            }
        }
        expect(ast[0].start).toBe(0);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9zcGVjL25nLWh0bWwtcGFyc2VyU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0IsNERBQWlGO0FBQ2pGLCtDQUF5QjtBQUN6QixrREFBNEI7QUFFNUIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLEtBQW9CLENBQUM7SUFDekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLEtBQUssR0FBRyxJQUFJLDhCQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7SUFFSCxHQUFHLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLHFDQUFxQztRQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsR0FBRyxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtRQUN2QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxD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Q0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQixLQUFLLE1BQU0sU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMzQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksSUFBSTtvQkFDekIsU0FBUztnQkFFWCxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzVELE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNwRztTQUNGO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvQGRyLWNvcmUvbmctYXBwLWJ1aWxkZXIvZGlzdC9zcGVjL25nLWh0bWwtcGFyc2VyU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmltcG9ydCB7VGVtcGxhdGVMZXhlciwgVG9rZW5UeXBlLCBUZW1wbGF0ZVBhcnNlcn0gZnJvbSAnLi4vdXRpbHMvbmctaHRtbC1wYXJzZXInO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5kZXNjcmliZSgnbmctaHRtbC1wYXJzZXInLCAoKSA9PiB7XG4gIGxldCBsZXhlcjogVGVtcGxhdGVMZXhlcjtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbGV4ZXIgPSBuZXcgVGVtcGxhdGVMZXhlcignYWJjZGUnKTtcbiAgfSk7XG5cbiAgeGl0KCdMZXhlci5sYSgpICBzaG91bGQgd29yaycsICgpID0+IHtcbiAgICAvLyBsZXQgbGV4ZXIgPSBuZXcgcHMuTGV4ZXIoJ2FiY2RlJyk7XG4gICAgZXhwZWN0KGxleGVyLmxhKCkpLnRvRXF1YWwoJ2EnKTtcbiAgICBleHBlY3QobGV4ZXIubGEoMikpLnRvRXF1YWwoJ2InKTtcbiAgICBleHBlY3QobGV4ZXIubGEoMykpLnRvRXF1YWwoJ2MnKTtcbiAgfSk7XG5cbiAgeGl0KCdMZXhlci5hZHZhbmNlKCkgIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuICAgIGxleGVyLmFkdmFuY2UoMik7XG4gICAgZXhwZWN0KGxleGVyLmxhKCkpLnRvRXF1YWwoJ2MnKTtcbiAgICBleHBlY3QobGV4ZXIubGEoMykpLnRvRXF1YWwoJ2UnKTtcbiAgICBleHBlY3QobGV4ZXIubGEoNykpLnRvRXF1YWwobnVsbCk7XG4gIH0pO1xuXG4gIHhpdCgnTGV4ZXIuaXNOZXh0KFwiY2RlXCIpIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuICAgIGxleGVyID0gbmV3IFRlbXBsYXRlTGV4ZXIoJ2NkZScpO1xuICAgIGV4cGVjdChsZXhlci5pc05leHQoJ2NkZScpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGxleGVyLmlzTmV4dCgnY2QnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChsZXhlci5pc05leHQoJ2NkZWYnKSkudG9CZUZhbHN5KCk7XG4gIH0pO1xuXG4gIGNvbnN0IGxleGVyMiA9IG5ldyBUZW1wbGF0ZUxleGVyKCcwMTIzXFxuNTY3OFxcbjBhYmNkXFxuJyk7XG4gIHhpdCgnbGluZSBhbmQgY29sdW1uIHNob3VkIGJlIGNvcnJlY3QnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGxleGVyMi5sYSgxMCArIDEpKS50b0VxdWFsKCcwJyk7XG4gICAgbGV0IGNociA9IGxleGVyMi5sYSgpO1xuICAgIHdoaWxlIChjaHIgIT0gbnVsbCkge1xuICAgICAgbGV4ZXIyLmFkdmFuY2UoKTtcbiAgICAgIGNvbnNvbGUubG9nKGxleGVyMi5nZXRDdXJyZW50UG9zSW5mbygpKTtcbiAgICAgIGNociA9IGxleGVyMi5sYSgpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhsZXhlcjIubGluZUJlZ2luUG9zaXRpb25zKTtcbiAgICBleHBlY3QobGV4ZXIyLmdldExpbmVDb2x1bW4oMCkpLnRvRXF1YWwoWzAsIDBdKTtcbiAgICBleHBlY3QobGV4ZXIyLmdldExpbmVDb2x1bW4oMykpLnRvRXF1YWwoWzAsIDNdKTtcbiAgICBleHBlY3QobGV4ZXIyLmdldExpbmVDb2x1bW4oMTEpKS50b0VxdWFsKFsyLCAxXSk7XG4gIH0pO1xuXG4gIHhpdCgndGVtcGxhdGUgbGV4ZXIgc2hvdWxkIHdvcmsgZm9yIHRlc3QgaHRtbCBmaWxlJywgKCkgPT4ge1xuICAgIGNvbnN0IG5nSHRtbCA9IGZzLnJlYWRGaWxlU3luYyhfX2Rpcm5hbWUgKyAnLy4uLy4uL3RzL3NwZWMvdGVzdC1wYXJzZXIuaHRtbCcsICd1dGY4Jyk7XG4gICAgY29uc3QgbGV4ZXIgPSBuZXcgVGVtcGxhdGVMZXhlcihuZ0h0bWwpO1xuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgbGV4ZXIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGB0eXBlOiAke1Rva2VuVHlwZVt0b2tlbi50eXBlXX0sXFx0dGV4dDogYCArIHRva2VuLnRleHQpO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3BhcnNlciBzaG91bGQgd29yayBmb3IgdGVzdCBodG1sIGZpbGUnLCAoKSA9PiB7XG4gICAgY29uc3QgbmdIdG1sID0gZnMucmVhZEZpbGVTeW5jKF9fZGlybmFtZSArICcvLi4vLi4vdHMvc3BlYy90ZXN0LXBhcnNlci5odG1sJywgJ3V0ZjgnKTtcbiAgICBjb25zdCBhc3QgPSBuZXcgVGVtcGxhdGVQYXJzZXIobmdIdG1sKS5wYXJzZSgpO1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGFzdCwgbnVsbCwgJyAgJykpO1xuICAgIGZvciAoY29uc3QgdGFnIG9mIGFzdCkge1xuICAgICAgY29uc29sZS5sb2codGFnKTtcbiAgICAgIGZvciAoY29uc3QgYXR0clZhbHVlIG9mIF8udmFsdWVzKHRhZy5hdHRycykpIHtcbiAgICAgICAgaWYgKGF0dHJWYWx1ZS52YWx1ZSA9PSBudWxsKVxuICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIGV4cGVjdChhdHRyVmFsdWUudmFsdWUuc3RhcnQpLm5vdC50b0JlKGF0dHJWYWx1ZS52YWx1ZS5lbmQpO1xuICAgICAgICBleHBlY3QobmdIdG1sLnN1YnN0cmluZyhhdHRyVmFsdWUudmFsdWUuc3RhcnQsIGF0dHJWYWx1ZS52YWx1ZS5lbmQpKS50b0VxdWFsKGF0dHJWYWx1ZS52YWx1ZS50ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZXhwZWN0KGFzdFswXS5zdGFydCkudG9CZSgwKTtcbiAgfSk7XG59KTtcbiJdfQ==
