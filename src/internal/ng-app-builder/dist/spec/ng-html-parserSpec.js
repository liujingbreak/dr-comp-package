"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable no-console */
const ng_html_parser_1 = require("../utils/ng-html-parser");
const fs = tslib_1.__importStar(require("fs"));
const _ = tslib_1.__importStar(require("lodash"));
describe('ng-html-parser', () => {
    const lexer = new ng_html_parser_1.TemplateLexer('abcde');
    it('Lexer.la()  should work', () => {
        // let lexer = new ps.Lexer('abcde');
        expect(lexer.la()).toEqual('a');
        expect(lexer.la(2)).toEqual('b');
        expect(lexer.la(3)).toEqual('c');
    });
    it('Lexer.advance()  should work', () => {
        lexer.advance(2);
        expect(lexer.la()).toEqual('c');
        expect(lexer.la(3)).toEqual('e');
        expect(lexer.la(7)).toEqual(null);
    });
    it('Lexer.isNext("cde") should work', () => {
        expect(lexer.isNext('cde')).toBeTruthy();
        expect(lexer.isNext('cd')).toBeTruthy();
        expect(lexer.isNext('cdef')).toBeFalsy();
    });
    const lexer2 = new ng_html_parser_1.TemplateLexer('0123\n5678\n0abcd\n');
    it('line and column shoud be correct', () => {
        expect(lexer2.la(10 + 1)).toEqual('0');
        let chr = lexer2.la();
        while (chr != null) {
            lexer2.advance();
            console.log(lexer2.getCurrentPosInfo());
            chr = lexer2.la();
        }
        console.log(lexer2.lineBeginPositions);
        expect(lexer2.getLineColumn(0)).toEqual([0, 0]);
        expect(lexer2.getLineColumn(3)).toEqual([0, 3]);
        expect(lexer2.getLineColumn(11)).toEqual([2, 1]);
    });
    it('template lexer should work for test html file', () => {
        const ngHtml = fs.readFileSync(__dirname + '/../../ts/spec/test-parser.html', 'utf8');
        const lexer = new ng_html_parser_1.TemplateLexer(ngHtml);
        for (const token of lexer) {
            console.log(`type: ${ng_html_parser_1.TokenType[token.type]},\ttext: ` + token.text);
        }
    });
    it('parser should work for test html file', () => {
        const ngHtml = fs.readFileSync(__dirname + '/../../ts/spec/test-parser.html', 'utf8');
        const ast = new ng_html_parser_1.TemplateParser(ngHtml).parse();
        console.log(JSON.stringify(ast, null, '  '));
        for (const tag of ast) {
            console.log(tag);
            for (const attrValue of _.values(tag.attrs)) {
                if (attrValue.value == null)
                    continue;
                expect(ngHtml.substring(attrValue.value.start, attrValue.value.end)).toEqual(attrValue.value.text);
            }
        }
        expect(ast[0].start).toBe(0);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9zcGVjL25nLWh0bWwtcGFyc2VyU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0IsNERBQWlGO0FBQ2pGLCtDQUF5QjtBQUN6QixrREFBNEI7QUFFNUIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLDhCQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFekMsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtRQUNsQyxxQ0FBcUM7UUFDckMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDdkMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lB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QUFDLEtBQUssSUFBSSxJQUFJO29CQUMxQixTQUFTO2dCQUNWLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuRztTQUNEO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvQGRyLWNvcmUvbmctYXBwLWJ1aWxkZXIvZGlzdC9zcGVjL25nLWh0bWwtcGFyc2VyU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmltcG9ydCB7VGVtcGxhdGVMZXhlciwgVG9rZW5UeXBlLCBUZW1wbGF0ZVBhcnNlcn0gZnJvbSAnLi4vdXRpbHMvbmctaHRtbC1wYXJzZXInO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5kZXNjcmliZSgnbmctaHRtbC1wYXJzZXInLCAoKSA9PiB7XG5cdGNvbnN0IGxleGVyID0gbmV3IFRlbXBsYXRlTGV4ZXIoJ2FiY2RlJyk7XG5cblx0aXQoJ0xleGVyLmxhKCkgIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuXHRcdC8vIGxldCBsZXhlciA9IG5ldyBwcy5MZXhlcignYWJjZGUnKTtcblx0XHRleHBlY3QobGV4ZXIubGEoKSkudG9FcXVhbCgnYScpO1xuXHRcdGV4cGVjdChsZXhlci5sYSgyKSkudG9FcXVhbCgnYicpO1xuXHRcdGV4cGVjdChsZXhlci5sYSgzKSkudG9FcXVhbCgnYycpO1xuXHR9KTtcblxuXHRpdCgnTGV4ZXIuYWR2YW5jZSgpICBzaG91bGQgd29yaycsICgpID0+IHtcblx0XHRsZXhlci5hZHZhbmNlKDIpO1xuXHRcdGV4cGVjdChsZXhlci5sYSgpKS50b0VxdWFsKCdjJyk7XG5cdFx0ZXhwZWN0KGxleGVyLmxhKDMpKS50b0VxdWFsKCdlJyk7XG5cdFx0ZXhwZWN0KGxleGVyLmxhKDcpKS50b0VxdWFsKG51bGwpO1xuXHR9KTtcblxuXHRpdCgnTGV4ZXIuaXNOZXh0KFwiY2RlXCIpIHNob3VsZCB3b3JrJywgKCkgPT4ge1xuXHRcdGV4cGVjdChsZXhlci5pc05leHQoJ2NkZScpKS50b0JlVHJ1dGh5KCk7XG5cdFx0ZXhwZWN0KGxleGVyLmlzTmV4dCgnY2QnKSkudG9CZVRydXRoeSgpO1xuXHRcdGV4cGVjdChsZXhlci5pc05leHQoJ2NkZWYnKSkudG9CZUZhbHN5KCk7XG5cdH0pO1xuXG5cdGNvbnN0IGxleGVyMiA9IG5ldyBUZW1wbGF0ZUxleGVyKCcwMTIzXFxuNTY3OFxcbjBhYmNkXFxuJyk7XG5cdGl0KCdsaW5lIGFuZCBjb2x1bW4gc2hvdWQgYmUgY29ycmVjdCcsICgpID0+IHtcblx0XHRleHBlY3QobGV4ZXIyLmxhKDEwICsgMSkpLnRvRXF1YWwoJzAnKTtcblx0XHRsZXQgY2hyID0gbGV4ZXIyLmxhKCk7XG5cdFx0d2hpbGUgKGNociAhPSBudWxsKSB7XG5cdFx0XHRsZXhlcjIuYWR2YW5jZSgpO1xuXHRcdFx0Y29uc29sZS5sb2cobGV4ZXIyLmdldEN1cnJlbnRQb3NJbmZvKCkpO1xuXHRcdFx0Y2hyID0gbGV4ZXIyLmxhKCk7XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKGxleGVyMi5saW5lQmVnaW5Qb3NpdGlvbnMpO1xuXHRcdGV4cGVjdChsZXhlcjIuZ2V0TGluZUNvbHVtbigwKSkudG9FcXVhbChbMCwgMF0pO1xuXHRcdGV4cGVjdChsZXhlcjIuZ2V0TGluZUNvbHVtbigzKSkudG9FcXVhbChbMCwgM10pO1xuXHRcdGV4cGVjdChsZXhlcjIuZ2V0TGluZUNvbHVtbigxMSkpLnRvRXF1YWwoWzIsIDFdKTtcblx0fSk7XG5cblx0aXQoJ3RlbXBsYXRlIGxleGVyIHNob3VsZCB3b3JrIGZvciB0ZXN0IGh0bWwgZmlsZScsICgpID0+IHtcblx0XHRjb25zdCBuZ0h0bWwgPSBmcy5yZWFkRmlsZVN5bmMoX19kaXJuYW1lICsgJy8uLi8uLi90cy9zcGVjL3Rlc3QtcGFyc2VyLmh0bWwnLCAndXRmOCcpO1xuXHRcdGNvbnN0IGxleGVyID0gbmV3IFRlbXBsYXRlTGV4ZXIobmdIdG1sKTtcblx0XHRmb3IgKGNvbnN0IHRva2VuIG9mIGxleGVyKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgdHlwZTogJHtUb2tlblR5cGVbdG9rZW4udHlwZV19LFxcdHRleHQ6IGAgKyB0b2tlbi50ZXh0KTtcblx0XHR9XG5cdH0pO1xuXG5cdGl0KCdwYXJzZXIgc2hvdWxkIHdvcmsgZm9yIHRlc3QgaHRtbCBmaWxlJywgKCkgPT4ge1xuXHRcdGNvbnN0IG5nSHRtbCA9IGZzLnJlYWRGaWxlU3luYyhfX2Rpcm5hbWUgKyAnLy4uLy4uL3RzL3NwZWMvdGVzdC1wYXJzZXIuaHRtbCcsICd1dGY4Jyk7XG5cdFx0Y29uc3QgYXN0ID0gbmV3IFRlbXBsYXRlUGFyc2VyKG5nSHRtbCkucGFyc2UoKTtcblx0XHRjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShhc3QsIG51bGwsICcgICcpKTtcblx0XHRmb3IgKGNvbnN0IHRhZyBvZiBhc3QpIHtcblx0XHRcdGNvbnNvbGUubG9nKHRhZyk7XG5cdFx0XHRmb3IgKGNvbnN0IGF0dHJWYWx1ZSBvZiBfLnZhbHVlcyh0YWcuYXR0cnMpKSB7XG5cdFx0XHRcdGlmIChhdHRyVmFsdWUudmFsdWUgPT0gbnVsbClcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0ZXhwZWN0KG5nSHRtbC5zdWJzdHJpbmcoYXR0clZhbHVlLnZhbHVlLnN0YXJ0LCBhdHRyVmFsdWUudmFsdWUuZW5kKSkudG9FcXVhbChhdHRyVmFsdWUudmFsdWUudGV4dCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV4cGVjdChhc3RbMF0uc3RhcnQpLnRvQmUoMCk7XG5cdH0pO1xufSk7XG4iXX0=
