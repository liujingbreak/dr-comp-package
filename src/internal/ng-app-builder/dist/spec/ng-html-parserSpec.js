"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable no-console */
const ng_html_parser_1 = require("../utils/ng-html-parser");
const fs = tslib_1.__importStar(require("fs"));
const _ = tslib_1.__importStar(require("lodash"));
describe('ng-html-parser', () => {
    let lexer;
    beforeEach(() => {
        lexer = new ng_html_parser_1.TemplateLexer('abcde');
    });
    it('Lexer.la()  should work', () => {
        // let lexer = new ps.Lexer('abcde');
        expect(lexer.la()).toEqual('a');
        expect(lexer.la(2)).toEqual('b');
        expect(lexer.la(3)).toEqual('c');
    });
    it('Lexer.advance()  should work', () => {
        lexer.advance(2);
        expect(lexer.la()).toEqual('c');
        expect(lexer.la(3)).toEqual('e');
        expect(lexer.la(7)).toEqual(null);
    });
    it('Lexer.isNext("cde") should work', () => {
        lexer = new ng_html_parser_1.TemplateLexer('cde');
        expect(lexer.isNext('cde')).toBeTruthy();
        expect(lexer.isNext('cd')).toBeTruthy();
        expect(lexer.isNext('cdef')).toBeFalsy();
    });
    const lexer2 = new ng_html_parser_1.TemplateLexer('0123\n5678\n0abcd\n');
    it('line and column shoud be correct', () => {
        expect(lexer2.la(10 + 1)).toEqual('0');
        let chr = lexer2.la();
        while (chr != null) {
            lexer2.advance();
            console.log(lexer2.getCurrentPosInfo());
            chr = lexer2.la();
        }
        console.log(lexer2.lineBeginPositions);
        expect(lexer2.getLineColumn(0)).toEqual([0, 0]);
        expect(lexer2.getLineColumn(3)).toEqual([0, 3]);
        expect(lexer2.getLineColumn(11)).toEqual([2, 1]);
    });
    it('template lexer should work for test html file', () => {
        const ngHtml = fs.readFileSync(__dirname + '/../../ts/spec/test-parser.html', 'utf8');
        const lexer = new ng_html_parser_1.TemplateLexer(ngHtml);
        for (const token of lexer) {
            console.log(`type: ${ng_html_parser_1.TokenType[token.type]},\ttext: ` + token.text);
        }
    });
    it('parser should work for test html file', () => {
        const ngHtml = fs.readFileSync(__dirname + '/../../ts/spec/test-parser.html', 'utf8');
        const ast = new ng_html_parser_1.TemplateParser(ngHtml).parse();
        console.log(JSON.stringify(ast, null, '  '));
        for (const tag of ast) {
            console.log(tag);
            for (const attrValue of _.values(tag.attrs)) {
                if (attrValue.value == null)
                    continue;
                expect(ngHtml.substring(attrValue.value.start, attrValue.value.end)).toEqual(attrValue.value.text);
            }
        }
        expect(ast[0].start).toBe(0);
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9zcGVjL25nLWh0bWwtcGFyc2VyU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0IsNERBQWlGO0FBQ2pGLCtDQUF5QjtBQUN6QixrREFBNEI7QUFFNUIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLEtBQW9CLENBQUM7SUFDekIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNmLEtBQUssR0FBRyxJQUFJLDhCQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLHFDQUFxQztRQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtRQUN2QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxD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Q0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQixLQUFLLE1BQU0sU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM1QyxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksSUFBSTtvQkFDMUIsU0FBUztnQkFDVixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbkc7U0FDRDtRQUNELE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci1jb3JlL25nLWFwcC1idWlsZGVyL2Rpc3Qvc3BlYy9uZy1odG1sLXBhcnNlclNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQge1RlbXBsYXRlTGV4ZXIsIFRva2VuVHlwZSwgVGVtcGxhdGVQYXJzZXJ9IGZyb20gJy4uL3V0aWxzL25nLWh0bWwtcGFyc2VyJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuZGVzY3JpYmUoJ25nLWh0bWwtcGFyc2VyJywgKCkgPT4ge1xuXHRsZXQgbGV4ZXI6IFRlbXBsYXRlTGV4ZXI7XG5cdGJlZm9yZUVhY2goKCkgPT4ge1xuXHRcdGxleGVyID0gbmV3IFRlbXBsYXRlTGV4ZXIoJ2FiY2RlJyk7XG5cdH0pO1xuXG5cdGl0KCdMZXhlci5sYSgpICBzaG91bGQgd29yaycsICgpID0+IHtcblx0XHQvLyBsZXQgbGV4ZXIgPSBuZXcgcHMuTGV4ZXIoJ2FiY2RlJyk7XG5cdFx0ZXhwZWN0KGxleGVyLmxhKCkpLnRvRXF1YWwoJ2EnKTtcblx0XHRleHBlY3QobGV4ZXIubGEoMikpLnRvRXF1YWwoJ2InKTtcblx0XHRleHBlY3QobGV4ZXIubGEoMykpLnRvRXF1YWwoJ2MnKTtcblx0fSk7XG5cblx0aXQoJ0xleGVyLmFkdmFuY2UoKSAgc2hvdWxkIHdvcmsnLCAoKSA9PiB7XG5cdFx0bGV4ZXIuYWR2YW5jZSgyKTtcblx0XHRleHBlY3QobGV4ZXIubGEoKSkudG9FcXVhbCgnYycpO1xuXHRcdGV4cGVjdChsZXhlci5sYSgzKSkudG9FcXVhbCgnZScpO1xuXHRcdGV4cGVjdChsZXhlci5sYSg3KSkudG9FcXVhbChudWxsKTtcblx0fSk7XG5cblx0aXQoJ0xleGVyLmlzTmV4dChcImNkZVwiKSBzaG91bGQgd29yaycsICgpID0+IHtcblx0XHRsZXhlciA9IG5ldyBUZW1wbGF0ZUxleGVyKCdjZGUnKTtcblx0XHRleHBlY3QobGV4ZXIuaXNOZXh0KCdjZGUnKSkudG9CZVRydXRoeSgpO1xuXHRcdGV4cGVjdChsZXhlci5pc05leHQoJ2NkJykpLnRvQmVUcnV0aHkoKTtcblx0XHRleHBlY3QobGV4ZXIuaXNOZXh0KCdjZGVmJykpLnRvQmVGYWxzeSgpO1xuXHR9KTtcblxuXHRjb25zdCBsZXhlcjIgPSBuZXcgVGVtcGxhdGVMZXhlcignMDEyM1xcbjU2NzhcXG4wYWJjZFxcbicpO1xuXHRpdCgnbGluZSBhbmQgY29sdW1uIHNob3VkIGJlIGNvcnJlY3QnLCAoKSA9PiB7XG5cdFx0ZXhwZWN0KGxleGVyMi5sYSgxMCArIDEpKS50b0VxdWFsKCcwJyk7XG5cdFx0bGV0IGNociA9IGxleGVyMi5sYSgpO1xuXHRcdHdoaWxlIChjaHIgIT0gbnVsbCkge1xuXHRcdFx0bGV4ZXIyLmFkdmFuY2UoKTtcblx0XHRcdGNvbnNvbGUubG9nKGxleGVyMi5nZXRDdXJyZW50UG9zSW5mbygpKTtcblx0XHRcdGNociA9IGxleGVyMi5sYSgpO1xuXHRcdH1cblx0XHRjb25zb2xlLmxvZyhsZXhlcjIubGluZUJlZ2luUG9zaXRpb25zKTtcblx0XHRleHBlY3QobGV4ZXIyLmdldExpbmVDb2x1bW4oMCkpLnRvRXF1YWwoWzAsIDBdKTtcblx0XHRleHBlY3QobGV4ZXIyLmdldExpbmVDb2x1bW4oMykpLnRvRXF1YWwoWzAsIDNdKTtcblx0XHRleHBlY3QobGV4ZXIyLmdldExpbmVDb2x1bW4oMTEpKS50b0VxdWFsKFsyLCAxXSk7XG5cdH0pO1xuXG5cdGl0KCd0ZW1wbGF0ZSBsZXhlciBzaG91bGQgd29yayBmb3IgdGVzdCBodG1sIGZpbGUnLCAoKSA9PiB7XG5cdFx0Y29uc3QgbmdIdG1sID0gZnMucmVhZEZpbGVTeW5jKF9fZGlybmFtZSArICcvLi4vLi4vdHMvc3BlYy90ZXN0LXBhcnNlci5odG1sJywgJ3V0ZjgnKTtcblx0XHRjb25zdCBsZXhlciA9IG5ldyBUZW1wbGF0ZUxleGVyKG5nSHRtbCk7XG5cdFx0Zm9yIChjb25zdCB0b2tlbiBvZiBsZXhlcikge1xuXHRcdFx0Y29uc29sZS5sb2coYHR5cGU6ICR7VG9rZW5UeXBlW3Rva2VuLnR5cGVdfSxcXHR0ZXh0OiBgICsgdG9rZW4udGV4dCk7XG5cdFx0fVxuXHR9KTtcblxuXHRpdCgncGFyc2VyIHNob3VsZCB3b3JrIGZvciB0ZXN0IGh0bWwgZmlsZScsICgpID0+IHtcblx0XHRjb25zdCBuZ0h0bWwgPSBmcy5yZWFkRmlsZVN5bmMoX19kaXJuYW1lICsgJy8uLi8uLi90cy9zcGVjL3Rlc3QtcGFyc2VyLmh0bWwnLCAndXRmOCcpO1xuXHRcdGNvbnN0IGFzdCA9IG5ldyBUZW1wbGF0ZVBhcnNlcihuZ0h0bWwpLnBhcnNlKCk7XG5cdFx0Y29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYXN0LCBudWxsLCAnICAnKSk7XG5cdFx0Zm9yIChjb25zdCB0YWcgb2YgYXN0KSB7XG5cdFx0XHRjb25zb2xlLmxvZyh0YWcpO1xuXHRcdFx0Zm9yIChjb25zdCBhdHRyVmFsdWUgb2YgXy52YWx1ZXModGFnLmF0dHJzKSkge1xuXHRcdFx0XHRpZiAoYXR0clZhbHVlLnZhbHVlID09IG51bGwpXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdGV4cGVjdChuZ0h0bWwuc3Vic3RyaW5nKGF0dHJWYWx1ZS52YWx1ZS5zdGFydCwgYXR0clZhbHVlLnZhbHVlLmVuZCkpLnRvRXF1YWwoYXR0clZhbHVlLnZhbHVlLnRleHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRleHBlY3QoYXN0WzBdLnN0YXJ0KS50b0JlKDApO1xuXHR9KTtcbn0pO1xuIl19
