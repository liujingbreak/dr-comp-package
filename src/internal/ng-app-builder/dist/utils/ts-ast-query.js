"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ts = tslib_1.__importStar(require("typescript"));
const typescript_1 = require("typescript");
const fs = tslib_1.__importStar(require("fs"));
// import api from '__api';
const _ = tslib_1.__importStar(require("lodash"));
const { green, red, yellow } = require('chalk');
// const log = require('log4js').getLogger('ts-ast-query');
function printFile(fileName) {
    if (!fileName) {
        // tslint:disable-next-line
        console.log('Usage:\n' + green('drcp run @dr-core/ng-app-builder/dist/utils/ts-ast-query --file <ts file>'));
        return;
    }
    new Selector(fs.readFileSync(fileName, 'utf8'), fileName).printAll();
}
exports.printFile = printFile;
// type Callback = (ast: ts.Node, path: string[]) => boolean | void;
class Selector {
    constructor(src, file) {
        if (typeof src === 'string') {
            this.src = ts.createSourceFile(file, src, ts.ScriptTarget.ESNext, true, ts.ScriptKind.TSX);
        }
        else {
            this.src = src;
        }
    }
    findWith(...arg) {
        let query;
        let ast;
        let callback;
        if (typeof arg[0] === 'string') {
            ast = this.src;
            query = arg[0];
            callback = arg[1];
        }
        else {
            ast = arg[0];
            query = arg[1];
            callback = arg[2];
        }
        let res;
        this.traverse(ast, (ast, path, parents) => {
            if (res !== undefined)
                return true;
            if (new Query(query).matches(path)) {
                res = callback(ast, path, parents);
                if (res != null)
                    return true;
            }
        });
        return res;
    }
    findAll(ast, query) {
        let q;
        if (typeof ast === 'string') {
            query = ast;
            q = new Query(ast);
            ast = this.src;
        }
        else {
            q = new Query(query);
        }
        const res = [];
        this.traverse(ast, (ast, path, parents, isLeaf) => {
            if (q.matches(path)) {
                res.push(ast);
            }
        });
        return res;
    }
    findFirst(ast, query) {
        let q;
        if (typeof ast === 'string') {
            query = ast;
            q = new Query(ast);
            ast = this.src;
        }
        else {
            q = new Query(query);
        }
        let res = null;
        this.traverse(ast, (ast, path) => {
            if (res)
                return true;
            if (q.matches(path)) {
                res = ast;
                return true;
            }
        });
        return res;
    }
    list(ast = this.src) {
        let out = '';
        this.traverse(ast, (node, path, parents, noChild) => {
            if (noChild) {
                out += path.join('>') + ' ' + node.getText(this.src);
                out += '\n';
            }
        });
        return out;
    }
    printAll(ast = this.src) {
        this.traverse(ast, (node, path, parents, noChild) => {
            if (noChild) {
                // tslint:disable-next-line:no-console
                console.log(path.join('>'), green(node.getText(this.src)));
            }
        });
    }
    printAllNoType(ast = this.src) {
        this.traverse(ast, (node, path, parents, noChild) => {
            if (noChild) {
                // tslint:disable-next-line:no-console
                console.log(path.map(name => name.split(':')[0]).join('>'), green(node.getText(this.src)));
            }
        });
    }
    /**
     *
     * @param ast
     * @param cb return true to skip traversing child node
     * @param level default 0
     */
    traverse(ast, cb, propName = '', parents = [], pathEls = []) {
        let needPopPathEl = false;
        if (parents.length > 0) { // `> 1` to skip source file
            // let propName = parents[parents.length - 1] === this.src ? '' : this._findParentPropName(ast, parents);
            let pathEl = ':' + typescript_1.SyntaxKind[ast.kind];
            if (propName)
                pathEl = '.' + propName + pathEl;
            else
                pathEl = red(pathEl);
            pathEls.push(pathEl);
            needPopPathEl = true;
        }
        const res = cb(ast, pathEls, parents, ast.getChildCount(this.src) <= 0);
        if (res !== true) {
            parents.push(ast);
            const _value2key = new Map();
            // tslint:disable-next-line:forin
            // for (const key in ast) {
            const self = this;
            for (const key of Object.keys(ast)) {
                if (key === 'parent' || key === 'kind')
                    continue;
                _value2key.set(ast[key], key);
            }
            ts.forEachChild(ast, sub => {
                self.traverse(sub, cb, _value2key.get(sub), parents, pathEls);
            }, subArray => self.traverseArray(subArray, cb, _value2key.get(subArray), parents, pathEls));
            parents.pop();
        }
        if (needPopPathEl)
            pathEls.pop();
    }
    pathForAst(ast) {
        const pathEls = [];
        let p = ast;
        while (p && p !== this.src) {
            pathEls.push(this.propNameForAst(p) + ':' + typescript_1.SyntaxKind[p.kind]);
            p = p.parent;
        }
        return pathEls.reverse().join('>');
    }
    propNameForAst(ast) {
        const p = ast.parent;
        for (const prop of Object.keys(p)) {
            const value = p[prop];
            if (prop === 'parent' || prop === 'kind')
                continue;
            if (Array.isArray(value)) {
                const idx = value.indexOf(ast);
                if (idx >= 0) {
                    return prop + `[${idx}]`;
                }
            }
            if (value === ast) {
                return prop;
            }
        }
        return '';
    }
    traverseArray(nodes, cb, propName = '', parents = [], pathEls = []) {
        let i = 0;
        for (const ast of nodes) {
            this.traverse(ast, cb, propName + `[${i++}]`, parents, pathEls);
        }
    }
}
exports.default = Selector;
class Query {
    constructor(query) {
        this.queryPaths = query.trim().replace(/\s*>\s*/g, '>').split(' ').map(paths => paths.split('>')
            .map(singleAstDesc => this._parseDesc(singleAstDesc)));
    }
    matches(path) {
        let testPos = path.length - 1;
        const startTestPos = testPos;
        for (const consecutiveNodes of this.queryPaths.slice(0).reverse()) {
            while (true) {
                if (this.matchesConsecutiveNodes(consecutiveNodes, path, testPos)) {
                    testPos -= consecutiveNodes.length;
                    break;
                }
                else if (testPos === startTestPos) {
                    return false;
                }
                else {
                    testPos--;
                }
                if (consecutiveNodes.length > testPos + 1)
                    return false;
            }
        }
        return true;
    }
    _parseDesc(singleAstDesc) {
        const astChar = {};
        // tslint:disable-next-line
        let m = /^(?:\.([a-zA-Z0-9_$]+)(?:\[([0-9]*)\])?)?(?:\:([a-zA-Z0-9_$]+))?$|^\*$/.exec(singleAstDesc);
        if (m == null) {
            throw new Error(`Invalid query string "${yellow(singleAstDesc)}"`);
        }
        if (m[1]) {
            astChar.propertyName = m[1];
            if (m[2])
                astChar.propIndex = parseInt(m[2], 10);
        }
        if (m[3])
            astChar.kind = m[3];
        // if (m[4])
        // 	astChar.text = new RegExp(m[4]);
        return astChar;
    }
    matchesAst(query, target) {
        for (const key of Object.keys(query)) {
            const value = query[key];
            if (_.isRegExp(value)) {
                if (!value.test(target[key]))
                    return false;
            }
            else if (target[key] !== value)
                return false;
        }
        return true;
    }
    matchesConsecutiveNodes(queryNodes, path, testPos) {
        if (queryNodes.length > testPos + 1)
            return false;
        for (const query of queryNodes.slice(0).reverse()) {
            const target = this._parseDesc(path[testPos--]);
            if (!this.matchesAst(query, target))
                return false;
        }
        return true;
    }
}
exports.Query = Query;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy91dGlscy90cy1hc3QtcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQWlDO0FBQ2pDLDJDQUE0QztBQUM1QywrQ0FBeUI7QUFDekIsMkJBQTJCO0FBQzNCLGtEQUE0QjtBQUM1QixNQUFNLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUMsMkRBQTJEO0FBRTNELFNBQWdCLFNBQVMsQ0FBQyxRQUFnQjtJQUN6QyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2QsMkJBQTJCO1FBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQywyRUFBMkUsQ0FBQyxDQUFDLENBQUM7UUFDN0csT0FBTztLQUNQO0lBQ0QsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDdEUsQ0FBQztBQVBELDhCQU9DO0FBRUQsb0VBQW9FO0FBQ3BFLE1BQXFCLFFBQVE7SUFLNUIsWUFBWSxHQUEyQixFQUFFLElBQWE7UUFDckQsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFDL0QsSUFBSSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7YUFBTTtZQUNOLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQ2Y7SUFDRixDQUFDO0lBZUQsUUFBUSxDQUFJLEdBQUcsR0FBVTtRQUN4QixJQUFJLEtBQWEsQ0FBQztRQUNsQixJQUFJLEdBQVksQ0FBQztRQUNqQixJQUFJLFFBQWlFLENBQUM7UUFDdEUsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDL0IsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDZixLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsQjthQUFNO1lBQ04sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZixRQUFRLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxHQUFhLENBQUM7UUFFbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQ3pDLElBQUksR0FBRyxLQUFLLFNBQVM7Z0JBQ3BCLE9BQU8sSUFBSSxDQUFDO1lBQ2IsSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ25DLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxHQUFHLElBQUksSUFBSTtvQkFDZCxPQUFPLElBQUksQ0FBQzthQUNiO1FBQ0YsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFlRCxPQUFPLENBQUMsR0FBcUIsRUFBRSxLQUFjO1FBQzVDLElBQUksQ0FBUSxDQUFDO1FBQ2IsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDNUIsS0FBSyxHQUFHLEdBQUcsQ0FBQztZQUNaLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNmO2FBQU07WUFDTixDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckI7UUFFRCxNQUFNLEdBQUcsR0FBYyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNqRCxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDZDtRQUNGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUM7SUFDWixDQUFDO0lBY0QsU0FBUyxDQUFDLEdBQXFCLEVBQUUsS0FBYztRQUM5QyxJQUFJLENBQVEsQ0FBQztRQUNiLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzVCLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDWixDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDZjthQUFNO1lBQ04sQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxHQUFHLEdBQVksSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ2hDLElBQUksR0FBRztnQkFDTixPQUFPLElBQUksQ0FBQztZQUNiLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDcEIsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDVixPQUFPLElBQUksQ0FBQzthQUNaO1FBQ0YsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFRCxJQUFJLENBQUMsTUFBZSxJQUFJLENBQUMsR0FBRztRQUMzQixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQ25ELElBQUksT0FBTyxFQUFFO2dCQUNaLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDckQsR0FBRyxJQUFJLElBQUksQ0FBQzthQUNaO1FBQ0YsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFRCxRQUFRLENBQUMsTUFBZSxJQUFJLENBQUMsR0FBRztRQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQ25ELElBQUksT0FBTyxFQUFFO2dCQUNaLHNDQUFzQztnQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0Q7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQUMsTUFBZSxJQUFJLENBQUMsR0FBRztRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQ25ELElBQUksT0FBTyxFQUFFO2dCQUNaLHNDQUFzQztnQkFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNGO1FBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSCxRQUFRLENBQUMsR0FBWSxFQUNwQixFQUF5RixFQUN6RixRQUFRLEdBQUcsRUFBRSxFQUFFLFVBQXFCLEVBQUUsRUFBRSxVQUFvQixFQUFFO1FBRTlELElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUUxQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUUsNEJBQTRCO1lBQ3JELHlHQUF5RztZQUN6RyxJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsdUJBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEMsSUFBSSxRQUFRO2dCQUNYLE1BQU0sR0FBRyxHQUFHLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQzs7Z0JBRWpDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyQixhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO1FBRUQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXhFLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtZQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUFlLENBQUM7WUFDMUMsaUNBQWlDO1lBQ2pDLDJCQUEyQjtZQUMzQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7WUFDbEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxJQUFJLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxLQUFLLE1BQU07b0JBQ3JDLFNBQVM7Z0JBQ1QsVUFBVSxDQUFDLEdBQUcsQ0FBRSxHQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDeEM7WUFDRCxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQy9ELENBQUMsRUFDRCxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FDeEYsQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNkO1FBQ0QsSUFBSSxhQUFhO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsVUFBVSxDQUFDLEdBQVk7UUFDdEIsTUFBTSxPQUFPLEdBQWEsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsdUJBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4RCxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNiO1FBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFUyxjQUFjLENBQUMsR0FBWTtRQUNwQyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3JCLEtBQUssTUFBTSxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBSSxDQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsSUFBSSxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksS0FBSyxNQUFNO2dCQUN2QyxTQUFTO1lBQ1YsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixNQUFNLEdBQUcsR0FBSSxLQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUU7b0JBQ2IsT0FBTyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztpQkFDekI7YUFDRDtZQUNELElBQUksS0FBSyxLQUFLLEdBQUcsRUFBRTtnQkFDbEIsT0FBTyxJQUFJLENBQUM7YUFDWjtTQUNEO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRVMsYUFBYSxDQUFDLEtBQTRCLEVBQ25ELEVBQXlGLEVBQ3pGLFFBQVEsR0FBRyxFQUFFLEVBQUUsVUFBcUIsRUFBRSxFQUFFLFVBQW9CLEVBQUU7UUFFOUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsS0FBSyxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2hFO0lBQ0YsQ0FBQztDQUNEO0FBeE9ELDJCQXdPQztBQVlELE1BQWEsS0FBSztJQUdqQixZQUFZLEtBQWE7UUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDOUYsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFjO1FBQ3JCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQztRQUM3QixLQUFLLE1BQU0sZ0JBQWdCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEUsT0FBTyxJQUFJLEVBQUU7Z0JBQ1osSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFO29CQUNsRSxPQUFPLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDO29CQUNuQyxNQUFNO2lCQUNOO3FCQUFNLElBQUksT0FBTyxLQUFLLFlBQVksRUFBRTtvQkFDcEMsT0FBTyxLQUFLLENBQUM7aUJBQ2I7cUJBQU07b0JBQ04sT0FBTyxFQUFFLENBQUM7aUJBQ1Y7Z0JBQ0QsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUM7b0JBQ3hDLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVTLFVBQVUsQ0FBQyxhQUFxQjtRQUN6QyxNQUFNLE9BQU8sR0FBYSxFQUFFLENBQUM7UUFDNUIsMkJBQTJCO1FBQzNCLElBQUksQ0FBQyxHQUFHLHdFQUF3RSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25FO1FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDVCxPQUFPLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsT0FBTyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1AsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsWUFBWTtRQUNaLG9DQUFvQztRQUNwQyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRU8sVUFBVSxDQUFDLEtBQWUsRUFBRSxNQUFvQjtRQUN2RCxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckMsTUFBTSxLQUFLLEdBQUksS0FBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsSUFBSSxDQUFFLEtBQWdCLENBQUMsSUFBSSxDQUFFLE1BQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDaEQsT0FBTyxLQUFLLENBQUM7YUFDZDtpQkFBTSxJQUFLLE1BQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLO2dCQUN4QyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRU8sdUJBQXVCLENBQUMsVUFBMEIsRUFBRSxJQUFjLEVBQUUsT0FBZTtRQUMxRixJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUM7WUFDbEMsT0FBTyxLQUFLLENBQUM7UUFDZCxLQUFLLE1BQU0sS0FBSyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7Z0JBQ2xDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FDRDtBQXJFRCxzQkFxRUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci1jb3JlL25nLWFwcC1idWlsZGVyL2Rpc3QvdXRpbHMvdHMtYXN0LXF1ZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQge1N5bnRheEtpbmQgYXMgc2t9IGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuLy8gaW1wb3J0IGFwaSBmcm9tICdfX2FwaSc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5jb25zdCB7Z3JlZW4sIHJlZCwgeWVsbG93fSA9IHJlcXVpcmUoJ2NoYWxrJyk7XG4vLyBjb25zdCBsb2cgPSByZXF1aXJlKCdsb2c0anMnKS5nZXRMb2dnZXIoJ3RzLWFzdC1xdWVyeScpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRGaWxlKGZpbGVOYW1lOiBzdHJpbmcpIHtcblx0aWYgKCFmaWxlTmFtZSkge1xuXHRcdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuXHRcdGNvbnNvbGUubG9nKCdVc2FnZTpcXG4nICsgZ3JlZW4oJ2RyY3AgcnVuIEBkci1jb3JlL25nLWFwcC1idWlsZGVyL2Rpc3QvdXRpbHMvdHMtYXN0LXF1ZXJ5IC0tZmlsZSA8dHMgZmlsZT4nKSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdG5ldyBTZWxlY3Rvcihmcy5yZWFkRmlsZVN5bmMoZmlsZU5hbWUsICd1dGY4JyksIGZpbGVOYW1lKS5wcmludEFsbCgpO1xufVxuXG4vLyB0eXBlIENhbGxiYWNrID0gKGFzdDogdHMuTm9kZSwgcGF0aDogc3RyaW5nW10pID0+IGJvb2xlYW4gfCB2b2lkO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0b3Ige1xuXHRzcmM6IHRzLlNvdXJjZUZpbGU7XG5cblx0Y29uc3RydWN0b3Ioc3JjOiBzdHJpbmcsIGZpbGU6IHN0cmluZyk7XG5cdGNvbnN0cnVjdG9yKHNyYzogdHMuU291cmNlRmlsZSk7XG5cdGNvbnN0cnVjdG9yKHNyYzogdHMuU291cmNlRmlsZSB8IHN0cmluZywgZmlsZT86IHN0cmluZykge1xuXHRcdGlmICh0eXBlb2Ygc3JjID09PSAnc3RyaW5nJykge1xuXHRcdFx0dGhpcy5zcmMgPSB0cy5jcmVhdGVTb3VyY2VGaWxlKGZpbGUsIHNyYywgdHMuU2NyaXB0VGFyZ2V0LkVTTmV4dCxcblx0XHRcdFx0dHJ1ZSwgdHMuU2NyaXB0S2luZC5UU1gpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNyYyA9IHNyYztcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBxdWVyeSBMaWtlIENTUyBzZWxlY3QgOj0gPHNlbGVjdG9yIGVsZW1lbnQ+IChcIiBcIiB8IFwiPlwiKSA8c2VsZWN0b3IgZWxlbWVudD5cblx0ICogICB3aGVyZSA8c2VsZWN0b3IgZWxlbWVudD4gOj0gXCIuXCIgPHByb3BlcnR5IG5hbWU+IDxpbmRleD4/IHwgXCI6XCIgPFR5cGVzY3JpcHQgU3ludGF4IGtpbmQgbmFtZT4gfCAqXG5cdCAqICAgd2hlcmUgPGluZGV4PiA6PSBcIltcIiBcIjBcIi1cIjlcIiBcIl1cIlxuXHQgKiBlLmcuXG5cdCAqICAtIC5lbGVtZW50czpJbXBvcnRTcGVjaWZpZXIgPiAubmFtZVxuXHQgKiAgLSAuZWxlbWVudHNbMl0gPiAubmFtZVxuXHQgKiAgLSAuc3RhdGVtZW50c1swXSA6SW1wb3J0U3BlY2lmaWVyID4gOklkZW50aWZpZXJcblx0ICogQHBhcmFtIGNhbGxiYWNrIFxuXHQgKi9cblx0ZmluZFdpdGg8VD4ocXVlcnk6IHN0cmluZywgY2FsbGJhY2s6IChhc3Q6IHRzLk5vZGUsIHBhdGg6IHN0cmluZ1tdLCBwYXJlbnRzOiB0cy5Ob2RlW10pID0+IFQpOiBUIHwgbnVsbDtcblx0ZmluZFdpdGg8VD4oYXN0OiB0cy5Ob2RlLCBxdWVyeTogc3RyaW5nLCBjYWxsYmFjazogKGFzdDogdHMuTm9kZSwgcGF0aDogc3RyaW5nW10sIHBhcmVudHM6IHRzLk5vZGVbXSkgPT4gVCk6IFQgfCBudWxsO1xuXHRmaW5kV2l0aDxUPiguLi5hcmc6IGFueVtdKTogVCB8IG51bGwge1xuXHRcdGxldCBxdWVyeTogc3RyaW5nO1xuXHRcdGxldCBhc3Q6IHRzLk5vZGU7XG5cdFx0bGV0IGNhbGxiYWNrOiAoYXN0OiB0cy5Ob2RlLCBwYXRoOiBzdHJpbmdbXSwgcGFyZW50czogdHMuTm9kZVtdKSA9PiBUO1xuXHRcdGlmICh0eXBlb2YgYXJnWzBdID09PSAnc3RyaW5nJykge1xuXHRcdFx0YXN0ID0gdGhpcy5zcmM7XG5cdFx0XHRxdWVyeSA9IGFyZ1swXTtcblx0XHRcdGNhbGxiYWNrID0gYXJnWzFdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhc3QgPSBhcmdbMF07XG5cdFx0XHRxdWVyeSA9IGFyZ1sxXTtcblx0XHRcdGNhbGxiYWNrID0gYXJnWzJdO1xuXHRcdH1cblx0XHRsZXQgcmVzOiBUIHwgbnVsbDtcblxuXHRcdHRoaXMudHJhdmVyc2UoYXN0LCAoYXN0LCBwYXRoLCBwYXJlbnRzKSA9PiB7XG5cdFx0XHRpZiAocmVzICE9PSB1bmRlZmluZWQpXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0aWYgKG5ldyBRdWVyeShxdWVyeSkubWF0Y2hlcyhwYXRoKSkge1xuXHRcdFx0XHRyZXMgPSBjYWxsYmFjayhhc3QsIHBhdGgsIHBhcmVudHMpO1xuXHRcdFx0XHRpZiAocmVzICE9IG51bGwpXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXG5cdC8qKlxuXHQgKiBcblx0ICogQHBhcmFtIGFzdCByb290IEFTVCBub2RlXG5cdCAqIEBwYXJhbSBxdWVyeSBMaWtlIENTUyBzZWxlY3QgOj0gPHNlbGVjdG9yIGVsZW1lbnQ+IChcIiBcIiB8IFwiPlwiKSA8c2VsZWN0b3IgZWxlbWVudD5cblx0ICogICB3aGVyZSA8c2VsZWN0b3IgZWxlbWVudD4gOj0gXCIuXCIgPHByb3BlcnR5IG5hbWU+IDxpbmRleD4/IHwgXCI6XCIgPFR5cGVzY3JpcHQgU3ludGF4IGtpbmQgbmFtZT4gfCAqXG5cdCAqICAgd2hlcmUgPGluZGV4PiA6PSBcIltcIiBcIjBcIi1cIjlcIiBcIl1cIlxuXHQgKiBlLmcuXG5cdCAqICAtIC5lbGVtZW50czpJbXBvcnRTcGVjaWZpZXIgPiAubmFtZVxuXHQgKiAgLSAuZWxlbWVudHNbMl0gPiAubmFtZVxuXHQgKiAgLSAuc3RhdGVtZW50c1swXSA6SW1wb3J0U3BlY2lmaWVyID4gOklkZW50aWZpZXJcblx0ICovXG5cdGZpbmRBbGwocXVlcnk6IHN0cmluZyk6IHRzLk5vZGVbXTtcblx0ZmluZEFsbChhc3Q6IHRzLk5vZGUsIHF1ZXJ5OiBzdHJpbmcpOiB0cy5Ob2RlW107XG5cdGZpbmRBbGwoYXN0OiB0cy5Ob2RlIHwgc3RyaW5nLCBxdWVyeT86IHN0cmluZyk6IHRzLk5vZGVbXSB7XG5cdFx0bGV0IHE6IFF1ZXJ5O1xuXHRcdGlmICh0eXBlb2YgYXN0ID09PSAnc3RyaW5nJykge1xuXHRcdFx0cXVlcnkgPSBhc3Q7XG5cdFx0XHRxID0gbmV3IFF1ZXJ5KGFzdCk7XG5cdFx0XHRhc3QgPSB0aGlzLnNyYztcblx0XHR9IGVsc2Uge1xuXHRcdFx0cSA9IG5ldyBRdWVyeShxdWVyeSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzOiB0cy5Ob2RlW10gPSBbXTtcblx0XHR0aGlzLnRyYXZlcnNlKGFzdCwgKGFzdCwgcGF0aCwgcGFyZW50cywgaXNMZWFmKSA9PiB7XG5cdFx0XHRpZiAocS5tYXRjaGVzKHBhdGgpKSB7XG5cdFx0XHRcdHJlcy5wdXNoKGFzdCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBhc3Qgcm9vdCBBU1Qgbm9kZVxuXHQgKiBAcGFyYW0gcXVlcnkgTGlrZSBDU1Mgc2VsZWN0IDo9IDxzZWxlY3RvciBlbGVtZW50PiAoXCIgXCIgfCBcIj5cIikgPHNlbGVjdG9yIGVsZW1lbnQ+XG5cdCAqICAgd2hlcmUgPHNlbGVjdG9yIGVsZW1lbnQ+IDo9IFwiLlwiIDxwcm9wZXJ0eSBuYW1lPiA8aW5kZXg+PyB8IFwiOlwiIDxUeXBlc2NyaXB0IFN5bnRheCBraW5kIG5hbWU+IHwgKlxuXHQgKiAgIHdoZXJlIDxpbmRleD4gOj0gXCJbXCIgXCIwXCItXCI5XCIgXCJdXCJcblx0ICogZS5nLlxuXHQgKiAgLSAuZWxlbWVudHM6SW1wb3J0U3BlY2lmaWVyID4gLm5hbWVcblx0ICogIC0gLmVsZW1lbnRzWzJdID4gLm5hbWVcblx0ICogIC0gLnN0YXRlbWVudHNbMF0gOkltcG9ydFNwZWNpZmllciA+IDpJZGVudGlmaWVyXG5cdCAqL1xuXHRmaW5kRmlyc3QocXVlcnk6IHN0cmluZyk6IHRzLk5vZGU7XG5cdGZpbmRGaXJzdChhc3Q6IHRzLk5vZGUsIHF1ZXJ5OiBzdHJpbmcpOiB0cy5Ob2RlO1xuXHRmaW5kRmlyc3QoYXN0OiB0cy5Ob2RlIHwgc3RyaW5nLCBxdWVyeT86IHN0cmluZyk6IHRzLk5vZGUge1xuXHRcdGxldCBxOiBRdWVyeTtcblx0XHRpZiAodHlwZW9mIGFzdCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHF1ZXJ5ID0gYXN0O1xuXHRcdFx0cSA9IG5ldyBRdWVyeShhc3QpO1xuXHRcdFx0YXN0ID0gdGhpcy5zcmM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHEgPSBuZXcgUXVlcnkocXVlcnkpO1xuXHRcdH1cblx0XHRsZXQgcmVzOiB0cy5Ob2RlID0gbnVsbDtcblx0XHR0aGlzLnRyYXZlcnNlKGFzdCwgKGFzdCwgcGF0aCkgPT4ge1xuXHRcdFx0aWYgKHJlcylcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRpZiAocS5tYXRjaGVzKHBhdGgpKSB7XG5cdFx0XHRcdHJlcyA9IGFzdDtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXG5cdGxpc3QoYXN0OiB0cy5Ob2RlID0gdGhpcy5zcmMpIHtcblx0XHRsZXQgb3V0ID0gJyc7XG5cdFx0dGhpcy50cmF2ZXJzZShhc3QsIChub2RlLCBwYXRoLCBwYXJlbnRzLCBub0NoaWxkKSA9PiB7XG5cdFx0XHRpZiAobm9DaGlsZCkge1xuXHRcdFx0XHRvdXQgKz0gcGF0aC5qb2luKCc+JykgKyAnICcgKyBub2RlLmdldFRleHQodGhpcy5zcmMpO1xuXHRcdFx0XHRvdXQgKz0gJ1xcbic7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdHByaW50QWxsKGFzdDogdHMuTm9kZSA9IHRoaXMuc3JjKSB7XG5cdFx0dGhpcy50cmF2ZXJzZShhc3QsIChub2RlLCBwYXRoLCBwYXJlbnRzLCBub0NoaWxkKSA9PiB7XG5cdFx0XHRpZiAobm9DaGlsZCkge1xuXHRcdFx0XHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuXHRcdFx0XHRjb25zb2xlLmxvZyhwYXRoLmpvaW4oJz4nKSwgZ3JlZW4obm9kZS5nZXRUZXh0KHRoaXMuc3JjKSkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cHJpbnRBbGxOb1R5cGUoYXN0OiB0cy5Ob2RlID0gdGhpcy5zcmMpIHtcblx0XHR0aGlzLnRyYXZlcnNlKGFzdCwgKG5vZGUsIHBhdGgsIHBhcmVudHMsIG5vQ2hpbGQpID0+IHtcblx0XHRcdGlmIChub0NoaWxkKSB7XG5cdFx0XHRcdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG5cdFx0XHRcdGNvbnNvbGUubG9nKHBhdGgubWFwKG5hbWUgPT4gbmFtZS5zcGxpdCgnOicpWzBdKS5qb2luKCc+JyksIGdyZWVuKG5vZGUuZ2V0VGV4dCh0aGlzLnNyYykpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHQvKipcblx0ICogXG5cdCAqIEBwYXJhbSBhc3QgXG5cdCAqIEBwYXJhbSBjYiByZXR1cm4gdHJ1ZSB0byBza2lwIHRyYXZlcnNpbmcgY2hpbGQgbm9kZVxuXHQgKiBAcGFyYW0gbGV2ZWwgZGVmYXVsdCAwXG5cdCAqL1xuXHR0cmF2ZXJzZShhc3Q6IHRzLk5vZGUsXG5cdFx0Y2I6IChhc3Q6IHRzLk5vZGUsIHBhdGg6IHN0cmluZ1tdLCBwYXJlbnRzOiB0cy5Ob2RlW10sIGlzTGVhZjogYm9vbGVhbikgPT4gYm9vbGVhbiB8IHZvaWQsXG5cdFx0cHJvcE5hbWUgPSAnJywgcGFyZW50czogdHMuTm9kZVtdID0gW10sIHBhdGhFbHM6IHN0cmluZ1tdID0gW10pIHtcblxuXHRcdGxldCBuZWVkUG9wUGF0aEVsID0gZmFsc2U7XG5cblx0XHRpZiAocGFyZW50cy5sZW5ndGggPiAwKSB7IC8vIGA+IDFgIHRvIHNraXAgc291cmNlIGZpbGVcblx0XHRcdC8vIGxldCBwcm9wTmFtZSA9IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXSA9PT0gdGhpcy5zcmMgPyAnJyA6IHRoaXMuX2ZpbmRQYXJlbnRQcm9wTmFtZShhc3QsIHBhcmVudHMpO1xuXHRcdFx0bGV0IHBhdGhFbCA9ICc6JyArIHNrW2FzdC5raW5kXTtcblx0XHRcdGlmIChwcm9wTmFtZSlcblx0XHRcdFx0cGF0aEVsID0gJy4nICsgcHJvcE5hbWUgKyBwYXRoRWw7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHBhdGhFbCA9IHJlZChwYXRoRWwpO1xuXHRcdFx0cGF0aEVscy5wdXNoKHBhdGhFbCk7XG5cdFx0XHRuZWVkUG9wUGF0aEVsID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRjb25zdCByZXMgPSBjYihhc3QsIHBhdGhFbHMsIHBhcmVudHMsIGFzdC5nZXRDaGlsZENvdW50KHRoaXMuc3JjKSA8PSAwKTtcblxuXHRcdGlmIChyZXMgIT09IHRydWUpIHtcblx0XHRcdHBhcmVudHMucHVzaChhc3QpO1xuXHRcdFx0Y29uc3QgX3ZhbHVlMmtleSA9IG5ldyBNYXA8YW55LCBzdHJpbmc+KCk7XG5cdFx0XHQvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cblx0XHRcdC8vIGZvciAoY29uc3Qga2V5IGluIGFzdCkge1xuXHRcdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhhc3QpKSB7XG5cdFx0XHRcdGlmIChrZXkgPT09ICdwYXJlbnQnIHx8IGtleSA9PT0gJ2tpbmQnKVxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdF92YWx1ZTJrZXkuc2V0KChhc3QgYXMgYW55KVtrZXldLCBrZXkpO1xuXHRcdFx0fVxuXHRcdFx0dHMuZm9yRWFjaENoaWxkKGFzdCwgc3ViID0+IHtcblx0XHRcdFx0XHRzZWxmLnRyYXZlcnNlKHN1YiwgY2IsIF92YWx1ZTJrZXkuZ2V0KHN1YiksIHBhcmVudHMsIHBhdGhFbHMpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdWJBcnJheSA9PiBzZWxmLnRyYXZlcnNlQXJyYXkoc3ViQXJyYXksIGNiLCBfdmFsdWUya2V5LmdldChzdWJBcnJheSksIHBhcmVudHMsIHBhdGhFbHMpXG5cdFx0XHQpO1xuXHRcdFx0cGFyZW50cy5wb3AoKTtcblx0XHR9XG5cdFx0aWYgKG5lZWRQb3BQYXRoRWwpXG5cdFx0XHRwYXRoRWxzLnBvcCgpO1xuXHR9XG5cblx0cGF0aEZvckFzdChhc3Q6IHRzLk5vZGUpOiBzdHJpbmcge1xuXHRcdGNvbnN0IHBhdGhFbHM6IHN0cmluZ1tdID0gW107XG5cdFx0bGV0IHAgPSBhc3Q7XG5cdFx0d2hpbGUgKHAgJiYgcCAhPT0gdGhpcy5zcmMpIHtcblx0XHRcdHBhdGhFbHMucHVzaCh0aGlzLnByb3BOYW1lRm9yQXN0KHApICsgJzonICsgc2tbcC5raW5kXSk7XG5cdFx0XHRwID0gcC5wYXJlbnQ7XG5cdFx0fVxuXHRcdHJldHVybiBwYXRoRWxzLnJldmVyc2UoKS5qb2luKCc+Jyk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgcHJvcE5hbWVGb3JBc3QoYXN0OiB0cy5Ob2RlKTogc3RyaW5nIHtcblx0XHRjb25zdCBwID0gYXN0LnBhcmVudDtcblx0XHRmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmtleXMocCkpIHtcblx0XHRcdGNvbnN0IHZhbHVlID0gKHAgYXMgYW55KVtwcm9wXTtcblx0XHRcdGlmIChwcm9wID09PSAncGFyZW50JyB8fCBwcm9wID09PSAna2luZCcpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdGNvbnN0IGlkeCA9ICh2YWx1ZSBhcyBhbnlbXSkuaW5kZXhPZihhc3QpO1xuXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvcCArIGBbJHtpZHh9XWA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh2YWx1ZSA9PT0gYXN0KSB7XG5cdFx0XHRcdHJldHVybiBwcm9wO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRwcm90ZWN0ZWQgdHJhdmVyc2VBcnJheShub2RlczogdHMuTm9kZUFycmF5PHRzLk5vZGU+LFxuXHRcdGNiOiAoYXN0OiB0cy5Ob2RlLCBwYXRoOiBzdHJpbmdbXSwgcGFyZW50czogdHMuTm9kZVtdLCBpc0xlYWY6IGJvb2xlYW4pID0+IGJvb2xlYW4gfCB2b2lkLFxuXHRcdHByb3BOYW1lID0gJycsIHBhcmVudHM6IHRzLk5vZGVbXSA9IFtdLCBwYXRoRWxzOiBzdHJpbmdbXSA9IFtdKSB7XG5cblx0XHRsZXQgaSA9IDA7XG5cdFx0Zm9yIChjb25zdCBhc3Qgb2Ygbm9kZXMpIHtcblx0XHRcdHRoaXMudHJhdmVyc2UoYXN0LCBjYiwgcHJvcE5hbWUgKyBgWyR7aSsrfV1gLCBwYXJlbnRzLCBwYXRoRWxzKTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3RDaGFyYWN0ZXIge1xuXHRwcm9wZXJ0eU5hbWU/OiBzdHJpbmc7XG5cdHByb3BJbmRleD86IG51bWJlcjtcblx0a2luZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3RRdWVyeSBleHRlbmRzIEFzdENoYXJhY3RlciB7XG5cdHRleHQ/OiBSZWdFeHA7XG59XG5cbmV4cG9ydCBjbGFzcyBRdWVyeSB7XG5cdHF1ZXJ5UGF0aHM6IEFzdENoYXJhY3RlcltdW107XG5cblx0Y29uc3RydWN0b3IocXVlcnk6IHN0cmluZykge1xuXHRcdHRoaXMucXVlcnlQYXRocyA9IHF1ZXJ5LnRyaW0oKS5yZXBsYWNlKC9cXHMqPlxccyovZywgJz4nKS5zcGxpdCgnICcpLm1hcChwYXRocyA9PiBwYXRocy5zcGxpdCgnPicpXG5cdFx0XHQubWFwKHNpbmdsZUFzdERlc2MgPT4gdGhpcy5fcGFyc2VEZXNjKHNpbmdsZUFzdERlc2MpKSk7XG5cdH1cblxuXHRtYXRjaGVzKHBhdGg6IHN0cmluZ1tdKTogYm9vbGVhbiB7XG5cdFx0bGV0IHRlc3RQb3MgPSBwYXRoLmxlbmd0aCAtIDE7XG5cdFx0Y29uc3Qgc3RhcnRUZXN0UG9zID0gdGVzdFBvcztcblx0XHRmb3IgKGNvbnN0IGNvbnNlY3V0aXZlTm9kZXMgb2YgdGhpcy5xdWVyeVBhdGhzLnNsaWNlKDApLnJldmVyc2UoKSkge1xuXHRcdFx0d2hpbGUgKHRydWUpIHtcblx0XHRcdFx0aWYgKHRoaXMubWF0Y2hlc0NvbnNlY3V0aXZlTm9kZXMoY29uc2VjdXRpdmVOb2RlcywgcGF0aCwgdGVzdFBvcykpIHtcblx0XHRcdFx0XHR0ZXN0UG9zIC09IGNvbnNlY3V0aXZlTm9kZXMubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRlc3RQb3MgPT09IHN0YXJ0VGVzdFBvcykge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0ZXN0UG9zLS07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNvbnNlY3V0aXZlTm9kZXMubGVuZ3RoID4gdGVzdFBvcyArIDEpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHByb3RlY3RlZCBfcGFyc2VEZXNjKHNpbmdsZUFzdERlc2M6IHN0cmluZyk6IEFzdFF1ZXJ5IHtcblx0XHRjb25zdCBhc3RDaGFyOiBBc3RRdWVyeSA9IHt9O1xuXHRcdFx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5cdFx0XHRsZXQgbSA9IC9eKD86XFwuKFthLXpBLVowLTlfJF0rKSg/OlxcWyhbMC05XSopXFxdKT8pPyg/OlxcOihbYS16QS1aMC05XyRdKykpPyR8XlxcKiQvLmV4ZWMoc2luZ2xlQXN0RGVzYyk7XG5cdFx0XHRpZiAobSA9PSBudWxsKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBxdWVyeSBzdHJpbmcgXCIke3llbGxvdyhzaW5nbGVBc3REZXNjKX1cImApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1bMV0pIHtcblx0XHRcdFx0YXN0Q2hhci5wcm9wZXJ0eU5hbWUgPSBtWzFdO1xuXHRcdFx0XHRpZiAobVsyXSlcblx0XHRcdFx0XHRhc3RDaGFyLnByb3BJbmRleCA9IHBhcnNlSW50KG1bMl0sIDEwKTtcblx0XHRcdH1cblx0XHRcdGlmIChtWzNdKVxuXHRcdFx0XHRhc3RDaGFyLmtpbmQgPSBtWzNdO1xuXHRcdFx0Ly8gaWYgKG1bNF0pXG5cdFx0XHQvLyBcdGFzdENoYXIudGV4dCA9IG5ldyBSZWdFeHAobVs0XSk7XG5cdFx0XHRyZXR1cm4gYXN0Q2hhcjtcblx0fVxuXG5cdHByaXZhdGUgbWF0Y2hlc0FzdChxdWVyeTogQXN0UXVlcnksIHRhcmdldDogQXN0Q2hhcmFjdGVyKTogYm9vbGVhbiB7XG5cdFx0Zm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocXVlcnkpKSB7XG5cdFx0XHRjb25zdCB2YWx1ZSA9IChxdWVyeSBhcyBhbnkpW2tleV07XG5cdFx0XHRpZiAoXy5pc1JlZ0V4cCh2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCEodmFsdWUgYXMgUmVnRXhwKS50ZXN0KCh0YXJnZXQgYXMgYW55KVtrZXldKSlcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCh0YXJnZXQgYXMgYW55KVtrZXldICE9PSB2YWx1ZSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHByaXZhdGUgbWF0Y2hlc0NvbnNlY3V0aXZlTm9kZXMocXVlcnlOb2RlczogQXN0Q2hhcmFjdGVyW10sIHBhdGg6IHN0cmluZ1tdLCB0ZXN0UG9zOiBudW1iZXIpIHtcblx0XHRpZiAocXVlcnlOb2Rlcy5sZW5ndGggPiB0ZXN0UG9zICsgMSlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRmb3IgKGNvbnN0IHF1ZXJ5IG9mIHF1ZXJ5Tm9kZXMuc2xpY2UoMCkucmV2ZXJzZSgpKSB7XG5cdFx0XHRjb25zdCB0YXJnZXQgPSB0aGlzLl9wYXJzZURlc2MocGF0aFt0ZXN0UG9zLS1dKTtcblx0XHRcdGlmICghdGhpcy5tYXRjaGVzQXN0KHF1ZXJ5LCB0YXJnZXQpKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG4iXX0=
