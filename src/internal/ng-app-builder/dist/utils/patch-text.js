"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert = tslib_1.__importStar(require("assert"));
const util = require("util");
class Replacement {
    constructor(start, end, text) {
        this.start = start;
        this.end = end;
        this.text = text;
        assert.notEqual(text, null, 'replacement text should not be null or undefined');
    }
}
exports.Replacement = Replacement;
function _sortAndRemoveOverlap(replacements, removeOverlap = true, text) {
    replacements.sort(function (a, b) {
        return a.start - b.start;
    });
    if (replacements.length < 2)
        return;
    for (let i = 1, l = replacements.length; i < l;) {
        if (replacements[i].start < replacements[i - 1].end) {
            const prev = replacements[i - 1];
            const curr = replacements[i];
            if (removeOverlap) {
                replacements.splice(i, 1);
                l--;
            }
            else {
                throw new Error(`Overlap replacements: 
				"${text.slice(curr.start, curr.end)}" ${util.inspect(curr)}
				and "${text.slice(prev.start, prev.end)}" ${util.inspect(prev)}`);
            }
        }
        else
            i++;
    }
}
exports._sortAndRemoveOverlap = _sortAndRemoveOverlap;
function _replaceSorted(text, replacements) {
    var offset = 0;
    return replacements.reduce((text, update) => {
        var start = update.start + offset;
        var end = update.end + offset;
        var replacement = update.text != null ? update.text : update.replacement;
        offset += (replacement.length - (end - start));
        return text.slice(0, start) + replacement + text.slice(end);
    }, text);
}
exports._replaceSorted = _replaceSorted;
function replaceCode(text, replacements, removeOverlap = false) {
    _sortAndRemoveOverlap(replacements, removeOverlap, text);
    return _replaceSorted(text, replacements);
}
exports.default = replaceCode;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy91dGlscy9wYXRjaC10ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVEQUFpQztBQUNqQyw2QkFBOEI7QUFpQjlCLE1BQWEsV0FBVztJQUN2QixZQUFtQixLQUFhLEVBQVMsR0FBVyxFQUM1QyxJQUFZO1FBREQsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUFTLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDNUMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNuQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsa0RBQWtELENBQUMsQ0FBQztJQUNqRixDQUFDO0NBQ0Q7QUFMRCxrQ0FLQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLFlBQThCLEVBQUUsYUFBYSxHQUFHLElBQUksRUFBRSxJQUFZO0lBQ3ZHLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUUsQ0FBQztRQUM5QixPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQzFCLE9BQU87SUFDUixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHO1FBQ2hELElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUNwRCxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLGFBQWEsRUFBRTtnQkFDbEIsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLENBQUMsRUFBRSxDQUFDO2FBQ0o7aUJBQU07Z0JBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQztPQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7V0FDbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNsRTtTQUNEOztZQUNBLENBQUMsRUFBRSxDQUFDO0tBQ0w7QUFDRixDQUFDO0FBdEJELHNEQXNCQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxJQUFZLEVBQUUsWUFBOEI7SUFDMUUsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBWSxFQUFFLE1BQXNCLEVBQUUsRUFBRTtRQUNuRSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUNsQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztRQUM5QixJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUN6RSxNQUFNLElBQUksQ0FBQyxXQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3RCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDVixDQUFDO0FBVEQsd0NBU0M7QUFFRCxTQUF3QixXQUFXLENBQUMsSUFBWSxFQUFFLFlBQThCLEVBQUUsYUFBYSxHQUFHLEtBQUs7SUFDdEcscUJBQXFCLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxPQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUhELDhCQUdDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci9kaXN0L3V0aWxzL3BhdGNoLXRleHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vKipcbiAqIEBwYXJhbSAge1t0eXBlXX0gdGV4dFxuICogQHBhcmFtICB7b2JqZWN0fSByZXBsYWNlbWVudHNcbiAqIEBwYXJhbSAge251bWJlcn0gcmVwbGFjZW1lbnRzLnN0YXJ0XG4gKiBAcGFyYW0gIHtudW1iZXJ9IHJlcGxhY2VtZW50cy5lbmRcbiAqIEBwYXJhbSAge3N0cmluZ30gcmVwbGFjZW1lbnRzLnJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICBcdHJlcGxhY2VkIHRleHRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXBsYWNlbWVudEluZiB7XG5cdHN0YXJ0OiBudW1iZXI7XG5cdGVuZDogbnVtYmVyO1xuXHR0ZXh0Pzogc3RyaW5nO1xuXHRyZXBsYWNlbWVudD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFJlcGxhY2VtZW50IGltcGxlbWVudHMgUmVwbGFjZW1lbnRJbmYge1xuXHRjb25zdHJ1Y3RvcihwdWJsaWMgc3RhcnQ6IG51bWJlciwgcHVibGljIGVuZDogbnVtYmVyLFxuXHRcdHB1YmxpYyB0ZXh0OiBzdHJpbmcpIHtcblx0XHRhc3NlcnQubm90RXF1YWwodGV4dCwgbnVsbCwgJ3JlcGxhY2VtZW50IHRleHQgc2hvdWxkIG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfc29ydEFuZFJlbW92ZU92ZXJsYXAocmVwbGFjZW1lbnRzOiBSZXBsYWNlbWVudEluZltdLCByZW1vdmVPdmVybGFwID0gdHJ1ZSwgdGV4dDogc3RyaW5nKSB7XG5cdHJlcGxhY2VtZW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRyZXR1cm4gYS5zdGFydCAtIGIuc3RhcnQ7XG5cdH0pO1xuXG5cdGlmIChyZXBsYWNlbWVudHMubGVuZ3RoIDwgMilcblx0XHRyZXR1cm47XG5cdGZvciAobGV0IGkgPSAxLCBsID0gcmVwbGFjZW1lbnRzLmxlbmd0aDsgaSA8IGw7KSB7XG5cdFx0aWYgKHJlcGxhY2VtZW50c1tpXS5zdGFydCA8IHJlcGxhY2VtZW50c1tpIC0gMV0uZW5kKSB7XG5cdFx0XHRjb25zdCBwcmV2ID0gcmVwbGFjZW1lbnRzW2kgLSAxXTtcblx0XHRcdGNvbnN0IGN1cnIgPSByZXBsYWNlbWVudHNbaV07XG5cdFx0XHRpZiAocmVtb3ZlT3ZlcmxhcCkge1xuXHRcdFx0XHRyZXBsYWNlbWVudHMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRsLS07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE92ZXJsYXAgcmVwbGFjZW1lbnRzOiBcblx0XHRcdFx0XCIke3RleHQuc2xpY2UoY3Vyci5zdGFydCwgY3Vyci5lbmQpfVwiICR7dXRpbC5pbnNwZWN0KGN1cnIpfVxuXHRcdFx0XHRhbmQgXCIke3RleHQuc2xpY2UocHJldi5zdGFydCwgcHJldi5lbmQpfVwiICR7dXRpbC5pbnNwZWN0KHByZXYpfWApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZVxuXHRcdFx0aSsrO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfcmVwbGFjZVNvcnRlZCh0ZXh0OiBzdHJpbmcsIHJlcGxhY2VtZW50czogUmVwbGFjZW1lbnRJbmZbXSkge1xuXHR2YXIgb2Zmc2V0ID0gMDtcblx0cmV0dXJuIHJlcGxhY2VtZW50cy5yZWR1Y2UoKHRleHQ6IHN0cmluZywgdXBkYXRlOiBSZXBsYWNlbWVudEluZikgPT4ge1xuXHRcdHZhciBzdGFydCA9IHVwZGF0ZS5zdGFydCArIG9mZnNldDtcblx0XHR2YXIgZW5kID0gdXBkYXRlLmVuZCArIG9mZnNldDtcblx0XHR2YXIgcmVwbGFjZW1lbnQgPSB1cGRhdGUudGV4dCAhPSBudWxsID8gdXBkYXRlLnRleHQgOiB1cGRhdGUucmVwbGFjZW1lbnQ7XG5cdFx0b2Zmc2V0ICs9IChyZXBsYWNlbWVudCEubGVuZ3RoIC0gKGVuZCAtIHN0YXJ0KSk7XG5cdFx0cmV0dXJuIHRleHQuc2xpY2UoMCwgc3RhcnQpICsgcmVwbGFjZW1lbnQgKyB0ZXh0LnNsaWNlKGVuZCk7XG5cdH0sIHRleHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXBsYWNlQ29kZSh0ZXh0OiBzdHJpbmcsIHJlcGxhY2VtZW50czogUmVwbGFjZW1lbnRJbmZbXSwgcmVtb3ZlT3ZlcmxhcCA9IGZhbHNlKSB7XG5cdF9zb3J0QW5kUmVtb3ZlT3ZlcmxhcChyZXBsYWNlbWVudHMsIHJlbW92ZU92ZXJsYXAsIHRleHQpO1xuXHRyZXR1cm4gX3JlcGxhY2VTb3J0ZWQodGV4dCwgcmVwbGFjZW1lbnRzKTtcbn1cbiJdfQ==
