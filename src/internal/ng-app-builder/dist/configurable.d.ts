/**
```

```
 */
export interface DrcpSetting {
    /**
     * Angular `Router.forChild()` module which will be imported into app.module.ts.
     * In form of `<resolvable-ts-module-path>#<module-name>`
     * e.g. `["@bk/fancy/fancy.module#FancyModule", ...]`
     * > Same as `ngPackage` does.
     */
    ngModule: string[];
    /**
     * Package name which contains an Angular router child module which will be imported into app.module.ts.
     * e.g.
     * `["@bk/console-home"]`
     *
     * In package.json file of @bk/console-home, there should be a property "dr.ngModule" in form of
```
"name": "@bk/console-home",
...
"dr": {
    "ngModule": ["console-home.module#ConsoleHomeModule"],
    ...
}
```
> Both ngModule and ngPackage are meant for same purpose,
to tell app.module.ts to import Angular `Router.forChild()` module
     */
    ngPackage: string[];
    /**
     * ### Do not include specific packages path in tsconfig.json
     * Be default all availabe packages are listed in Angular projects's tsconfig.json file which is runtime generated by
     * DRCP, if there are a lot of packages, Typescript compiliation will become slower and more memory might be consumed.
     *
     * > `availabe packages` means all those package which is resolvable under Node Path `node_modules` including
     * those symlink packages
     *
     */
    excludePackage: Array<string | RegExp>;
    /**
     * Same effect as `excludePackage` does, but instead of **NOT include** entire package path, it only adds individual
     * file path wildcard patterns in **exclude** property of tsconfig.json file.
     * Fine-grained control over which file you want to exlude from Angular Typescript compilation.
     */
    excludePath: string[];
    /**
     * Useful for third-party JS libarary.
     *
     * Angular has a Webpack loader @angular-devkit/build-optimizer/webpack-loader
     * to process all `/\.js$/` files. If you have to import/require any 3rd-party js file in your source
     * code (instead of configure it in angular.json file as global library), this file will also be
     * processed by Angular loader, which is unnecessary and might leads to
     * unexpect JS parsing error. In this case you may add this file path to this property.
     *
     *
     * e.g.
     * 'node_modules/mermaid'
     */
    buildOptimizerExclude: string[];
}
