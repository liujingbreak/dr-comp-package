"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable no-console */
const _ = tslib_1.__importStar(require("lodash"));
const Path = tslib_1.__importStar(require("path"));
// var log = require('log4js').getLogger('gzipSizePlugin');
const gzipSize = require('gzip-size');
var { magenta, cyan } = require('chalk');
var prettyBytes = require('pretty-bytes');
class GzipSize {
    constructor() {
        this.done = false;
    }
    apply(compiler) {
        this.compiler = compiler;
        compiler.hooks.emit.tapPromise('GzipSize', (compilation) => {
            if (this.done)
                return Promise.resolve();
            this.done = true;
            var all = [];
            var maxLenName = _.max(_.map(compilation.assets, (src, file) => file.length));
            _.each(compilation.assets, (source, file) => {
                if (Path.extname(file) === '.map')
                    return;
                all.push(gzipSize(source.source()).then((size) => {
                    let colorFunc;
                    if (size >= 100 * 1024) {
                        colorFunc = magenta;
                    }
                    else {
                        colorFunc = cyan;
                    }
                    return [file, size, colorFunc];
                }));
            });
            return Promise.all(all).then((rawDatas) => {
                rawDatas.sort((item, item2) => {
                    return item2[1] - item[1];
                })
                    .forEach((item) => {
                    item[1] = prettyBytes(item[1]);
                });
                const datas = rawDatas;
                var maxLenSize = _.max(_.map(datas, data => data[1].length));
                var sepLineLen = '(gzipped)'.length + maxLenSize + maxLenName + 10;
                console.log();
                console.log(_.pad(' Gzip size ', sepLineLen, '-'));
                _.each(datas, (data) => {
                    console.log(_.padStart(data[0], maxLenName + 2, ' ') +
                        data[2](_.padStart(data[1], maxLenSize + 2, ' ')) + ' (gzipped)');
                });
                console.log(_.pad('', sepLineLen, '-'));
            })
                .catch((err) => {
                console.log('Failed in GzipSize plugin', err);
            });
        });
    }
}
exports.default = GzipSize;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9wbHVnaW5zL2d6aXAtc2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0Isa0RBQTRCO0FBQzVCLG1EQUE2QjtBQUU3QiwyREFBMkQ7QUFDM0QsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RDLElBQUksRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUxQyxNQUFxQixRQUFRO0lBQTdCO1FBRUUsU0FBSSxHQUFHLEtBQUssQ0FBQztJQWlEZixDQUFDO0lBL0NDLEtBQUssQ0FBQyxRQUFhO1FBQ2pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFnQixFQUFFLEVBQUU7WUFDOUQsSUFBSSxJQUFJLENBQUMsSUFBSTtnQkFDWCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLEdBQUcsR0FBNEIsRUFBRSxDQUFDO1lBQ3RDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFOUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUMxQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssTUFBTTtvQkFDL0IsT0FBTztnQkFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtvQkFDdkQsSUFBSSxTQUFjLENBQUM7b0JBQ25CLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxJQUFJLEVBQUU7d0JBQ3RCLFNBQVMsR0FBRyxPQUFPLENBQUM7cUJBQ3JCO3lCQUFNO3dCQUNMLFNBQVMsR0FBRyxJQUFJLENBQUM7cUJBQ2xCO29CQUNELE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUNqQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBaUMsRUFBRSxFQUFFO2dCQUNqRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBc0IsRUFBRSxLQUF1QixFQUFFLEVBQUU7b0JBQ2hFLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDO3FCQUNELE9BQU8sQ0FBQyxDQUFDLElBQXNCLEVBQUUsRUFBRTtvQkFDbEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTSxLQUFLLEdBQUksUUFBMkMsQ0FBQztnQkFFM0QsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUM3RCxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxHQUFHLFVBQVUsR0FBRyxVQUFVLEdBQUcsRUFBRSxDQUFDO2dCQUNuRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFFbkQsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRTtvQkFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQzt3QkFDbEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztnQkFDdEUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxQyxDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7Z0JBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQW5ERCwyQkFtREMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci1jb3JlL25nLWFwcC1idWlsZGVyL2Rpc3QvcGx1Z2lucy9nemlwLXNpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgKiBhcyBQYXRoIGZyb20gJ3BhdGgnO1xuXG4vLyB2YXIgbG9nID0gcmVxdWlyZSgnbG9nNGpzJykuZ2V0TG9nZ2VyKCdnemlwU2l6ZVBsdWdpbicpO1xuY29uc3QgZ3ppcFNpemUgPSByZXF1aXJlKCdnemlwLXNpemUnKTtcbnZhciB7bWFnZW50YSwgY3lhbn0gPSByZXF1aXJlKCdjaGFsaycpO1xudmFyIHByZXR0eUJ5dGVzID0gcmVxdWlyZSgncHJldHR5LWJ5dGVzJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEd6aXBTaXplIHtcbiAgY29tcGlsZXI6IGFueTtcbiAgZG9uZSA9IGZhbHNlO1xuXG4gIGFwcGx5KGNvbXBpbGVyOiBhbnkpIHtcbiAgICB0aGlzLmNvbXBpbGVyID0gY29tcGlsZXI7XG4gICAgY29tcGlsZXIuaG9va3MuZW1pdC50YXBQcm9taXNlKCdHemlwU2l6ZScsIChjb21waWxhdGlvbjogYW55KSA9PiB7XG4gICAgICBpZiAodGhpcy5kb25lKVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgdmFyIGFsbDogQXJyYXk8UHJvbWlzZUxpa2U8YW55Pj4gPSBbXTtcbiAgICAgIHZhciBtYXhMZW5OYW1lID0gXy5tYXgoXy5tYXAoY29tcGlsYXRpb24uYXNzZXRzLCAoc3JjLCBmaWxlKSA9PiBmaWxlLmxlbmd0aCkpO1xuXG4gICAgICBfLmVhY2goY29tcGlsYXRpb24uYXNzZXRzLCAoc291cmNlLCBmaWxlKSA9PiB7XG4gICAgICAgIGlmIChQYXRoLmV4dG5hbWUoZmlsZSkgPT09ICcubWFwJylcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGFsbC5wdXNoKGd6aXBTaXplKHNvdXJjZS5zb3VyY2UoKSkudGhlbigoc2l6ZTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgbGV0IGNvbG9yRnVuYzogYW55O1xuICAgICAgICAgIGlmIChzaXplID49IDEwMCAqIDEwMjQpIHtcbiAgICAgICAgICAgIGNvbG9yRnVuYyA9IG1hZ2VudGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9yRnVuYyA9IGN5YW47XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbZmlsZSwgc2l6ZSwgY29sb3JGdW5jXTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYWxsKS50aGVuKChyYXdEYXRhczogQXJyYXk8W3N0cmluZywgbnVtYmVyXT4pID0+IHtcbiAgICAgICAgcmF3RGF0YXMuc29ydCgoaXRlbTogW3N0cmluZywgbnVtYmVyXSwgaXRlbTI6IFtzdHJpbmcsIG51bWJlcl0pID0+IHtcbiAgICAgICAgICByZXR1cm4gaXRlbTJbMV0gLSBpdGVtWzFdO1xuICAgICAgICB9KVxuICAgICAgICAuZm9yRWFjaCgoaXRlbTogW3N0cmluZywgbnVtYmVyXSkgPT4ge1xuICAgICAgICAgIGl0ZW1bMV0gPSBwcmV0dHlCeXRlcyhpdGVtWzFdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGRhdGFzID0gKHJhd0RhdGFzIGFzIGFueSkgYXMgQXJyYXk8W3N0cmluZywgc3RyaW5nXT47XG5cbiAgICAgICAgdmFyIG1heExlblNpemUgPSBfLm1heChfLm1hcChkYXRhcywgZGF0YSA9PiBkYXRhWzFdLmxlbmd0aCkpO1xuICAgICAgICB2YXIgc2VwTGluZUxlbiA9ICcoZ3ppcHBlZCknLmxlbmd0aCArIG1heExlblNpemUgKyBtYXhMZW5OYW1lICsgMTA7XG4gICAgICAgIGNvbnNvbGUubG9nKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKF8ucGFkKCcgR3ppcCBzaXplICcsIHNlcExpbmVMZW4sICctJykpO1xuXG4gICAgICAgIF8uZWFjaChkYXRhcywgKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKF8ucGFkU3RhcnQoZGF0YVswXSwgbWF4TGVuTmFtZSArIDIsICcgJykgK1xuICAgICAgICAgICAgZGF0YVsyXShfLnBhZFN0YXJ0KGRhdGFbMV0sIG1heExlblNpemUgKyAyLCAnICcpKSArICcgKGd6aXBwZWQpJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhfLnBhZCgnJywgc2VwTGluZUxlbiwgJy0nKSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkIGluIEd6aXBTaXplIHBsdWdpbicsIGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19
