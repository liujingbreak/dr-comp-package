"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* tslint:disable no-console */
const _ = tslib_1.__importStar(require("lodash"));
const Path = tslib_1.__importStar(require("path"));
// var log = require('log4js').getLogger('gzipSizePlugin');
const gzipSize = require('gzip-size');
var { magenta, cyan } = require('chalk');
var prettyBytes = require('pretty-bytes');
class GzipSize {
    constructor() {
        this.done = false;
    }
    apply(compiler) {
        this.compiler = compiler;
        compiler.hooks.emit.tapPromise('GzipSize', (compilation) => {
            if (this.done)
                return Promise.resolve();
            this.done = true;
            var all = [];
            var maxLenName = _.max(_.map(compilation.assets, (src, file) => file.length));
            if (maxLenName == null)
                return Promise.resolve();
            _.each(compilation.assets, (source, file) => {
                if (Path.extname(file) === '.map')
                    return;
                all.push(gzipSize(source.source()).then((size) => {
                    let colorFunc;
                    if (size >= 100 * 1024) {
                        colorFunc = magenta;
                    }
                    else {
                        colorFunc = cyan;
                    }
                    return [file, size, colorFunc];
                }));
            });
            return Promise.all(all).then((rawDatas) => {
                rawDatas.sort((item, item2) => {
                    return item2[1] - item[1];
                })
                    .forEach((item) => {
                    item[1] = prettyBytes(item[1]);
                });
                const datas = rawDatas;
                var maxLenSize = _.max(_.map(datas, data => data[1].length));
                if (maxLenSize == null)
                    maxLenSize = 0;
                var sepLineLen = '(gzipped)'.length + maxLenSize + maxLenName + 10;
                console.log();
                console.log(_.pad(' Gzip size ', sepLineLen, '-'));
                _.each(datas, (data) => {
                    console.log(_.padStart(data[0], maxLenName + 2, ' ') +
                        data[2](_.padStart(data[1], maxLenSize + 2, ' ')) + ' (gzipped)');
                });
                console.log(_.pad('', sepLineLen, '-'));
            })
                .catch((err) => {
                console.log('Failed in GzipSize plugin', err);
            });
        });
    }
}
exports.default = GzipSize;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9wbHVnaW5zL2d6aXAtc2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0Isa0RBQTRCO0FBQzVCLG1EQUE2QjtBQUU3QiwyREFBMkQ7QUFDM0QsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3RDLElBQUksRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUxQyxNQUFxQixRQUFRO0lBQTdCO1FBRUMsU0FBSSxHQUFHLEtBQUssQ0FBQztJQXVEZCxDQUFDO0lBckRBLEtBQUssQ0FBQyxRQUFhO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFnQixFQUFFLEVBQUU7WUFDL0QsSUFBSSxJQUFJLENBQUMsSUFBSTtnQkFDWixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLEdBQUcsR0FBNEIsRUFBRSxDQUFDO1lBQ3RDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDOUUsSUFBSSxVQUFVLElBQUksSUFBSTtnQkFDckIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFMUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFF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ZGVyL2Rpc3QvcGx1Z2lucy9nemlwLXNpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSBuby1jb25zb2xlICovXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgKiBhcyBQYXRoIGZyb20gJ3BhdGgnO1xuXG4vLyB2YXIgbG9nID0gcmVxdWlyZSgnbG9nNGpzJykuZ2V0TG9nZ2VyKCdnemlwU2l6ZVBsdWdpbicpO1xuY29uc3QgZ3ppcFNpemUgPSByZXF1aXJlKCdnemlwLXNpemUnKTtcbnZhciB7bWFnZW50YSwgY3lhbn0gPSByZXF1aXJlKCdjaGFsaycpO1xudmFyIHByZXR0eUJ5dGVzID0gcmVxdWlyZSgncHJldHR5LWJ5dGVzJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEd6aXBTaXplIHtcblx0Y29tcGlsZXI6IGFueTtcblx0ZG9uZSA9IGZhbHNlO1xuXG5cdGFwcGx5KGNvbXBpbGVyOiBhbnkpIHtcblx0XHR0aGlzLmNvbXBpbGVyID0gY29tcGlsZXI7XG5cdFx0Y29tcGlsZXIuaG9va3MuZW1pdC50YXBQcm9taXNlKCdHemlwU2l6ZScsIChjb21waWxhdGlvbjogYW55KSA9PiB7XG5cdFx0XHRpZiAodGhpcy5kb25lKVxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0XHR0aGlzLmRvbmUgPSB0cnVlO1xuXHRcdFx0dmFyIGFsbDogQXJyYXk8UHJvbWlzZUxpa2U8YW55Pj4gPSBbXTtcblx0XHRcdHZhciBtYXhMZW5OYW1lID0gXy5tYXgoXy5tYXAoY29tcGlsYXRpb24uYXNzZXRzLCAoc3JjLCBmaWxlKSA9PiBmaWxlLmxlbmd0aCkpO1xuXHRcdFx0aWYgKG1heExlbk5hbWUgPT0gbnVsbClcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXG5cdFx0XHRfLmVhY2goY29tcGlsYXRpb24uYXNzZXRzLCAoc291cmNlLCBmaWxlKSA9PiB7XG5cdFx0XHRcdGlmIChQYXRoLmV4dG5hbWUoZmlsZSkgPT09ICcubWFwJylcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdGFsbC5wdXNoKGd6aXBTaXplKHNvdXJjZS5zb3VyY2UoKSkudGhlbigoc2l6ZTogbnVtYmVyKSA9PiB7XG5cdFx0XHRcdFx0bGV0IGNvbG9yRnVuYzogYW55O1xuXHRcdFx0XHRcdGlmIChzaXplID49IDEwMCAqIDEwMjQpIHtcblx0XHRcdFx0XHRcdGNvbG9yRnVuYyA9IG1hZ2VudGE7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbG9yRnVuYyA9IGN5YW47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBbZmlsZSwgc2l6ZSwgY29sb3JGdW5jXTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoYWxsKS50aGVuKChyYXdEYXRhczogQXJyYXk8W3N0cmluZywgbnVtYmVyXT4pID0+IHtcblx0XHRcdFx0cmF3RGF0YXMuc29ydCgoaXRlbTogW3N0cmluZywgbnVtYmVyXSwgaXRlbTI6IFtzdHJpbmcsIG51bWJlcl0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaXRlbTJbMV0gLSBpdGVtWzFdO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuZm9yRWFjaCgoaXRlbTogW3N0cmluZywgbnVtYmVyXSkgPT4ge1xuXHRcdFx0XHRcdGl0ZW1bMV0gPSBwcmV0dHlCeXRlcyhpdGVtWzFdKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnN0IGRhdGFzID0gKHJhd0RhdGFzIGFzIGFueSkgYXMgQXJyYXk8W3N0cmluZywgc3RyaW5nXT47XG5cblx0XHRcdFx0dmFyIG1heExlblNpemUgPSBfLm1heChfLm1hcChkYXRhcywgZGF0YSA9PiBkYXRhWzFdLmxlbmd0aCkpO1xuXG5cdFx0XHRcdGlmIChtYXhMZW5TaXplID09IG51bGwpXG5cdFx0XHRcdFx0bWF4TGVuU2l6ZSA9IDA7XG5cblx0XHRcdFx0dmFyIHNlcExpbmVMZW4gPSAnKGd6aXBwZWQpJy5sZW5ndGggKyBtYXhMZW5TaXplICsgbWF4TGVuTmFtZSEgKyAxMDtcblx0XHRcdFx0Y29uc29sZS5sb2coKTtcblx0XHRcdFx0Y29uc29sZS5sb2coXy5wYWQoJyBHemlwIHNpemUgJywgc2VwTGluZUxlbiwgJy0nKSk7XG5cblx0XHRcdFx0Xy5lYWNoKGRhdGFzLCAoZGF0YTogYW55KSA9PiB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXy5wYWRTdGFydChkYXRhWzBdLCBtYXhMZW5OYW1lISArIDIsICcgJykgK1xuXHRcdFx0XHRcdFx0ZGF0YVsyXShfLnBhZFN0YXJ0KGRhdGFbMV0sIG1heExlblNpemUhICsgMiwgJyAnKSkgKyAnIChnemlwcGVkKScpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0Y29uc29sZS5sb2coXy5wYWQoJycsIHNlcExpbmVMZW4sICctJykpO1xuXHRcdFx0fSlcblx0XHRcdC5jYXRjaCgoZXJyOiBhbnkpID0+IHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0ZhaWxlZCBpbiBHemlwU2l6ZSBwbHVnaW4nLCBlcnIpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==
