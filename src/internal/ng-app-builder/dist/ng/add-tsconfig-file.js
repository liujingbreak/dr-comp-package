"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable: no-console
/**
 * This file will run in worker thread
 */
const worker_threads_1 = require("worker_threads");
const ts_dep_1 = tslib_1.__importDefault(require("../ts-dep"));
const ts_compiler_1 = require("dr-comp-package/wfh/dist/ts-compiler");
const __api_1 = tslib_1.__importDefault(require("__api"));
const typescript_1 = require("typescript");
const path_1 = tslib_1.__importDefault(require("path"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
// import * as util from 'util';
// const log = require('log4js').getLogger('add-tsconfig-file');
// initCli(browserOptions)
// .then(drcpConfig => {
//   return injectorSetup(pkInfo, drcpConfig, browserOptions);
// });
function addSourceFiles(compilerOptions, entryFiles, tsconfigFile, fileReplacements, reportDir) {
    const projDir = path_1.default.dirname(tsconfigFile);
    const g = new ts_dep_1.default(ts_compiler_1.jsonToCompilerOptions(compilerOptions), fileReplacements, file => {
        const content = typescript_1.sys.readFile(file, 'utf8');
        return __api_1.default.browserInjector.injectToFile(file, content || '');
    });
    worker_threads_1.parentPort.postMessage({ log: 'TS entris:\n' + entryFiles.map(file => '  ' + chalk_1.default.cyan(file)).join('\n') });
    for (const entryFile of entryFiles) {
        g.walkForDependencies(path_1.default.resolve(projDir, entryFile));
    }
    worker_threads_1.parentPort.postMessage({ log: `${chalk_1.default.redBright(g.requestMap.size + '')} TS file included` });
    g.report(path_1.default.resolve(reportDir, 'deps.txt'))
        .then(() => {
        worker_threads_1.parentPort.postMessage({ log: 'All TS file names are listed in:\n  ' + chalk_1.default.blueBright(path_1.default.resolve(reportDir, 'deps.txt')) });
    })
        .catch(ex => {
        worker_threads_1.parentPort.postMessage({ log: ex.toString() });
    });
    // I must put all walked ts dependencies in Tsconfig json file, since some are package file located in
    // node_modules, by default Angular or tsc will exclude them
    return Array.from(g.requestMap.keys())
        .map(file => path_1.default.relative(projDir, file).replace(/\\/g, '/'));
}
exports.addSourceFiles = addSourceFiles;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9hZGQtdHNjb25maWctZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBNkI7QUFDN0I7O0dBRUc7QUFDSCxtREFBMEM7QUFDMUMsK0RBQThCO0FBQzlCLHNFQUEyRTtBQUMzRSwwREFBd0I7QUFDeEIsMkNBQWlDO0FBQ2pDLHdEQUF3QjtBQUN4QiwwREFBMEI7QUFFMUIsZ0NBQWdDO0FBQ2hDLGdFQUFnRTtBQUU5RCwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLDhEQUE4RDtBQUM5RCxNQUFNO0FBRVIsU0FBZ0IsY0FBYyxDQUFDLGVBQW9CLEVBQUUsVUFBb0IsRUFBRSxZQUFvQixFQUM3RixnQkFBMkQsRUFBRSxTQUFpQjtJQUM5RSxNQUFNLE9BQU8sR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxHQUFHLElBQUksZ0JBQUssQ0FBQyxtQ0FBcUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxnQkFBZ0IsRUFDMUUsSUFBSSxDQUFDLEVBQUU7UUFDTCxNQUFNLE9BQU8sR0FBRyxnQkFBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsT0FBTyxlQUFHLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUwsMkJBQVcsQ0FBQyxXQUFXLENBQUMsRUFBQyxHQUFHLEVBQUUsY0FBYyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUM7SUFFNUcsS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLEVBQUU7UUFDbEMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFDRCwyQkFBVyxDQUFDLFdBQVcsQ0FBQyxFQUFDLEdBQUcsRUFBRSxHQUFHLGVBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFDLENBQUMsQ0FBQztJQUU5RixDQUFDLENBQUMsTUFBTSxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzVDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDVCwyQkFBVyxDQUFDLFdBQVcsQ0FBQyxFQUFDLEdBQUcsRUFBRSxzQ0FBc0MsR0FBRyxlQUFLLENBQUMsVUFBVSxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ2pJLENBQUMsQ0FBQztTQUNELEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNWLDJCQUFXLENBQUMsV0FBVyxDQUFDLEVBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFDSCxzR0FBc0c7SUFDdEcsNERBQTREO0lBQzVELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBM0JELHdDQTJCQyIsImZpbGUiOiJub2RlX21vZHVsZXMvQGRyLWNvcmUvbmctYXBwLWJ1aWxkZXIvZGlzdC9uZy9hZGQtdHNjb25maWctZmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiBuby1jb25zb2xlXG4vKipcbiAqIFRoaXMgZmlsZSB3aWxsIHJ1biBpbiB3b3JrZXIgdGhyZWFkXG4gKi9cbmltcG9ydCB7cGFyZW50UG9ydH0gZnJvbSAnd29ya2VyX3RocmVhZHMnO1xuaW1wb3J0IEdyYXBoIGZyb20gJy4uL3RzLWRlcCc7XG5pbXBvcnQge2pzb25Ub0NvbXBpbGVyT3B0aW9uc30gZnJvbSAnZHItY29tcC1wYWNrYWdlL3dmaC9kaXN0L3RzLWNvbXBpbGVyJztcbmltcG9ydCBhcGkgZnJvbSAnX19hcGknO1xuaW1wb3J0IHsgc3lzIH0gZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgeyBBbmd1bGFyQnVpbGRlck9wdGlvbnMgfSBmcm9tICcuL2NvbW1vbic7XG4vLyBpbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnO1xuLy8gY29uc3QgbG9nID0gcmVxdWlyZSgnbG9nNGpzJykuZ2V0TG9nZ2VyKCdhZGQtdHNjb25maWctZmlsZScpO1xuXG4gIC8vIGluaXRDbGkoYnJvd3Nlck9wdGlvbnMpXG4gIC8vIC50aGVuKGRyY3BDb25maWcgPT4ge1xuICAvLyAgIHJldHVybiBpbmplY3RvclNldHVwKHBrSW5mbywgZHJjcENvbmZpZywgYnJvd3Nlck9wdGlvbnMpO1xuICAvLyB9KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFNvdXJjZUZpbGVzKGNvbXBpbGVyT3B0aW9uczogYW55LCBlbnRyeUZpbGVzOiBzdHJpbmdbXSwgdHNjb25maWdGaWxlOiBzdHJpbmcsXG4gIGZpbGVSZXBsYWNlbWVudHM6IEFuZ3VsYXJCdWlsZGVyT3B0aW9uc1snZmlsZVJlcGxhY2VtZW50cyddLCByZXBvcnREaXI6IHN0cmluZykge1xuICBjb25zdCBwcm9qRGlyID0gUGF0aC5kaXJuYW1lKHRzY29uZmlnRmlsZSk7XG4gIGNvbnN0IGcgPSBuZXcgR3JhcGgoanNvblRvQ29tcGlsZXJPcHRpb25zKGNvbXBpbGVyT3B0aW9ucyksIGZpbGVSZXBsYWNlbWVudHMsXG4gICAgZmlsZSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gc3lzLnJlYWRGaWxlKGZpbGUsICd1dGY4Jyk7XG4gICAgICByZXR1cm4gYXBpLmJyb3dzZXJJbmplY3Rvci5pbmplY3RUb0ZpbGUoZmlsZSwgY29udGVudCB8fCAnJyk7XG4gICAgfSk7XG5cbiAgcGFyZW50UG9ydCEucG9zdE1lc3NhZ2Uoe2xvZzogJ1RTIGVudHJpczpcXG4nICsgZW50cnlGaWxlcy5tYXAoZmlsZSA9PiAnICAnICsgY2hhbGsuY3lhbihmaWxlKSkuam9pbignXFxuJyl9KTtcblxuICBmb3IgKGNvbnN0IGVudHJ5RmlsZSBvZiBlbnRyeUZpbGVzKSB7XG4gICAgZy53YWxrRm9yRGVwZW5kZW5jaWVzKFBhdGgucmVzb2x2ZShwcm9qRGlyLCBlbnRyeUZpbGUpKTtcbiAgfVxuICBwYXJlbnRQb3J0IS5wb3N0TWVzc2FnZSh7bG9nOiBgJHtjaGFsay5yZWRCcmlnaHQoZy5yZXF1ZXN0TWFwLnNpemUgKyAnJyl9IFRTIGZpbGUgaW5jbHVkZWRgfSk7XG5cbiAgZy5yZXBvcnQoUGF0aC5yZXNvbHZlKHJlcG9ydERpciwgJ2RlcHMudHh0JykpXG4gIC50aGVuKCgpID0+IHtcbiAgICBwYXJlbnRQb3J0IS5wb3N0TWVzc2FnZSh7bG9nOiAnQWxsIFRTIGZpbGUgbmFtZXMgYXJlIGxpc3RlZCBpbjpcXG4gICcgKyBjaGFsay5ibHVlQnJpZ2h0KFBhdGgucmVzb2x2ZShyZXBvcnREaXIsICdkZXBzLnR4dCcpKX0pO1xuICB9KVxuICAuY2F0Y2goZXggPT4ge1xuICAgIHBhcmVudFBvcnQhLnBvc3RNZXNzYWdlKHtsb2c6IGV4LnRvU3RyaW5nKCl9KTtcbiAgfSk7XG4gIC8vIEkgbXVzdCBwdXQgYWxsIHdhbGtlZCB0cyBkZXBlbmRlbmNpZXMgaW4gVHNjb25maWcganNvbiBmaWxlLCBzaW5jZSBzb21lIGFyZSBwYWNrYWdlIGZpbGUgbG9jYXRlZCBpblxuICAvLyBub2RlX21vZHVsZXMsIGJ5IGRlZmF1bHQgQW5ndWxhciBvciB0c2Mgd2lsbCBleGNsdWRlIHRoZW1cbiAgcmV0dXJuIEFycmF5LmZyb20oZy5yZXF1ZXN0TWFwLmtleXMoKSlcbiAgICAubWFwKGZpbGUgPT4gUGF0aC5yZWxhdGl2ZShwcm9qRGlyLCBmaWxlKS5yZXBsYWNlKC9cXFxcL2csICcvJykpO1xufVxuXG5cblxuXG5cbiJdfQ==
