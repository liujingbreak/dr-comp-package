"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/**
 * This file will run in worker thread
 */
const ts_dep_1 = tslib_1.__importDefault(require("../ts-dep"));
const ts_compiler_1 = require("dr-comp-package/wfh/dist/ts-compiler");
const __api_1 = tslib_1.__importDefault(require("__api"));
const typescript_1 = require("typescript");
const path_1 = tslib_1.__importDefault(require("path"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log = require('log4js').getLogger('add-tsconfig-file');
// initCli(browserOptions)
// .then(drcpConfig => {
//   return injectorSetup(pkInfo, drcpConfig, browserOptions);
// });
function addSourceFiles(compilerOptions, entryFiles, tsconfigFile, fileReplacements, reportFile) {
    const projDir = path_1.default.dirname(tsconfigFile);
    const g = new ts_dep_1.default(ts_compiler_1.jsonToCompilerOptions(compilerOptions), fileReplacements, file => {
        const content = typescript_1.sys.readFile(file, 'utf8');
        return __api_1.default.browserInjector.injectToFile(file, content || '');
    });
    log.info('TS entris:\n' + entryFiles.map(file => '  ' + chalk_1.default.cyan(file)).join('\n'));
    for (const entryFile of entryFiles) {
        g.walkForDependencies(path_1.default.resolve(projDir, entryFile));
    }
    log.info(`${chalk_1.default.redBright(g.requestMap.size + '')} TS file included`);
    g.report(reportFile)
        .then(() => {
        log.info('All TS file names are listed in:\n  ' + chalk_1.default.blueBright(reportFile));
    });
    // I must put all walked ts dependencies in Tsconfig json file, since some are package file located in
    // node_modules, by default Angular or tsc will exclude them
    return Array.from(g.requestMap.keys())
        .map(file => path_1.default.relative(projDir, file).replace(/\\/g, '/'));
}
exports.addSourceFiles = addSourceFiles;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9hZGQtdHNjb25maWctZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILCtEQUE4QjtBQUM5QixzRUFBMkU7QUFDM0UsMERBQXdCO0FBQ3hCLDJDQUFpQztBQUNqQyx3REFBd0I7QUFDeEIsMERBQTBCO0FBRTFCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUUzRCwwQkFBMEI7QUFDMUIsd0JBQXdCO0FBQ3hCLDhEQUE4RDtBQUM5RCxNQUFNO0FBRVIsU0FBZ0IsY0FBYyxDQUFDLGVBQW9CLEVBQUUsVUFBb0IsRUFBRSxZQUFvQixFQUM3RixnQkFBMkQsRUFBRSxVQUFrQjtJQUUvRSxNQUFNLE9BQU8sR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxHQUFHLElBQUksZ0JBQUssQ0FBQyxtQ0FBcUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxnQkFBZ0IsRUFDMUUsSUFBSSxDQUFDLEVBQUU7UUFDTCxNQUFNLE9BQU8sR0FBRyxnQkFBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0MsT0FBTyxlQUFHLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDO0lBRUwsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxlQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFdEYsS0FBSyxNQUFNLFNBQVMsSUFBSSxVQUFVLEVBQUU7UUFDbEMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsZUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUV4RSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztTQUNuQixJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ1QsR0FBRyxDQUFDLElBQUksQ0FBQyxzQ0FBc0MsR0FBRyxlQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQyxDQUFDLENBQUM7SUFDSCxzR0FBc0c7SUFDdEcsNERBQTREO0lBQzVELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ25DLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBekJELHdDQXlCQyIsImZpbGUiOiJub2RlX21vZHVsZXMvQGRyLWNvcmUvbmctYXBwLWJ1aWxkZXIvZGlzdC9uZy9hZGQtdHNjb25maWctZmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmaWxlIHdpbGwgcnVuIGluIHdvcmtlciB0aHJlYWRcbiAqL1xuaW1wb3J0IEdyYXBoIGZyb20gJy4uL3RzLWRlcCc7XG5pbXBvcnQge2pzb25Ub0NvbXBpbGVyT3B0aW9uc30gZnJvbSAnZHItY29tcC1wYWNrYWdlL3dmaC9kaXN0L3RzLWNvbXBpbGVyJztcbmltcG9ydCBhcGkgZnJvbSAnX19hcGknO1xuaW1wb3J0IHsgc3lzIH0gZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgeyBBbmd1bGFyQnVpbGRlck9wdGlvbnMgfSBmcm9tICcuL2NvbW1vbic7XG5jb25zdCBsb2cgPSByZXF1aXJlKCdsb2c0anMnKS5nZXRMb2dnZXIoJ2FkZC10c2NvbmZpZy1maWxlJyk7XG5cbiAgLy8gaW5pdENsaShicm93c2VyT3B0aW9ucylcbiAgLy8gLnRoZW4oZHJjcENvbmZpZyA9PiB7XG4gIC8vICAgcmV0dXJuIGluamVjdG9yU2V0dXAocGtJbmZvLCBkcmNwQ29uZmlnLCBicm93c2VyT3B0aW9ucyk7XG4gIC8vIH0pO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkU291cmNlRmlsZXMoY29tcGlsZXJPcHRpb25zOiBhbnksIGVudHJ5RmlsZXM6IHN0cmluZ1tdLCB0c2NvbmZpZ0ZpbGU6IHN0cmluZyxcbiAgZmlsZVJlcGxhY2VtZW50czogQW5ndWxhckJ1aWxkZXJPcHRpb25zWydmaWxlUmVwbGFjZW1lbnRzJ10sIHJlcG9ydEZpbGU6IHN0cmluZyk6IHN0cmluZ1tdIHtcblxuICBjb25zdCBwcm9qRGlyID0gUGF0aC5kaXJuYW1lKHRzY29uZmlnRmlsZSk7XG4gIGNvbnN0IGcgPSBuZXcgR3JhcGgoanNvblRvQ29tcGlsZXJPcHRpb25zKGNvbXBpbGVyT3B0aW9ucyksIGZpbGVSZXBsYWNlbWVudHMsXG4gICAgZmlsZSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gc3lzLnJlYWRGaWxlKGZpbGUsICd1dGY4Jyk7XG4gICAgICByZXR1cm4gYXBpLmJyb3dzZXJJbmplY3Rvci5pbmplY3RUb0ZpbGUoZmlsZSwgY29udGVudCB8fCAnJyk7XG4gICAgfSk7XG5cbiAgbG9nLmluZm8oJ1RTIGVudHJpczpcXG4nICsgZW50cnlGaWxlcy5tYXAoZmlsZSA9PiAnICAnICsgY2hhbGsuY3lhbihmaWxlKSkuam9pbignXFxuJykpO1xuXG4gIGZvciAoY29uc3QgZW50cnlGaWxlIG9mIGVudHJ5RmlsZXMpIHtcbiAgICBnLndhbGtGb3JEZXBlbmRlbmNpZXMoUGF0aC5yZXNvbHZlKHByb2pEaXIsIGVudHJ5RmlsZSkpO1xuICB9XG4gIGxvZy5pbmZvKGAke2NoYWxrLnJlZEJyaWdodChnLnJlcXVlc3RNYXAuc2l6ZSArICcnKX0gVFMgZmlsZSBpbmNsdWRlZGApO1xuXG4gIGcucmVwb3J0KHJlcG9ydEZpbGUpXG4gIC50aGVuKCgpID0+IHtcbiAgICBsb2cuaW5mbygnQWxsIFRTIGZpbGUgbmFtZXMgYXJlIGxpc3RlZCBpbjpcXG4gICcgKyBjaGFsay5ibHVlQnJpZ2h0KHJlcG9ydEZpbGUpKTtcbiAgfSk7XG4gIC8vIEkgbXVzdCBwdXQgYWxsIHdhbGtlZCB0cyBkZXBlbmRlbmNpZXMgaW4gVHNjb25maWcganNvbiBmaWxlLCBzaW5jZSBzb21lIGFyZSBwYWNrYWdlIGZpbGUgbG9jYXRlZCBpblxuICAvLyBub2RlX21vZHVsZXMsIGJ5IGRlZmF1bHQgQW5ndWxhciBvciB0c2Mgd2lsbCBleGNsdWRlIHRoZW1cbiAgcmV0dXJuIEFycmF5LmZyb20oZy5yZXF1ZXN0TWFwLmtleXMoKSlcbiAgICAubWFwKGZpbGUgPT4gUGF0aC5yZWxhdGl2ZShwcm9qRGlyLCBmaWxlKS5yZXBsYWNlKC9cXFxcL2csICcvJykpO1xufVxuXG5cblxuXG5cbiJdfQ==
