"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ts_dep_1 = tslib_1.__importDefault(require("../ts-dep"));
const ts_compiler_1 = require("dr-comp-package/wfh/dist/ts-compiler");
const __api_1 = tslib_1.__importDefault(require("__api"));
const typescript_1 = require("typescript");
const path_1 = tslib_1.__importDefault(require("path"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const log = require('log4js').getLogger('add-tsconfig-file');
function addSourceFiles(compilerOptions, entryFiles, tsconfigFile, fileReplacements) {
    const projDir = path_1.default.dirname(tsconfigFile);
    const g = new ts_dep_1.default(ts_compiler_1.jsonToCompilerOptions(compilerOptions), fileReplacements, file => {
        const content = typescript_1.sys.readFile(file, 'utf8');
        return __api_1.default.browserInjector.injectToFile(file, content || '');
    });
    log.info('TS entris:\n' + entryFiles.map(file => '  ' + chalk_1.default.cyan(file)).join('\n'));
    for (const entryFile of entryFiles) {
        g.walkForDependencies(path_1.default.resolve(projDir, entryFile));
    }
    log.info(`${chalk_1.default.redBright(g.requestMap.size + '')} TS file included`);
    const logFile = __api_1.default.config.resolve('destDir', 'ng-app-builder.report', 'ts-deps.txt');
    g.report(logFile)
        .then(() => {
        log.info('All TS file names are listed in:\n  ' + chalk_1.default.blueBright(logFile));
    });
    // I must put all walked ts dependencies in Tsconfig json file, since some are package file located in
    // node_modules, by default Angular or tsc will exclude them
    return Array.from(g.requestMap.keys())
        .map(file => path_1.default.relative(projDir, file).replace(/\\/g, '/'));
}
exports.addSourceFiles = addSourceFiles;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9hZGQtdHNjb25maWctZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrREFBOEI7QUFDOUIsc0VBQTJFO0FBQzNFLDBEQUF3QjtBQUN4QiwyQ0FBaUM7QUFFakMsd0RBQXdCO0FBQ3hCLDBEQUEwQjtBQUUxQixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFHN0QsU0FBZ0IsY0FBYyxDQUFDLGVBQW9CLEVBQUUsVUFBb0IsRUFBRSxZQUFvQixFQUM3RixnQkFBMkQ7SUFFM0QsTUFBTSxPQUFPLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsR0FBRyxJQUFJLGdCQUFLLENBQUMsbUNBQXFCLENBQUMsZUFBZSxDQUFDLEVBQUUsZ0JBQWdCLEVBQzFFLElBQUksQ0FBQyxFQUFFO1FBQ0wsTUFBTSxPQUFPLEdBQUcsZ0JBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE9BQU8sZUFBRyxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVMLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXRGLEtBQUssTUFBTSxTQUFTLElBQUksVUFBVSxFQUFFO1FBQ2xDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLGVBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFFeEUsTUFBTSxPQUFPLEdBQUcsZUFBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3RGLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1NBQ2hCLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxHQUFHLGVBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDLENBQUMsQ0FBQztJQUNILHNHQUFzRztJQUN0Ryw0REFBNEQ7SUFDNUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUExQkQsd0NBMEJDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci9kaXN0L25nL2FkZC10c2NvbmZpZy1maWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdyYXBoIGZyb20gJy4uL3RzLWRlcCc7XG5pbXBvcnQge2pzb25Ub0NvbXBpbGVyT3B0aW9uc30gZnJvbSAnZHItY29tcC1wYWNrYWdlL3dmaC9kaXN0L3RzLWNvbXBpbGVyJztcbmltcG9ydCBhcGkgZnJvbSAnX19hcGknO1xuaW1wb3J0IHsgc3lzIH0gZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBBbmd1bGFyQnVpbGRlck9wdGlvbnMgfSBmcm9tICcuL2NvbW1vbic7XG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5cbmNvbnN0IGxvZyA9IHJlcXVpcmUoJ2xvZzRqcycpLmdldExvZ2dlcignYWRkLXRzY29uZmlnLWZpbGUnKTtcblxuXG5leHBvcnQgZnVuY3Rpb24gYWRkU291cmNlRmlsZXMoY29tcGlsZXJPcHRpb25zOiBhbnksIGVudHJ5RmlsZXM6IHN0cmluZ1tdLCB0c2NvbmZpZ0ZpbGU6IHN0cmluZyxcbiAgZmlsZVJlcGxhY2VtZW50czogQW5ndWxhckJ1aWxkZXJPcHRpb25zWydmaWxlUmVwbGFjZW1lbnRzJ10pOiBzdHJpbmdbXSB7XG5cbiAgY29uc3QgcHJvakRpciA9IFBhdGguZGlybmFtZSh0c2NvbmZpZ0ZpbGUpO1xuICBjb25zdCBnID0gbmV3IEdyYXBoKGpzb25Ub0NvbXBpbGVyT3B0aW9ucyhjb21waWxlck9wdGlvbnMpLCBmaWxlUmVwbGFjZW1lbnRzLFxuICAgIGZpbGUgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IHN5cy5yZWFkRmlsZShmaWxlLCAndXRmOCcpO1xuICAgICAgcmV0dXJuIGFwaS5icm93c2VySW5qZWN0b3IuaW5qZWN0VG9GaWxlKGZpbGUsIGNvbnRlbnQgfHwgJycpO1xuICAgIH0pO1xuXG4gIGxvZy5pbmZvKCdUUyBlbnRyaXM6XFxuJyArIGVudHJ5RmlsZXMubWFwKGZpbGUgPT4gJyAgJyArIGNoYWxrLmN5YW4oZmlsZSkpLmpvaW4oJ1xcbicpKTtcblxuICBmb3IgKGNvbnN0IGVudHJ5RmlsZSBvZiBlbnRyeUZpbGVzKSB7XG4gICAgZy53YWxrRm9yRGVwZW5kZW5jaWVzKFBhdGgucmVzb2x2ZShwcm9qRGlyLCBlbnRyeUZpbGUpKTtcbiAgfVxuICBsb2cuaW5mbyhgJHtjaGFsay5yZWRCcmlnaHQoZy5yZXF1ZXN0TWFwLnNpemUgKyAnJyl9IFRTIGZpbGUgaW5jbHVkZWRgKTtcblxuICBjb25zdCBsb2dGaWxlID0gYXBpLmNvbmZpZy5yZXNvbHZlKCdkZXN0RGlyJywgJ25nLWFwcC1idWlsZGVyLnJlcG9ydCcsICd0cy1kZXBzLnR4dCcpO1xuICBnLnJlcG9ydChsb2dGaWxlKVxuICAudGhlbigoKSA9PiB7XG4gICAgbG9nLmluZm8oJ0FsbCBUUyBmaWxlIG5hbWVzIGFyZSBsaXN0ZWQgaW46XFxuICAnICsgY2hhbGsuYmx1ZUJyaWdodChsb2dGaWxlKSk7XG4gIH0pO1xuICAvLyBJIG11c3QgcHV0IGFsbCB3YWxrZWQgdHMgZGVwZW5kZW5jaWVzIGluIFRzY29uZmlnIGpzb24gZmlsZSwgc2luY2Ugc29tZSBhcmUgcGFja2FnZSBmaWxlIGxvY2F0ZWQgaW5cbiAgLy8gbm9kZV9tb2R1bGVzLCBieSBkZWZhdWx0IEFuZ3VsYXIgb3IgdHNjIHdpbGwgZXhjbHVkZSB0aGVtXG4gIHJldHVybiBBcnJheS5mcm9tKGcucmVxdWVzdE1hcC5rZXlzKCkpXG4gICAgLm1hcChmaWxlID0+IFBhdGgucmVsYXRpdmUocHJvakRpciwgZmlsZSkucmVwbGFjZSgvXFxcXC9nLCAnLycpKTtcbn1cblxuIl19
