"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectorSetup = void 0;
const url_1 = require("url");
const path_1 = __importDefault(require("path"));
// import api from '__api';
const lodash_1 = __importDefault(require("lodash"));
const api_share_1 = require("../../isom/api-share");
const package_info_gathering_1 = require("@wfh/plink/wfh/dist/package-mgr/package-info-gathering");
const package_runner_1 = require("@wfh/plink/wfh/dist/package-runner");
function walkPackagesAndSetupInjector(browserOptions, ssr = false) {
    const packageInfo = package_info_gathering_1.walkPackages();
    injectorSetup(browserOptions.deployUrl, browserOptions.baseHref, ssr);
    return packageInfo;
}
exports.default = walkPackagesAndSetupInjector;
function injectorSetup(deployUrl, baseHref, ssr = false) {
    const apiProto = package_runner_1.initInjectorForNodePackages()[1];
    // initWebInjector(pks, apiProto);
    const publicUrlObj = url_1.parse(deployUrl || '');
    const baseHrefPath = baseHref ? url_1.parse(baseHref).pathname : undefined;
    Object.assign(apiProto, {
        deployUrl,
        ssr,
        ngBaseRouterPath: publicUrlObj.pathname ? lodash_1.default.trim(publicUrlObj.pathname, '/') : '',
        ngRouterPath: api_share_1.createNgRouterPath(baseHrefPath ? baseHrefPath : undefined),
        ssrRequire(requirePath) {
            if (ssr)
                return require(path_1.default.join(this.__dirname, requirePath));
        }
    });
}
exports.injectorSetup = injectorSetup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3Itc2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmplY3Rvci1zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw2QkFBMEI7QUFDMUIsZ0RBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQixvREFBdUI7QUFDdkIsb0RBQXdEO0FBQ3hELG1HQUFxRjtBQUNyRix1RUFBK0U7QUFHL0UsU0FBd0IsNEJBQTRCLENBQUMsY0FBcUMsRUFBRSxHQUFHLEdBQUcsS0FBSztJQUVyRyxNQUFNLFdBQVcsR0FBRyxxQ0FBWSxFQUFFLENBQUM7SUFDbkMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RSxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBTEQsK0NBS0M7QUFFRCxTQUFnQixhQUFhLENBQzNCLFNBQTZDLEVBQzdDLFFBQTJDLEVBQUUsR0FBRyxHQUFHLEtBQUs7SUFDeEQsTUFBTSxRQUFRLEdBQUcsNENBQTJCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRCxrQ0FBa0M7SUFFbEMsTUFBTSxZQUFZLEdBQUcsV0FBSyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM1QyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUVyRSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtRQUN0QixTQUFTO1FBQ1QsR0FBRztRQUNILGdCQUFnQixFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGdCQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDakYsWUFBWSxFQUFFLDhCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDekUsVUFBVSxDQUFDLFdBQW1CO1lBQzVCLElBQUksR0FBRztnQkFDTCxPQUFPLE9BQU8sQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQW5CRCxzQ0FtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3BhcnNlfSBmcm9tICd1cmwnO1xuaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG4vLyBpbXBvcnQgYXBpIGZyb20gJ19fYXBpJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge2NyZWF0ZU5nUm91dGVyUGF0aH0gZnJvbSAnLi4vLi4vaXNvbS9hcGktc2hhcmUnO1xuaW1wb3J0IHt3YWxrUGFja2FnZXMgfSBmcm9tICdAd2ZoL3BsaW5rL3dmaC9kaXN0L3BhY2thZ2UtbWdyL3BhY2thZ2UtaW5mby1nYXRoZXJpbmcnO1xuaW1wb3J0IHtpbml0SW5qZWN0b3JGb3JOb2RlUGFja2FnZXN9IGZyb20gJ0B3ZmgvcGxpbmsvd2ZoL2Rpc3QvcGFja2FnZS1ydW5uZXInO1xuaW1wb3J0IHtBbmd1bGFyQnVpbGRlck9wdGlvbnN9IGZyb20gJy4vY29tbW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2Fsa1BhY2thZ2VzQW5kU2V0dXBJbmplY3Rvcihicm93c2VyT3B0aW9uczogQW5ndWxhckJ1aWxkZXJPcHRpb25zLCBzc3IgPSBmYWxzZSk6XG4gIFJldHVyblR5cGU8dHlwZW9mIHdhbGtQYWNrYWdlcz4ge1xuICBjb25zdCBwYWNrYWdlSW5mbyA9IHdhbGtQYWNrYWdlcygpO1xuICBpbmplY3RvclNldHVwKGJyb3dzZXJPcHRpb25zLmRlcGxveVVybCwgYnJvd3Nlck9wdGlvbnMuYmFzZUhyZWYsIHNzcik7XG4gIHJldHVybiBwYWNrYWdlSW5mbztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdG9yU2V0dXAoXG4gIGRlcGxveVVybDogQW5ndWxhckJ1aWxkZXJPcHRpb25zWydkZXBsb3lVcmwnXSxcbiAgYmFzZUhyZWY6IEFuZ3VsYXJCdWlsZGVyT3B0aW9uc1snYmFzZUhyZWYnXSwgc3NyID0gZmFsc2UpIHtcbiAgY29uc3QgYXBpUHJvdG8gPSBpbml0SW5qZWN0b3JGb3JOb2RlUGFja2FnZXMoKVsxXTtcbiAgLy8gaW5pdFdlYkluamVjdG9yKHBrcywgYXBpUHJvdG8pO1xuXG4gIGNvbnN0IHB1YmxpY1VybE9iaiA9IHBhcnNlKGRlcGxveVVybCB8fCAnJyk7XG4gIGNvbnN0IGJhc2VIcmVmUGF0aCA9IGJhc2VIcmVmID8gcGFyc2UoYmFzZUhyZWYpLnBhdGhuYW1lIDogdW5kZWZpbmVkO1xuXG4gIE9iamVjdC5hc3NpZ24oYXBpUHJvdG8sIHtcbiAgICBkZXBsb3lVcmwsXG4gICAgc3NyLFxuICAgIG5nQmFzZVJvdXRlclBhdGg6IHB1YmxpY1VybE9iai5wYXRobmFtZSA/IF8udHJpbShwdWJsaWNVcmxPYmoucGF0aG5hbWUsICcvJykgOiAnJyxcbiAgICBuZ1JvdXRlclBhdGg6IGNyZWF0ZU5nUm91dGVyUGF0aChiYXNlSHJlZlBhdGggPyBiYXNlSHJlZlBhdGggOiB1bmRlZmluZWQpLFxuICAgIHNzclJlcXVpcmUocmVxdWlyZVBhdGg6IHN0cmluZykge1xuICAgICAgaWYgKHNzcilcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoUGF0aC5qb2luKHRoaXMuX19kaXJuYW1lLCByZXF1aXJlUGF0aCkpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=