"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const url_1 = require("url");
const path_1 = tslib_1.__importDefault(require("path"));
// import api from '__api';
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const api_share_1 = require("../../isom/api-share");
const main_1 = require("dr-comp-package/wfh/dist/build-util/ts/main");
const package_runner_1 = require("dr-comp-package/wfh/dist/package-runner");
const packageUtils = require('dr-comp-package/wfh/lib/packageMgr/packageUtils');
function walkPackagesAndSetupInjector(config, browserOptions, ssr = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const packageInfo = main_1.walkPackages(config, packageUtils);
        yield injectorSetup(packageInfo, browserOptions.drcpArgs, browserOptions.deployUrl, browserOptions.baseHref, ssr);
        return packageInfo;
    });
}
exports.default = walkPackagesAndSetupInjector;
function injectorSetup(packageInfo, drcpArgs, deployUrl, baseHref, ssr = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const [pks, apiProto] = package_runner_1.initInjectorForNodePackages(drcpArgs, packageInfo);
        yield package_runner_1.initWebInjector(pks, apiProto);
        const publicUrlObj = url_1.parse(deployUrl || '');
        const baseHrefPath = baseHref ? url_1.parse(baseHref).pathname : undefined;
        Object.assign(apiProto, {
            deployUrl,
            ssr,
            ngBaseRouterPath: publicUrlObj.pathname ? lodash_1.default.trim(publicUrlObj.pathname, '/') : '',
            ngRouterPath: api_share_1.createNgRouterPath(baseHrefPath ? baseHrefPath : undefined),
            ssrRequire(requirePath) {
                if (ssr)
                    return require(path_1.default.join(this.__dirname, requirePath));
            }
        });
    });
}
exports.injectorSetup = injectorSetup;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9pbmplY3Rvci1zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBMEI7QUFDMUIsd0RBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQiw0REFBdUI7QUFDdkIsb0RBQXdEO0FBQ3hELHNFQUEwRTtBQUMxRSw0RUFBcUc7QUFHckcsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7QUFFaEYsU0FBOEIsNEJBQTRCLENBQUMsTUFBa0IsRUFBRSxjQUFxQyxFQUFFLEdBQUcsR0FBRyxLQUFLOztRQUMvSCxNQUFNLFdBQVcsR0FBRyxtQkFBWSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN2RCxNQUFNLGFBQWEsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEgsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztDQUFBO0FBSkQsK0NBSUM7QUFFRCxTQUFzQixhQUFhLENBQUMsV0FBNEMsRUFDOUUsUUFBMkMsRUFDM0MsU0FBNkMsRUFDN0MsUUFBMkMsRUFBRSxHQUFHLEdBQUcsS0FBSzs7UUFFeEQsTUFBTSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRyw0Q0FBMkIsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0UsTUFBTSxnQ0FBZSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVyQyxNQUFNLFlBQVksR0FBRyxXQUFLLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRXJFLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3RCLFNBQVM7WUFDVCxHQUFHO1lBQ0gsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0JBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNqRixZQUFZLEVBQUUsOEJBQWtCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUN6RSxVQUFVLENBQUMsV0FBbUI7Z0JBQzVCLElBQUksR0FBRztvQkFDTCxPQUFPLE9BQU8sQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUMzRCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUFBO0FBckJELHNDQXFCQyIsImZpbGUiOiJub2RlX21vZHVsZXMvQGRyLWNvcmUvbmctYXBwLWJ1aWxkZXIvZGlzdC9uZy9pbmplY3Rvci1zZXR1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cGFyc2V9IGZyb20gJ3VybCc7XG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJztcbi8vIGltcG9ydCBhcGkgZnJvbSAnX19hcGknO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7Y3JlYXRlTmdSb3V0ZXJQYXRofSBmcm9tICcuLi8uLi9pc29tL2FwaS1zaGFyZSc7XG5pbXBvcnQge3dhbGtQYWNrYWdlcyB9IGZyb20gJ2RyLWNvbXAtcGFja2FnZS93ZmgvZGlzdC9idWlsZC11dGlsL3RzL21haW4nO1xuaW1wb3J0IHtpbml0SW5qZWN0b3JGb3JOb2RlUGFja2FnZXMsIGluaXRXZWJJbmplY3Rvcn0gZnJvbSAnZHItY29tcC1wYWNrYWdlL3dmaC9kaXN0L3BhY2thZ2UtcnVubmVyJztcbmltcG9ydCB7QW5ndWxhckJ1aWxkZXJPcHRpb25zfSBmcm9tICcuL2NvbW1vbic7XG5pbXBvcnQgeyBEcmNwQ29uZmlnIH0gZnJvbSAnZHItY29tcC1wYWNrYWdlL3dmaC9kaXN0L2NvbmZpZy1oYW5kbGVyJztcbmNvbnN0IHBhY2thZ2VVdGlscyA9IHJlcXVpcmUoJ2RyLWNvbXAtcGFja2FnZS93ZmgvbGliL3BhY2thZ2VNZ3IvcGFja2FnZVV0aWxzJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIHdhbGtQYWNrYWdlc0FuZFNldHVwSW5qZWN0b3IoY29uZmlnOiBEcmNwQ29uZmlnLCBicm93c2VyT3B0aW9uczogQW5ndWxhckJ1aWxkZXJPcHRpb25zLCBzc3IgPSBmYWxzZSk6IFByb21pc2U8UmV0dXJuVHlwZTx0eXBlb2Ygd2Fsa1BhY2thZ2VzPj4ge1xuICBjb25zdCBwYWNrYWdlSW5mbyA9IHdhbGtQYWNrYWdlcyhjb25maWcsIHBhY2thZ2VVdGlscyk7XG4gIGF3YWl0IGluamVjdG9yU2V0dXAocGFja2FnZUluZm8sIGJyb3dzZXJPcHRpb25zLmRyY3BBcmdzLCBicm93c2VyT3B0aW9ucy5kZXBsb3lVcmwsIGJyb3dzZXJPcHRpb25zLmJhc2VIcmVmLCBzc3IpO1xuICByZXR1cm4gcGFja2FnZUluZm87XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbmplY3RvclNldHVwKHBhY2thZ2VJbmZvOiBSZXR1cm5UeXBlPHR5cGVvZiB3YWxrUGFja2FnZXM+LFxuICBkcmNwQXJnczogQW5ndWxhckJ1aWxkZXJPcHRpb25zWydkcmNwQXJncyddLFxuICBkZXBsb3lVcmw6IEFuZ3VsYXJCdWlsZGVyT3B0aW9uc1snZGVwbG95VXJsJ10sXG4gIGJhc2VIcmVmOiBBbmd1bGFyQnVpbGRlck9wdGlvbnNbJ2Jhc2VIcmVmJ10sIHNzciA9IGZhbHNlKSB7XG5cbiAgY29uc3QgW3BrcywgYXBpUHJvdG9dID0gaW5pdEluamVjdG9yRm9yTm9kZVBhY2thZ2VzKGRyY3BBcmdzLCBwYWNrYWdlSW5mbyk7XG4gIGF3YWl0IGluaXRXZWJJbmplY3Rvcihwa3MsIGFwaVByb3RvKTtcblxuICBjb25zdCBwdWJsaWNVcmxPYmogPSBwYXJzZShkZXBsb3lVcmwgfHwgJycpO1xuICBjb25zdCBiYXNlSHJlZlBhdGggPSBiYXNlSHJlZiA/IHBhcnNlKGJhc2VIcmVmKS5wYXRobmFtZSA6IHVuZGVmaW5lZDtcblxuICBPYmplY3QuYXNzaWduKGFwaVByb3RvLCB7XG4gICAgZGVwbG95VXJsLFxuICAgIHNzcixcbiAgICBuZ0Jhc2VSb3V0ZXJQYXRoOiBwdWJsaWNVcmxPYmoucGF0aG5hbWUgPyBfLnRyaW0ocHVibGljVXJsT2JqLnBhdGhuYW1lLCAnLycpIDogJycsXG4gICAgbmdSb3V0ZXJQYXRoOiBjcmVhdGVOZ1JvdXRlclBhdGgoYmFzZUhyZWZQYXRoID8gYmFzZUhyZWZQYXRoIDogdW5kZWZpbmVkKSxcbiAgICBzc3JSZXF1aXJlKHJlcXVpcmVQYXRoOiBzdHJpbmcpIHtcbiAgICAgIGlmIChzc3IpXG4gICAgICAgIHJldHVybiByZXF1aXJlKFBhdGguam9pbih0aGlzLl9fZGlybmFtZSwgcmVxdWlyZVBhdGgpKTtcbiAgICB9XG4gIH0pO1xufVxuIl19
