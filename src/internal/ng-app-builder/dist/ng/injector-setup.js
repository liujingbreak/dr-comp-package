"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const url_1 = require("url");
const path_1 = tslib_1.__importDefault(require("path"));
// import api from '__api';
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const api_share_1 = require("../../isom/api-share");
const main_1 = require("dr-comp-package/wfh/dist/build-util/ts/main");
const package_runner_1 = require("dr-comp-package/wfh/dist/package-runner");
const packageUtils = require('dr-comp-package/wfh/lib/packageMgr/packageUtils');
function default_1(config, browserOptions, ssr = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const packageInfo = main_1.walkPackages(config, packageUtils);
        yield injectorSetup(packageInfo, browserOptions.drcpArgs, browserOptions.deployUrl, browserOptions.baseHref, ssr);
        return packageInfo;
    });
}
exports.default = default_1;
function injectorSetup(packageInfo, drcpArgs, deployUrl, baseHref, ssr = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const [pks, apiProto] = package_runner_1.initInjectorForNodePackages(drcpArgs, packageInfo);
        yield package_runner_1.initWebInjector(pks, apiProto);
        const publicUrlObj = url_1.parse(deployUrl || '');
        const baseHrefPath = baseHref ? url_1.parse(baseHref).pathname : undefined;
        Object.assign(apiProto, {
            deployUrl,
            ssr,
            ngBaseRouterPath: publicUrlObj.pathname ? lodash_1.default.trim(publicUrlObj.pathname, '/') : '',
            ngRouterPath: api_share_1.createNgRouterPath(baseHrefPath ? baseHrefPath : undefined),
            ssrRequire(requirePath) {
                if (ssr)
                    return require(path_1.default.join(this.__dirname, requirePath));
            }
        });
    });
}
exports.injectorSetup = injectorSetup;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9pbmplY3Rvci1zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBMEI7QUFDMUIsd0RBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQiw0REFBdUI7QUFDdkIsb0RBQXdEO0FBQ3hELHNFQUEwRTtBQUMxRSw0RUFBcUc7QUFHckcsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7QUFFaEYsbUJBQThCLE1BQWtCLEVBQUUsY0FBcUMsRUFBRSxHQUFHLEdBQUcsS0FBSzs7UUFDbEcsTUFBTSxXQUFXLEdBQUcsbUJBQVksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdkQsTUFBTSxhQUFhLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2xILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FBQTtBQUpELDRCQUlDO0FBRUQsU0FBc0IsYUFBYSxDQUFDLFdBQTRDLEVBQzlFLFFBQTJDLEVBQzNDLFNBQTZDLEVBQzdDLFFBQTJDLEVBQUUsR0FBRyxHQUFHLEtBQUs7O1FBRXhELE1BQU0sQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsNENBQTJCLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sZ0NBQWUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFckMsTUFBTSxZQUFZLEdBQUcsV0FBSyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1QyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUVyRSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUN0QixTQUFTO1lBQ1QsR0FBRztZQUNILGdCQUFnQixFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGdCQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDakYsWUFBWSxFQUFFLDhCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDekUsVUFBVSxDQUFDLFdBQW1CO2dCQUM1QixJQUFJLEdBQUc7b0JBQ0wsT0FBTyxPQUFPLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDM0QsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FBQTtBQXJCRCxzQ0FxQkMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci1jb3JlL25nLWFwcC1idWlsZGVyL2Rpc3QvbmcvaW5qZWN0b3Itc2V0dXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3BhcnNlfSBmcm9tICd1cmwnO1xuaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG4vLyBpbXBvcnQgYXBpIGZyb20gJ19fYXBpJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge2NyZWF0ZU5nUm91dGVyUGF0aH0gZnJvbSAnLi4vLi4vaXNvbS9hcGktc2hhcmUnO1xuaW1wb3J0IHt3YWxrUGFja2FnZXMgfSBmcm9tICdkci1jb21wLXBhY2thZ2Uvd2ZoL2Rpc3QvYnVpbGQtdXRpbC90cy9tYWluJztcbmltcG9ydCB7aW5pdEluamVjdG9yRm9yTm9kZVBhY2thZ2VzLCBpbml0V2ViSW5qZWN0b3J9IGZyb20gJ2RyLWNvbXAtcGFja2FnZS93ZmgvZGlzdC9wYWNrYWdlLXJ1bm5lcic7XG5pbXBvcnQge0FuZ3VsYXJCdWlsZGVyT3B0aW9uc30gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgRHJjcENvbmZpZyB9IGZyb20gJ2RyLWNvbXAtcGFja2FnZS93ZmgvZGlzdC9jb25maWctaGFuZGxlcic7XG5jb25zdCBwYWNrYWdlVXRpbHMgPSByZXF1aXJlKCdkci1jb21wLXBhY2thZ2Uvd2ZoL2xpYi9wYWNrYWdlTWdyL3BhY2thZ2VVdGlscycpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbihjb25maWc6IERyY3BDb25maWcsIGJyb3dzZXJPcHRpb25zOiBBbmd1bGFyQnVpbGRlck9wdGlvbnMsIHNzciA9IGZhbHNlKTogUHJvbWlzZTxSZXR1cm5UeXBlPHR5cGVvZiB3YWxrUGFja2FnZXM+PiB7XG4gIGNvbnN0IHBhY2thZ2VJbmZvID0gd2Fsa1BhY2thZ2VzKGNvbmZpZywgcGFja2FnZVV0aWxzKTtcbiAgYXdhaXQgaW5qZWN0b3JTZXR1cChwYWNrYWdlSW5mbywgYnJvd3Nlck9wdGlvbnMuZHJjcEFyZ3MsIGJyb3dzZXJPcHRpb25zLmRlcGxveVVybCwgYnJvd3Nlck9wdGlvbnMuYmFzZUhyZWYsIHNzcik7XG4gIHJldHVybiBwYWNrYWdlSW5mbztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluamVjdG9yU2V0dXAocGFja2FnZUluZm86IFJldHVyblR5cGU8dHlwZW9mIHdhbGtQYWNrYWdlcz4sXG4gIGRyY3BBcmdzOiBBbmd1bGFyQnVpbGRlck9wdGlvbnNbJ2RyY3BBcmdzJ10sXG4gIGRlcGxveVVybDogQW5ndWxhckJ1aWxkZXJPcHRpb25zWydkZXBsb3lVcmwnXSxcbiAgYmFzZUhyZWY6IEFuZ3VsYXJCdWlsZGVyT3B0aW9uc1snYmFzZUhyZWYnXSwgc3NyID0gZmFsc2UpIHtcblxuICBjb25zdCBbcGtzLCBhcGlQcm90b10gPSBpbml0SW5qZWN0b3JGb3JOb2RlUGFja2FnZXMoZHJjcEFyZ3MsIHBhY2thZ2VJbmZvKTtcbiAgYXdhaXQgaW5pdFdlYkluamVjdG9yKHBrcywgYXBpUHJvdG8pO1xuXG4gIGNvbnN0IHB1YmxpY1VybE9iaiA9IHBhcnNlKGRlcGxveVVybCB8fCAnJyk7XG4gIGNvbnN0IGJhc2VIcmVmUGF0aCA9IGJhc2VIcmVmID8gcGFyc2UoYmFzZUhyZWYpLnBhdGhuYW1lIDogdW5kZWZpbmVkO1xuXG4gIE9iamVjdC5hc3NpZ24oYXBpUHJvdG8sIHtcbiAgICBkZXBsb3lVcmwsXG4gICAgc3NyLFxuICAgIG5nQmFzZVJvdXRlclBhdGg6IHB1YmxpY1VybE9iai5wYXRobmFtZSA/IF8udHJpbShwdWJsaWNVcmxPYmoucGF0aG5hbWUsICcvJykgOiAnJyxcbiAgICBuZ1JvdXRlclBhdGg6IGNyZWF0ZU5nUm91dGVyUGF0aChiYXNlSHJlZlBhdGggPyBiYXNlSHJlZlBhdGggOiB1bmRlZmluZWQpLFxuICAgIHNzclJlcXVpcmUocmVxdWlyZVBhdGg6IHN0cmluZykge1xuICAgICAgaWYgKHNzcilcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoUGF0aC5qb2luKHRoaXMuX19kaXJuYW1lLCByZXF1aXJlUGF0aCkpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=
