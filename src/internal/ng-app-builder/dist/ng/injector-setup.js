"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectorSetup = void 0;
const url_1 = require("url");
const path_1 = __importDefault(require("path"));
// import api from '__api';
const lodash_1 = __importDefault(require("lodash"));
const api_share_1 = require("../../isom/api-share");
const package_info_gathering_1 = require("@wfh/plink/wfh/dist/package-mgr/package-info-gathering");
const package_runner_1 = require("@wfh/plink/wfh/dist/package-runner");
function walkPackagesAndSetupInjector(browserOptions, ssr = false) {
    const packageInfo = package_info_gathering_1.walkPackages();
    injectorSetup(packageInfo, browserOptions.drcpArgs, browserOptions.deployUrl, browserOptions.baseHref, ssr);
    return packageInfo;
}
exports.default = walkPackagesAndSetupInjector;
function injectorSetup(packageInfo, drcpArgs, deployUrl, baseHref, ssr = false) {
    const [pks, apiProto] = package_runner_1.initInjectorForNodePackages(packageInfo);
    package_runner_1.initWebInjector(pks, apiProto);
    const publicUrlObj = url_1.parse(deployUrl || '');
    const baseHrefPath = baseHref ? url_1.parse(baseHref).pathname : undefined;
    Object.assign(apiProto, {
        deployUrl,
        ssr,
        ngBaseRouterPath: publicUrlObj.pathname ? lodash_1.default.trim(publicUrlObj.pathname, '/') : '',
        ngRouterPath: api_share_1.createNgRouterPath(baseHrefPath ? baseHrefPath : undefined),
        ssrRequire(requirePath) {
            if (ssr)
                return require(path_1.default.join(this.__dirname, requirePath));
        }
    });
}
exports.injectorSetup = injectorSetup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0b3Itc2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmplY3Rvci1zZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw2QkFBMEI7QUFDMUIsZ0RBQXdCO0FBQ3hCLDJCQUEyQjtBQUMzQixvREFBdUI7QUFDdkIsb0RBQXdEO0FBQ3hELG1HQUFxRjtBQUNyRix1RUFBZ0c7QUFHaEcsU0FBd0IsNEJBQTRCLENBQUMsY0FBcUMsRUFBRSxHQUFHLEdBQUcsS0FBSztJQUVyRyxNQUFNLFdBQVcsR0FBRyxxQ0FBWSxFQUFFLENBQUM7SUFDbkMsYUFBYSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1RyxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBTEQsK0NBS0M7QUFFRCxTQUFnQixhQUFhLENBQUMsV0FBNEMsRUFDeEUsUUFBMkMsRUFDM0MsU0FBNkMsRUFDN0MsUUFBMkMsRUFBRSxHQUFHLEdBQUcsS0FBSztJQUN4RCxNQUFNLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxHQUFHLDRDQUEyQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pFLGdDQUFlLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRS9CLE1BQU0sWUFBWSxHQUFHLFdBQUssQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUM7SUFDNUMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFckUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7UUFDdEIsU0FBUztRQUNULEdBQUc7UUFDSCxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxnQkFBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2pGLFlBQVksRUFBRSw4QkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3pFLFVBQVUsQ0FBQyxXQUFtQjtZQUM1QixJQUFJLEdBQUc7Z0JBQ0wsT0FBTyxPQUFPLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDM0QsQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFwQkQsc0NBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtwYXJzZX0gZnJvbSAndXJsJztcbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xuLy8gaW1wb3J0IGFwaSBmcm9tICdfX2FwaSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtjcmVhdGVOZ1JvdXRlclBhdGh9IGZyb20gJy4uLy4uL2lzb20vYXBpLXNoYXJlJztcbmltcG9ydCB7d2Fsa1BhY2thZ2VzIH0gZnJvbSAnQHdmaC9wbGluay93ZmgvZGlzdC9wYWNrYWdlLW1nci9wYWNrYWdlLWluZm8tZ2F0aGVyaW5nJztcbmltcG9ydCB7aW5pdEluamVjdG9yRm9yTm9kZVBhY2thZ2VzLCBpbml0V2ViSW5qZWN0b3J9IGZyb20gJ0B3ZmgvcGxpbmsvd2ZoL2Rpc3QvcGFja2FnZS1ydW5uZXInO1xuaW1wb3J0IHtBbmd1bGFyQnVpbGRlck9wdGlvbnN9IGZyb20gJy4vY29tbW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2Fsa1BhY2thZ2VzQW5kU2V0dXBJbmplY3Rvcihicm93c2VyT3B0aW9uczogQW5ndWxhckJ1aWxkZXJPcHRpb25zLCBzc3IgPSBmYWxzZSk6XG4gIFJldHVyblR5cGU8dHlwZW9mIHdhbGtQYWNrYWdlcz4ge1xuICBjb25zdCBwYWNrYWdlSW5mbyA9IHdhbGtQYWNrYWdlcygpO1xuICBpbmplY3RvclNldHVwKHBhY2thZ2VJbmZvLCBicm93c2VyT3B0aW9ucy5kcmNwQXJncywgYnJvd3Nlck9wdGlvbnMuZGVwbG95VXJsLCBicm93c2VyT3B0aW9ucy5iYXNlSHJlZiwgc3NyKTtcbiAgcmV0dXJuIHBhY2thZ2VJbmZvO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0b3JTZXR1cChwYWNrYWdlSW5mbzogUmV0dXJuVHlwZTx0eXBlb2Ygd2Fsa1BhY2thZ2VzPixcbiAgZHJjcEFyZ3M6IEFuZ3VsYXJCdWlsZGVyT3B0aW9uc1snZHJjcEFyZ3MnXSxcbiAgZGVwbG95VXJsOiBBbmd1bGFyQnVpbGRlck9wdGlvbnNbJ2RlcGxveVVybCddLFxuICBiYXNlSHJlZjogQW5ndWxhckJ1aWxkZXJPcHRpb25zWydiYXNlSHJlZiddLCBzc3IgPSBmYWxzZSkge1xuICBjb25zdCBbcGtzLCBhcGlQcm90b10gPSBpbml0SW5qZWN0b3JGb3JOb2RlUGFja2FnZXMocGFja2FnZUluZm8pO1xuICBpbml0V2ViSW5qZWN0b3IocGtzLCBhcGlQcm90byk7XG5cbiAgY29uc3QgcHVibGljVXJsT2JqID0gcGFyc2UoZGVwbG95VXJsIHx8ICcnKTtcbiAgY29uc3QgYmFzZUhyZWZQYXRoID0gYmFzZUhyZWYgPyBwYXJzZShiYXNlSHJlZikucGF0aG5hbWUgOiB1bmRlZmluZWQ7XG5cbiAgT2JqZWN0LmFzc2lnbihhcGlQcm90bywge1xuICAgIGRlcGxveVVybCxcbiAgICBzc3IsXG4gICAgbmdCYXNlUm91dGVyUGF0aDogcHVibGljVXJsT2JqLnBhdGhuYW1lID8gXy50cmltKHB1YmxpY1VybE9iai5wYXRobmFtZSwgJy8nKSA6ICcnLFxuICAgIG5nUm91dGVyUGF0aDogY3JlYXRlTmdSb3V0ZXJQYXRoKGJhc2VIcmVmUGF0aCA/IGJhc2VIcmVmUGF0aCA6IHVuZGVmaW5lZCksXG4gICAgc3NyUmVxdWlyZShyZXF1aXJlUGF0aDogc3RyaW5nKSB7XG4gICAgICBpZiAoc3NyKVxuICAgICAgICByZXR1cm4gcmVxdWlyZShQYXRoLmpvaW4odGhpcy5fX2Rpcm5hbWUsIHJlcXVpcmVQYXRoKSk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==