"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
function initCli(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const drcpConfigFiles = options.drcpConfig ? options.drcpConfig.split(/\s*[,;:]\s*/) : [];
        const config = yield initDrcp(options.drcpArgs, drcpConfigFiles);
        fs_extra_1.default.mkdirpSync(config.resolve('destDir', 'ng-app-builder.report'));
        return config;
    });
}
exports.initCli = initCli;
function initDrcp(drcpArgs, drcpConfigFiles) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var config = require('dr-comp-package/wfh/lib/config');
        if (drcpArgs.c == null)
            drcpArgs.c = [];
        drcpArgs.c.push(...drcpConfigFiles);
        yield config.init(drcpArgs);
        require('dr-comp-package/wfh/lib/logConfig')(config());
        return config;
    });
}
function newContext(ngBuildOption, options) {
    const constructor = require('./builder-context').BuilderContext;
    return new constructor(ngBuildOption, options);
}
exports.newContext = newContext;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0EsZ0VBQTBCO0FBSTFCLFNBQXNCLE9BQU8sQ0FBQyxPQUFZOztRQUN4QyxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBRSxPQUFPLENBQUMsVUFBcUIsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0RyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ2pFLGtCQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUNsRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQUE7QUFMRCwwQkFLQztBQUNELFNBQWUsUUFBUSxDQUFDLFFBQWEsRUFBRSxlQUF5Qjs7UUFDOUQsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFFdkQsSUFBSSxRQUFRLENBQUMsQ0FBQyxJQUFJLElBQUk7WUFDcEIsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEIsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQztRQUNwQyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUN2RCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQUE7QUE0QkQsU0FBZ0IsVUFBVSxDQUFDLGFBQThCLEVBQUUsT0FBK0I7SUFDeEYsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsY0FBdUMsQ0FBQztJQUN6RixPQUFPLElBQUksV0FBVyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBSEQsZ0NBR0MiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci1jb3JlL25nLWFwcC1idWlsZGVyL2Rpc3QvbmcvY29tbW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgbm8tY29uc29sZSBtYXgtbGluZS1sZW5ndGggKi9cbmltcG9ydCB7IERldlNlcnZlckJ1aWxkZXJPcHRpb25zICB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyJztcbmltcG9ydCB7IFNjaGVtYSBhcyBOb3JtYWxpemVkQnJvd3NlckJ1aWxkZXJTY2hlbWEgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYnVpbGQtYW5ndWxhci9zcmMvYnJvd3Nlci9zY2hlbWEnO1xuaW1wb3J0IHsgU2NoZW1hIGFzIE5vcm1hbGl6ZWRTZXJ2ZXJCdWlsZGVyU2VydmVyU2NoZW1hIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXIvc3JjL3NlcnZlci9zY2hlbWEnO1xuaW1wb3J0IHtqc29ufSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgX19jaGFuZ2VXZWJwYWNrQ29uZmlnLCB7dHJhbnNmb3JtSW5kZXhIdG1sIGFzIF90cmFuc2Zvcm1JbmRleEh0bWx9IGZyb20gJy4uL2NvbmZpZy13ZWJwYWNrJztcbmltcG9ydCBhcGkgZnJvbSAnX19hcGknO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcblxuZXhwb3J0IHR5cGUgRHJjcENvbmZpZyA9IHR5cGVvZiBhcGkuY29uZmlnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdENsaShvcHRpb25zOiBhbnkpIHtcbiAgY29uc3QgZHJjcENvbmZpZ0ZpbGVzID0gb3B0aW9ucy5kcmNwQ29uZmlnID8gKG9wdGlvbnMuZHJjcENvbmZpZyBhcyBzdHJpbmcpLnNwbGl0KC9cXHMqWyw7Ol1cXHMqLykgOiBbXTtcbiAgY29uc3QgY29uZmlnID0gYXdhaXQgaW5pdERyY3Aob3B0aW9ucy5kcmNwQXJncywgZHJjcENvbmZpZ0ZpbGVzKTtcbiAgZnMubWtkaXJwU3luYyhjb25maWcucmVzb2x2ZSgnZGVzdERpcicsICduZy1hcHAtYnVpbGRlci5yZXBvcnQnKSk7XG4gIHJldHVybiBjb25maWc7XG59XG5hc3luYyBmdW5jdGlvbiBpbml0RHJjcChkcmNwQXJnczogYW55LCBkcmNwQ29uZmlnRmlsZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxEcmNwQ29uZmlnPiB7XG4gIHZhciBjb25maWcgPSByZXF1aXJlKCdkci1jb21wLXBhY2thZ2Uvd2ZoL2xpYi9jb25maWcnKTtcblxuICBpZiAoZHJjcEFyZ3MuYyA9PSBudWxsKVxuICAgIGRyY3BBcmdzLmMgPSBbXTtcbiAgZHJjcEFyZ3MuYy5wdXNoKC4uLmRyY3BDb25maWdGaWxlcyk7XG4gIGF3YWl0IGNvbmZpZy5pbml0KGRyY3BBcmdzKTtcbiAgcmVxdWlyZSgnZHItY29tcC1wYWNrYWdlL3dmaC9saWIvbG9nQ29uZmlnJykoY29uZmlnKCkpO1xuICByZXR1cm4gY29uZmlnO1xufVxuXG5leHBvcnQgdHlwZSBidWlsZFdlYnBhY2tDb25maWdGdW5jID0gKGJyb3dzZXJPcHRpb25zOiBBbmd1bGFyQnVpbGRlck9wdGlvbnMpID0+IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBBbmd1bGFyQ2xpUGFyYW0ge1xuICBidWlsZGVyQ29uZmlnPzogRGV2U2VydmVyQnVpbGRlck9wdGlvbnM7XG4gIGJyb3dzZXJPcHRpb25zOiBBbmd1bGFyQnVpbGRlck9wdGlvbnM7XG4gIHNzcjogYm9vbGVhbjsgLy8gSXMgc2VydmVyIHNpZGUgLyBwcmVyZW5kZXJcbiAgLy8gd2VicGFja0NvbmZpZzogYW55O1xuICAvLyBwcm9qZWN0Um9vdDogc3RyaW5nO1xuICAvLyBhcmd2OiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIE5vcm1hbGl6ZWRBbmd1bGFyQnVpbGRTY2hlbWEgPSBOb3JtYWxpemVkQnJvd3NlckJ1aWxkZXJTY2hlbWEgfCBOb3JtYWxpemVkU2VydmVyQnVpbGRlclNlcnZlclNjaGVtYTtcbi8vIE5vcm1hbGl6ZWRLYXJtYUJ1aWxkZXJTY2hlbWE7XG5cbmV4cG9ydCB0eXBlIEFuZ3VsYXJCdWlsZGVyT3B0aW9ucyA9XG4gIE5vcm1hbGl6ZWRCcm93c2VyQnVpbGRlclNjaGVtYSAmIE5vcm1hbGl6ZWRTZXJ2ZXJCdWlsZGVyU2VydmVyU2NoZW1hICZcbiAgLy8gTm9ybWFsaXplZEthcm1hQnVpbGRlclNjaGVtYSAmXG4gIERyY3BCdWlsZGVyT3B0aW9ucyAmIGpzb24uSnNvbk9iamVjdDtcblxuZXhwb3J0IGludGVyZmFjZSBEcmNwQnVpbGRlck9wdGlvbnMge1xuICBkcmNwQXJnczogYW55O1xuICBkcmNwQ29uZmlnOiBzdHJpbmc7XG59XG5cbmltcG9ydCB7QnVpbGRlckNvbnRleHQsIEJ1aWxkZXJDb250ZXh0T3B0aW9uc30gZnJvbSAnLi9idWlsZGVyLWNvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gbmV3Q29udGV4dChuZ0J1aWxkT3B0aW9uOiBBbmd1bGFyQ2xpUGFyYW0sIG9wdGlvbnM/OiBCdWlsZGVyQ29udGV4dE9wdGlvbnMpIHtcbiAgY29uc3QgY29uc3RydWN0b3IgPSByZXF1aXJlKCcuL2J1aWxkZXItY29udGV4dCcpLkJ1aWxkZXJDb250ZXh0IGFzIHR5cGVvZiBCdWlsZGVyQ29udGV4dDtcbiAgcmV0dXJuIG5ldyBjb25zdHJ1Y3RvcihuZ0J1aWxkT3B0aW9uLCBvcHRpb25zKTtcbn1cbiJdfQ==
