"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
function initCli(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const drcpConfigFiles = options.drcpConfig ? options.drcpConfig.split(/\s*[,;:]\s*/) : [];
        return initDrcp(options.drcpArgs, drcpConfigFiles);
    });
}
exports.initCli = initCli;
function initDrcp(drcpArgs, drcpConfigFiles) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var config = require('dr-comp-package/wfh/lib/config');
        if (drcpArgs.c == null)
            drcpArgs.c = [];
        drcpArgs.c.push(...drcpConfigFiles);
        yield config.init(drcpArgs);
        require('dr-comp-package/wfh/lib/logConfig')(config());
        return config;
    });
}
function newContext(ngBuildOption, options) {
    const constructor = require('./builder-context').BuilderContext;
    return new constructor(ngBuildOption, options);
}
exports.newContext = newContext;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBVUEsU0FBc0IsT0FBTyxDQUFDLE9BQVk7O1FBQ3hDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxVQUFxQixDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3RHLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUFBO0FBSEQsMEJBR0M7QUFDRCxTQUFlLFFBQVEsQ0FBQyxRQUFhLEVBQUUsZUFBeUI7O1FBQzlELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBRXZELElBQUksUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJO1lBQ3BCLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsZUFBZSxDQUFDLENBQUM7UUFDcEMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUFBO0FBNEJELFNBQWdCLFVBQVUsQ0FBQyxhQUE4QixFQUFFLE9BQStCO0lBQ3hGLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGNBQXVDLENBQUM7SUFDekYsT0FBTyxJQUFJLFdBQVcsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUhELGdDQUdDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci9kaXN0L25nL2NvbW1vbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlIG5vLWNvbnNvbGUgbWF4LWxpbmUtbGVuZ3RoICovXG5pbXBvcnQgeyBEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyAgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYnVpbGQtYW5ndWxhcic7XG5pbXBvcnQgeyBTY2hlbWEgYXMgTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXIvc3JjL2Jyb3dzZXIvc2NoZW1hJztcbmltcG9ydCB7IFNjaGVtYSBhcyBOb3JtYWxpemVkU2VydmVyQnVpbGRlclNlcnZlclNjaGVtYSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyL3NyYy9zZXJ2ZXIvc2NoZW1hJztcbmltcG9ydCB7anNvbn0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IF9fY2hhbmdlV2VicGFja0NvbmZpZywge3RyYW5zZm9ybUluZGV4SHRtbCBhcyBfdHJhbnNmb3JtSW5kZXhIdG1sfSBmcm9tICcuLi9jb25maWctd2VicGFjayc7XG5pbXBvcnQgYXBpIGZyb20gJ19fYXBpJztcblxuZXhwb3J0IHR5cGUgRHJjcENvbmZpZyA9IHR5cGVvZiBhcGkuY29uZmlnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdENsaShvcHRpb25zOiBhbnkpIHtcbiAgY29uc3QgZHJjcENvbmZpZ0ZpbGVzID0gb3B0aW9ucy5kcmNwQ29uZmlnID8gKG9wdGlvbnMuZHJjcENvbmZpZyBhcyBzdHJpbmcpLnNwbGl0KC9cXHMqWyw7Ol1cXHMqLykgOiBbXTtcbiAgcmV0dXJuIGluaXREcmNwKG9wdGlvbnMuZHJjcEFyZ3MsIGRyY3BDb25maWdGaWxlcyk7XG59XG5hc3luYyBmdW5jdGlvbiBpbml0RHJjcChkcmNwQXJnczogYW55LCBkcmNwQ29uZmlnRmlsZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxEcmNwQ29uZmlnPiB7XG4gIHZhciBjb25maWcgPSByZXF1aXJlKCdkci1jb21wLXBhY2thZ2Uvd2ZoL2xpYi9jb25maWcnKTtcblxuICBpZiAoZHJjcEFyZ3MuYyA9PSBudWxsKVxuICAgIGRyY3BBcmdzLmMgPSBbXTtcbiAgZHJjcEFyZ3MuYy5wdXNoKC4uLmRyY3BDb25maWdGaWxlcyk7XG4gIGF3YWl0IGNvbmZpZy5pbml0KGRyY3BBcmdzKTtcbiAgcmVxdWlyZSgnZHItY29tcC1wYWNrYWdlL3dmaC9saWIvbG9nQ29uZmlnJykoY29uZmlnKCkpO1xuICByZXR1cm4gY29uZmlnO1xufVxuXG5leHBvcnQgdHlwZSBidWlsZFdlYnBhY2tDb25maWdGdW5jID0gKGJyb3dzZXJPcHRpb25zOiBBbmd1bGFyQnVpbGRlck9wdGlvbnMpID0+IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBBbmd1bGFyQ2xpUGFyYW0ge1xuICBidWlsZGVyQ29uZmlnPzogRGV2U2VydmVyQnVpbGRlck9wdGlvbnM7XG4gIGJyb3dzZXJPcHRpb25zOiBBbmd1bGFyQnVpbGRlck9wdGlvbnM7XG4gIHNzcjogYm9vbGVhbjsgLy8gSXMgc2VydmVyIHNpZGUgLyBwcmVyZW5kZXJcbiAgLy8gd2VicGFja0NvbmZpZzogYW55O1xuICAvLyBwcm9qZWN0Um9vdDogc3RyaW5nO1xuICAvLyBhcmd2OiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIE5vcm1hbGl6ZWRBbmd1bGFyQnVpbGRTY2hlbWEgPSBOb3JtYWxpemVkQnJvd3NlckJ1aWxkZXJTY2hlbWEgfCBOb3JtYWxpemVkU2VydmVyQnVpbGRlclNlcnZlclNjaGVtYTtcbi8vIE5vcm1hbGl6ZWRLYXJtYUJ1aWxkZXJTY2hlbWE7XG5cbmV4cG9ydCB0eXBlIEFuZ3VsYXJCdWlsZGVyT3B0aW9ucyA9XG4gIE5vcm1hbGl6ZWRCcm93c2VyQnVpbGRlclNjaGVtYSAmIE5vcm1hbGl6ZWRTZXJ2ZXJCdWlsZGVyU2VydmVyU2NoZW1hICZcbiAgLy8gTm9ybWFsaXplZEthcm1hQnVpbGRlclNjaGVtYSAmXG4gIERyY3BCdWlsZGVyT3B0aW9ucyAmIGpzb24uSnNvbk9iamVjdDtcblxuZXhwb3J0IGludGVyZmFjZSBEcmNwQnVpbGRlck9wdGlvbnMge1xuICBkcmNwQXJnczogYW55O1xuICBkcmNwQ29uZmlnOiBzdHJpbmc7XG59XG5cbmltcG9ydCB7QnVpbGRlckNvbnRleHQsIEJ1aWxkZXJDb250ZXh0T3B0aW9uc30gZnJvbSAnLi9idWlsZGVyLWNvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gbmV3Q29udGV4dChuZ0J1aWxkT3B0aW9uOiBBbmd1bGFyQ2xpUGFyYW0sIG9wdGlvbnM/OiBCdWlsZGVyQ29udGV4dE9wdGlvbnMpIHtcbiAgY29uc3QgY29uc3RydWN0b3IgPSByZXF1aXJlKCcuL2J1aWxkZXItY29udGV4dCcpLkJ1aWxkZXJDb250ZXh0IGFzIHR5cGVvZiBCdWlsZGVyQ29udGV4dDtcbiAgcmV0dXJuIG5ldyBjb25zdHJ1Y3RvcihuZ0J1aWxkT3B0aW9uLCBvcHRpb25zKTtcbn1cbiJdfQ==
