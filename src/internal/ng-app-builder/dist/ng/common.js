"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
function initCli(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const drcpConfigFiles = options.drcpConfig ? options.drcpConfig.split(/\s*[,;:]\s*/) : [];
        return initDrcp(options.drcpArgs, drcpConfigFiles);
    });
}
exports.initCli = initCli;
function initDrcp(drcpArgs, drcpConfigFiles) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var config = require('dr-comp-package/wfh/lib/config');
        if (drcpArgs.c == null)
            drcpArgs.c = [];
        drcpArgs.c.push(...drcpConfigFiles);
        yield config.init(drcpArgs);
        require('dr-comp-package/wfh/lib/logConfig')(config());
        return config;
    });
}
function configWebpack(param, webpackConfig, drcpConfigSetting) {
    const changeWebpackConfig = require('../config-webpack').default;
    changeWebpackConfig(param, webpackConfig, drcpConfigSetting);
}
exports.configWebpack = configWebpack;
function transformIndexHtml(content) {
    const trans = require('../config-webpack').transformIndexHtml;
    return trans(content);
}
exports.transformIndexHtml = transformIndexHtml;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci90cy9uZy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBV0EsU0FBc0IsT0FBTyxDQUFDLE9BQVk7O1FBQ3hDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFFLE9BQU8sQ0FBQyxVQUFxQixDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3RHLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUFBO0FBSEQsMEJBR0M7QUFDRCxTQUFlLFFBQVEsQ0FBQyxRQUFhLEVBQUUsZUFBeUI7O1FBQzlELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBRXZELElBQUksUUFBUSxDQUFDLENBQUMsSUFBSSxJQUFJO1lBQ3BCLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsZUFBZSxDQUFDLENBQUM7UUFDcEMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUFBO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLEtBQXNCLEVBQUUsYUFBb0MsRUFDeEYsaUJBQXFDO0lBQ3JDLE1BQU0sbUJBQW1CLEdBQWlDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUMvRixtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUpELHNDQUlDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsT0FBZTtJQUNoRCxNQUFNLEtBQUssR0FBK0IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsa0JBQWtCLENBQUM7SUFDMUYsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUhELGdEQUdDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9uZy1hcHAtYnVpbGRlci9kaXN0L25nL2NvbW1vbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlIG5vLWNvbnNvbGUgbWF4LWxpbmUtbGVuZ3RoICovXG5pbXBvcnQgeyBEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyAgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYnVpbGQtYW5ndWxhcic7XG5pbXBvcnQgeyBTY2hlbWEgYXMgTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXIvc3JjL2Jyb3dzZXIvc2NoZW1hJztcbmltcG9ydCB7IFNjaGVtYSBhcyBOb3JtYWxpemVkU2VydmVyQnVpbGRlclNlcnZlclNjaGVtYSB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyL3NyYy9zZXJ2ZXIvc2NoZW1hJztcbmltcG9ydCB7anNvbn0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IF9fY2hhbmdlV2VicGFja0NvbmZpZywge3RyYW5zZm9ybUluZGV4SHRtbCBhcyBfdHJhbnNmb3JtSW5kZXhIdG1sfSBmcm9tICcuLi9jb25maWctd2VicGFjayc7XG5pbXBvcnQgd2VicGFjayBmcm9tICd3ZWJwYWNrJztcbmltcG9ydCBhcGkgZnJvbSAnX19hcGknO1xuXG5leHBvcnQgdHlwZSBEcmNwQ29uZmlnID0gdHlwZW9mIGFwaS5jb25maWc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0Q2xpKG9wdGlvbnM6IGFueSkge1xuICBjb25zdCBkcmNwQ29uZmlnRmlsZXMgPSBvcHRpb25zLmRyY3BDb25maWcgPyAob3B0aW9ucy5kcmNwQ29uZmlnIGFzIHN0cmluZykuc3BsaXQoL1xccypbLDs6XVxccyovKSA6IFtdO1xuICByZXR1cm4gaW5pdERyY3Aob3B0aW9ucy5kcmNwQXJncywgZHJjcENvbmZpZ0ZpbGVzKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGluaXREcmNwKGRyY3BBcmdzOiBhbnksIGRyY3BDb25maWdGaWxlczogc3RyaW5nW10pOiBQcm9taXNlPERyY3BDb25maWc+IHtcbiAgdmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2RyLWNvbXAtcGFja2FnZS93ZmgvbGliL2NvbmZpZycpO1xuXG4gIGlmIChkcmNwQXJncy5jID09IG51bGwpXG4gICAgZHJjcEFyZ3MuYyA9IFtdO1xuICBkcmNwQXJncy5jLnB1c2goLi4uZHJjcENvbmZpZ0ZpbGVzKTtcbiAgYXdhaXQgY29uZmlnLmluaXQoZHJjcEFyZ3MpO1xuICByZXF1aXJlKCdkci1jb21wLXBhY2thZ2Uvd2ZoL2xpYi9sb2dDb25maWcnKShjb25maWcoKSk7XG4gIHJldHVybiBjb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWdXZWJwYWNrKHBhcmFtOiBBbmd1bGFyQ2xpUGFyYW0sIHdlYnBhY2tDb25maWc6IHdlYnBhY2suQ29uZmlndXJhdGlvbixcbiAgZHJjcENvbmZpZ1NldHRpbmc6IHtkZXZNb2RlOiBib29sZWFufSkge1xuICBjb25zdCBjaGFuZ2VXZWJwYWNrQ29uZmlnOiB0eXBlb2YgX19jaGFuZ2VXZWJwYWNrQ29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnLXdlYnBhY2snKS5kZWZhdWx0O1xuICBjaGFuZ2VXZWJwYWNrQ29uZmlnKHBhcmFtLCB3ZWJwYWNrQ29uZmlnLCBkcmNwQ29uZmlnU2V0dGluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1JbmRleEh0bWwoY29udGVudDogc3RyaW5nKSB7XG4gIGNvbnN0IHRyYW5zOiB0eXBlb2YgX3RyYW5zZm9ybUluZGV4SHRtbCA9IHJlcXVpcmUoJy4uL2NvbmZpZy13ZWJwYWNrJykudHJhbnNmb3JtSW5kZXhIdG1sO1xuICByZXR1cm4gdHJhbnMoY29udGVudCk7XG59XG5cbmV4cG9ydCB0eXBlIGJ1aWxkV2VicGFja0NvbmZpZ0Z1bmMgPSAoYnJvd3Nlck9wdGlvbnM6IEFuZ3VsYXJCdWlsZGVyT3B0aW9ucykgPT4gYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJDbGlQYXJhbSB7XG4gIGJ1aWxkZXJDb25maWc/OiBEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucztcbiAgYnJvd3Nlck9wdGlvbnM6IEFuZ3VsYXJCdWlsZGVyT3B0aW9ucztcbiAgc3NyOiBib29sZWFuOyAvLyBJcyBzZXJ2ZXIgc2lkZSAvIHByZXJlbmRlclxuICAvLyB3ZWJwYWNrQ29uZmlnOiBhbnk7XG4gIC8vIHByb2plY3RSb290OiBzdHJpbmc7XG4gIC8vIGFyZ3Y6IGFueTtcbn1cblxuZXhwb3J0IHR5cGUgTm9ybWFsaXplZEFuZ3VsYXJCdWlsZFNjaGVtYSA9IE5vcm1hbGl6ZWRCcm93c2VyQnVpbGRlclNjaGVtYSB8IE5vcm1hbGl6ZWRTZXJ2ZXJCdWlsZGVyU2VydmVyU2NoZW1hO1xuLy8gTm9ybWFsaXplZEthcm1hQnVpbGRlclNjaGVtYTtcblxuZXhwb3J0IHR5cGUgQW5ndWxhckJ1aWxkZXJPcHRpb25zID1cbiAgTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hICYgTm9ybWFsaXplZFNlcnZlckJ1aWxkZXJTZXJ2ZXJTY2hlbWEgJlxuICAvLyBOb3JtYWxpemVkS2FybWFCdWlsZGVyU2NoZW1hICZcbiAgRHJjcEJ1aWxkZXJPcHRpb25zICYganNvbi5Kc29uT2JqZWN0O1xuXG5leHBvcnQgaW50ZXJmYWNlIERyY3BCdWlsZGVyT3B0aW9ucyB7XG4gIGRyY3BBcmdzOiBhbnk7XG4gIGRyY3BDb25maWc6IHN0cmluZztcbn1cbiJdfQ==
