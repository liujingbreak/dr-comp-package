"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeTsConfigFile = void 0;
const misc_1 = require("@wfh/plink/wfh/dist/utils/misc");
const package_mgr_1 = require("@wfh/plink/wfh/dist/package-mgr");
const plink_1 = require("@wfh/plink");
const typescript_1 = __importDefault(require("typescript"));
const utils_1 = require("./utils");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const log = plink_1.log4File(__filename);
function changeTsConfigFile() {
    // const craOptions = getCmdOptions();
    const plinkRoot = plink_1.getRootDir();
    const rootDir = misc_1.closestCommonParentDir(Array.from(package_mgr_1.getState().project2Packages.keys()).map(prjDir => path_1.default.resolve(plinkRoot, prjDir))).replace(/\\/g, '/');
    const tsconfigJson = typescript_1.default.readConfigFile(process.env._plink_cra_scripts_tsConfig, (file) => fs_1.default.readFileSync(file, 'utf-8')).config;
    // JSON.parse(fs.readFileSync(process.env._plink_cra_scripts_tsConfig!, 'utf8'));
    const tsconfigDir = path_1.default.dirname(process.env._plink_cra_scripts_tsConfig);
    // CRA does not allow we configure "compilerOptions.paths" in _plink_cra_scripts_tsConfig
    // (see create-react-app/packages/react-scripts/scripts/utils/verifyTypeScriptSetup.js)
    // therefore, initial paths is always empty.
    const pathMapping = tsconfigJson.compilerOptions.paths = {};
    // if (tsconfigJson.compilerOptions && tsconfigJson.compilerOptions.paths) {
    //   Object.assign(pathMapping, tsconfigJson.compilerOptions.paths);
    // }
    if (tsconfigJson.compilerOptions.baseUrl == null) {
        tsconfigJson.compilerOptions.baseUrl = './';
    }
    for (const [name, { realPath }] of package_mgr_1.getState().srcPackages.entries() || []) {
        const realDir = path_1.default.relative(tsconfigDir, realPath).replace(/\\/g, '/');
        pathMapping[name] = [realDir];
        pathMapping[name + '/*'] = [realDir + '/*'];
    }
    if (package_mgr_1.getState().linkedDrcp) {
        const drcpDir = path_1.default.relative(tsconfigDir, package_mgr_1.getState().linkedDrcp.realPath).replace(/\\/g, '/');
        pathMapping['@wfh/plink'] = [drcpDir];
        pathMapping['@wfh/plink/*'] = [drcpDir + '/*'];
    }
    tsconfigJson.compilerOptions.paths = pathMapping;
    plink_1.setTsCompilerOptForNodePath(tsconfigDir, './', tsconfigJson.compilerOptions, {
        workspaceDir: plink_1.plinkEnv.workDir || process.cwd()
    });
    utils_1.runTsConfigHandlers(tsconfigJson.compilerOptions);
    tsconfigJson.include = [path_1.default.relative(plink_1.plinkEnv.workDir || process.cwd(), process.env._plink_cra_scripts_indexJs)];
    tsconfigJson.compilerOptions.rootDir = rootDir;
    const co = typescript_1.default.parseJsonConfigFileContent(tsconfigJson, typescript_1.default.sys, plink_1.plinkEnv.workDir.replace(/\\/g, '/'), undefined, process.env._plink_cra_scripts_tsConfig).options;
    log.info('[change-tsconfig] tsconfigJson:', JSON.stringify(tsconfigJson, null, '  '));
    // fs.writeFileSync(Path.resolve('tsconfig.json'), JSON.stringify(tsconfigJson, null, '  '));
    return co;
}
exports.changeTsConfigFile = changeTsConfigFile;
//# sourceMappingURL=data:application/json;base64,