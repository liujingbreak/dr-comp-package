"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configFileInPackage = void 0;
const utils_1 = require("./utils");
const build_target_helper_1 = require("./build-target-helper");
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const fs_1 = __importDefault(require("fs"));
// import type {PlinkEnv} from '@wfh/plink/wfh/dist/node-path';
const config_1 = __importDefault(require("@wfh/plink/wfh/dist/config"));
const config_handler_1 = require("@wfh/plink/wfh/dist/config-handler");
const fs_extra_1 = __importDefault(require("fs-extra"));
const __plink_1 = __importDefault(require("__plink"));
const log = __plink_1.default.logger;
let craScriptsPaths;
function paths() {
    if (craScriptsPaths) {
        return craScriptsPaths;
    }
    const cmdOption = utils_1.getCmdOptions();
    const foundPkg = build_target_helper_1.findPackage(cmdOption.buildTarget);
    if (foundPkg == null) {
        throw new Error(`Can not find package for name like ${cmdOption.buildTarget}`);
    }
    const { dir, packageJson } = foundPkg;
    const paths = require(path_1.default.resolve('node_modules/react-scripts/config/paths'));
    const changedPaths = paths;
    if (cmdOption.buildType === 'lib') {
        changedPaths.appBuild = path_1.default.resolve(dir, 'build');
        changedPaths.appIndexJs = path_1.default.resolve(dir, lodash_1.default.get(packageJson, 'dr.cra-lib-entry', 'public_api.ts'));
    }
    else if (cmdOption.buildType === 'app') {
        changedPaths.appIndexJs = path_1.default.resolve(dir, lodash_1.default.get(packageJson, 'dr.cra-app-entry', 'start.tsx'));
        changedPaths.appBuild = config_1.default.resolve('staticDir');
    }
    log.debug(changedPaths);
    config_1.default.configHandlerMgr().runEachSync((cfgFile, result, handler) => {
        if (handler.changeCraPaths != null) {
            log.info('Execute CRA scripts paths overrides', cfgFile);
            handler.changeCraPaths(changedPaths);
        }
    });
    exports.configFileInPackage = path_1.default.resolve(dir, lodash_1.default.get(packageJson, ['dr', 'config-overrides-path'], 'config-overrides.ts'));
    if (fs_1.default.existsSync(exports.configFileInPackage)) {
        const cfgMgr = new config_handler_1.ConfigHandlerMgr([exports.configFileInPackage]);
        cfgMgr.runEachSync((cfgFile, result, handler) => {
            if (handler.changeCraPaths != null) {
                log.info('Execute CRA scripts paths configuration overrides from ', cfgFile);
                handler.changeCraPaths(changedPaths);
            }
        });
    }
    else {
        exports.configFileInPackage = null;
    }
    // tslint:disable-next-line: no-console
    // console.log('[cra-scripts-paths] changed react-scripts paths:\n', changedPaths);
    craScriptsPaths = changedPaths;
    fs_extra_1.default.mkdirpSync(changedPaths.appBuild);
    // fork-ts-checker needs this file path
    process.env._plink_cra_scripts_indexJs = changedPaths.appIndexJs;
    process.env._plink_cra_scripts_tsConfig = changedPaths.appTsConfig;
    return changedPaths;
}
exports.default = paths;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JhLXNjcmlwdHMtcGF0aHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmEtc2NyaXB0cy1wYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtQ0FBc0M7QUFDdEMsK0RBQWtEO0FBQ2xELGdEQUF3QjtBQUN4QixvREFBdUI7QUFDdkIsNENBQW9CO0FBQ3BCLCtEQUErRDtBQUMvRCx3RUFBOEM7QUFDOUMsdUVBQXNFO0FBRXRFLHdEQUE2QjtBQUM3QixzREFBNEI7QUFDNUIsTUFBTSxHQUFHLEdBQUcsaUJBQUssQ0FBQyxNQUFNLENBQUM7QUF5QnpCLElBQUksZUFBZ0MsQ0FBQztBQUdyQyxTQUF3QixLQUFLO0lBQzNCLElBQUksZUFBZSxFQUFFO1FBQ25CLE9BQU8sZUFBZSxDQUFDO0tBQ3hCO0lBQ0QsTUFBTSxTQUFTLEdBQUcscUJBQWEsRUFBRSxDQUFDO0lBQ2xDLE1BQU0sUUFBUSxHQUFHLGlDQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BELElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtRQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztLQUNoRjtJQUNELE1BQU0sRUFBQyxHQUFHLEVBQUUsV0FBVyxFQUFDLEdBQUcsUUFBUSxDQUFDO0lBRXBDLE1BQU0sS0FBSyxHQUFvQixPQUFPLENBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7SUFDaEcsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBRTNCLElBQUksU0FBUyxDQUFDLFNBQVMsS0FBSyxLQUFLLEVBQUU7UUFDakMsWUFBWSxDQUFDLFFBQVEsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuRCxZQUFZLENBQUMsVUFBVSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0tBQ3RHO1NBQU0sSUFBSSxTQUFTLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtRQUN4QyxZQUFZLENBQUMsVUFBVSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2pHLFlBQVksQ0FBQyxRQUFRLEdBQUcsZ0JBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDbkQ7SUFDRCxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXhCLGdCQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxXQUFXLENBQXNCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUNwRixJQUFJLE9BQU8sQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO1lBQ2xDLEdBQUcsQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDekQsT0FBTyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0QztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsMkJBQW1CLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsZ0JBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBRXBILElBQUksWUFBRSxDQUFDLFVBQVUsQ0FBQywyQkFBbUIsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLElBQUksaUNBQWdCLENBQUMsQ0FBQywyQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLFdBQVcsQ0FBc0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQ25FLElBQUksT0FBTyxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0JBQ2xDLEdBQUcsQ0FBQyxJQUFJLENBQUMseURBQXlELEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzdFLE9BQU8sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDdEM7UUFDSCxDQUFDLENBQUMsQ0FBQztLQUNKO1NBQU07UUFDTCwyQkFBbUIsR0FBRyxJQUFJLENBQUM7S0FDNUI7SUFDRCx1Q0FBdUM7SUFDdkMsbUZBQW1GO0lBQ25GLGVBQWUsR0FBRyxZQUFZLENBQUM7SUFDL0Isa0JBQUssQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLHVDQUF1QztJQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUM7SUFDakUsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDO0lBQ25FLE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFuREQsd0JBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtnZXRDbWRPcHRpb25zfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7ZmluZFBhY2thZ2V9IGZyb20gJy4vYnVpbGQtdGFyZ2V0LWhlbHBlcic7XG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuLy8gaW1wb3J0IHR5cGUge1BsaW5rRW52fSBmcm9tICdAd2ZoL3BsaW5rL3dmaC9kaXN0L25vZGUtcGF0aCc7XG5pbXBvcnQgcENmZyBmcm9tICdAd2ZoL3BsaW5rL3dmaC9kaXN0L2NvbmZpZyc7XG5pbXBvcnQgeyBDb25maWdIYW5kbGVyTWdyIH0gZnJvbSAnQHdmaC9wbGluay93ZmgvZGlzdC9jb25maWctaGFuZGxlcic7XG5pbXBvcnQge1JlYWN0U2NyaXB0c0hhbmRsZXJ9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGZzZXh0IGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwbGluayBmcm9tICdfX3BsaW5rJztcbmNvbnN0IGxvZyA9IHBsaW5rLmxvZ2dlcjtcblxuZXhwb3J0IGludGVyZmFjZSBDcmFTY3JpcHRzUGF0aHMge1xuICBkb3RlbnY6IHN0cmluZztcbiAgYXBwUGF0aDogc3RyaW5nO1xuICBhcHBCdWlsZDogc3RyaW5nO1xuICBhcHBQdWJsaWM6IHN0cmluZztcbiAgYXBwSHRtbDogc3RyaW5nO1xuICBhcHBJbmRleEpzOiBzdHJpbmc7XG4gIGFwcFBhY2thZ2VKc29uOiBzdHJpbmc7XG4gIGFwcFNyYzogc3RyaW5nO1xuICBhcHBUc0NvbmZpZzogc3RyaW5nO1xuICBhcHBKc0NvbmZpZzogc3RyaW5nO1xuICB5YXJuTG9ja0ZpbGU6IHN0cmluZztcbiAgdGVzdHNTZXR1cDogc3RyaW5nO1xuICBwcm94eVNldHVwOiBzdHJpbmc7XG4gIGFwcE5vZGVNb2R1bGVzOiBzdHJpbmc7XG4gIHB1YmxpY1VybE9yUGF0aDogc3RyaW5nO1xuICAvLyBUaGVzZSBwcm9wZXJ0aWVzIG9ubHkgZXhpc3QgYmVmb3JlIGVqZWN0aW5nOlxuICBvd25QYXRoOiBzdHJpbmc7XG4gIG93bk5vZGVNb2R1bGVzOiBzdHJpbmc7IC8vIFRoaXMgaXMgZW1wdHkgb24gbnBtIDNcbiAgYXBwVHlwZURlY2xhcmF0aW9uczogc3RyaW5nO1xuICBvd25UeXBlRGVjbGFyYXRpb25zOiBzdHJpbmc7XG59XG5cbmxldCBjcmFTY3JpcHRzUGF0aHM6IENyYVNjcmlwdHNQYXRocztcbmV4cG9ydCBsZXQgY29uZmlnRmlsZUluUGFja2FnZTogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGF0aHMoKSB7XG4gIGlmIChjcmFTY3JpcHRzUGF0aHMpIHtcbiAgICByZXR1cm4gY3JhU2NyaXB0c1BhdGhzO1xuICB9XG4gIGNvbnN0IGNtZE9wdGlvbiA9IGdldENtZE9wdGlvbnMoKTtcbiAgY29uc3QgZm91bmRQa2cgPSBmaW5kUGFja2FnZShjbWRPcHRpb24uYnVpbGRUYXJnZXQpO1xuICBpZiAoZm91bmRQa2cgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2FuIG5vdCBmaW5kIHBhY2thZ2UgZm9yIG5hbWUgbGlrZSAke2NtZE9wdGlvbi5idWlsZFRhcmdldH1gKTtcbiAgfVxuICBjb25zdCB7ZGlyLCBwYWNrYWdlSnNvbn0gPSBmb3VuZFBrZztcblxuICBjb25zdCBwYXRoczogQ3JhU2NyaXB0c1BhdGhzID0gcmVxdWlyZShQYXRoLnJlc29sdmUoJ25vZGVfbW9kdWxlcy9yZWFjdC1zY3JpcHRzL2NvbmZpZy9wYXRocycpKTtcbiAgY29uc3QgY2hhbmdlZFBhdGhzID0gcGF0aHM7XG5cbiAgaWYgKGNtZE9wdGlvbi5idWlsZFR5cGUgPT09ICdsaWInKSB7XG4gICAgY2hhbmdlZFBhdGhzLmFwcEJ1aWxkID0gUGF0aC5yZXNvbHZlKGRpciwgJ2J1aWxkJyk7XG4gICAgY2hhbmdlZFBhdGhzLmFwcEluZGV4SnMgPSBQYXRoLnJlc29sdmUoZGlyLCBfLmdldChwYWNrYWdlSnNvbiwgJ2RyLmNyYS1saWItZW50cnknLCAncHVibGljX2FwaS50cycpKTtcbiAgfSBlbHNlIGlmIChjbWRPcHRpb24uYnVpbGRUeXBlID09PSAnYXBwJykge1xuICAgIGNoYW5nZWRQYXRocy5hcHBJbmRleEpzID0gUGF0aC5yZXNvbHZlKGRpciwgXy5nZXQocGFja2FnZUpzb24sICdkci5jcmEtYXBwLWVudHJ5JywgJ3N0YXJ0LnRzeCcpKTtcbiAgICBjaGFuZ2VkUGF0aHMuYXBwQnVpbGQgPSBwQ2ZnLnJlc29sdmUoJ3N0YXRpY0RpcicpO1xuICB9XG4gIGxvZy5kZWJ1ZyhjaGFuZ2VkUGF0aHMpO1xuXG4gIHBDZmcuY29uZmlnSGFuZGxlck1ncigpLnJ1bkVhY2hTeW5jPFJlYWN0U2NyaXB0c0hhbmRsZXI+KChjZmdGaWxlLCByZXN1bHQsIGhhbmRsZXIpID0+IHtcbiAgICBpZiAoaGFuZGxlci5jaGFuZ2VDcmFQYXRocyAhPSBudWxsKSB7XG4gICAgICBsb2cuaW5mbygnRXhlY3V0ZSBDUkEgc2NyaXB0cyBwYXRocyBvdmVycmlkZXMnLCBjZmdGaWxlKTtcbiAgICAgIGhhbmRsZXIuY2hhbmdlQ3JhUGF0aHMoY2hhbmdlZFBhdGhzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbmZpZ0ZpbGVJblBhY2thZ2UgPSBQYXRoLnJlc29sdmUoZGlyLCBfLmdldChwYWNrYWdlSnNvbiwgWydkcicsICdjb25maWctb3ZlcnJpZGVzLXBhdGgnXSwgJ2NvbmZpZy1vdmVycmlkZXMudHMnKSk7XG5cbiAgaWYgKGZzLmV4aXN0c1N5bmMoY29uZmlnRmlsZUluUGFja2FnZSkpIHtcbiAgICBjb25zdCBjZmdNZ3IgPSBuZXcgQ29uZmlnSGFuZGxlck1ncihbY29uZmlnRmlsZUluUGFja2FnZV0pO1xuICAgIGNmZ01nci5ydW5FYWNoU3luYzxSZWFjdFNjcmlwdHNIYW5kbGVyPigoY2ZnRmlsZSwgcmVzdWx0LCBoYW5kbGVyKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlci5jaGFuZ2VDcmFQYXRocyAhPSBudWxsKSB7XG4gICAgICAgIGxvZy5pbmZvKCdFeGVjdXRlIENSQSBzY3JpcHRzIHBhdGhzIGNvbmZpZ3VyYXRpb24gb3ZlcnJpZGVzIGZyb20gJywgY2ZnRmlsZSk7XG4gICAgICAgIGhhbmRsZXIuY2hhbmdlQ3JhUGF0aHMoY2hhbmdlZFBhdGhzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWdGaWxlSW5QYWNrYWdlID0gbnVsbDtcbiAgfVxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbnNvbGVcbiAgLy8gY29uc29sZS5sb2coJ1tjcmEtc2NyaXB0cy1wYXRoc10gY2hhbmdlZCByZWFjdC1zY3JpcHRzIHBhdGhzOlxcbicsIGNoYW5nZWRQYXRocyk7XG4gIGNyYVNjcmlwdHNQYXRocyA9IGNoYW5nZWRQYXRocztcbiAgZnNleHQubWtkaXJwU3luYyhjaGFuZ2VkUGF0aHMuYXBwQnVpbGQpO1xuICAvLyBmb3JrLXRzLWNoZWNrZXIgbmVlZHMgdGhpcyBmaWxlIHBhdGhcbiAgcHJvY2Vzcy5lbnYuX3BsaW5rX2NyYV9zY3JpcHRzX2luZGV4SnMgPSBjaGFuZ2VkUGF0aHMuYXBwSW5kZXhKcztcbiAgcHJvY2Vzcy5lbnYuX3BsaW5rX2NyYV9zY3JpcHRzX3RzQ29uZmlnID0gY2hhbmdlZFBhdGhzLmFwcFRzQ29uZmlnO1xuICByZXR1cm4gY2hhbmdlZFBhdGhzO1xufVxuXG5cbiJdfQ==