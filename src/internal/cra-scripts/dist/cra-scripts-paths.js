"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configFileInPackage = void 0;
const utils_1 = require("./utils");
const build_target_helper_1 = require("./build-target-helper");
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const fs_1 = __importDefault(require("fs"));
// import type {PlinkEnv} from '@wfh/plink/wfh/dist/node-path';
const config_1 = __importDefault(require("@wfh/plink/wfh/dist/config"));
const config_handler_1 = require("@wfh/plink/wfh/dist/config-handler");
const log4js_1 = __importDefault(require("log4js"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const log = log4js_1.default.getLogger('cra-scripts-paths');
let craScriptsPaths;
function paths() {
    if (craScriptsPaths) {
        return craScriptsPaths;
    }
    const cmdOption = utils_1.getCmdOptions();
    const foundPkg = build_target_helper_1.findPackage(cmdOption.buildTarget);
    if (foundPkg == null) {
        throw new Error(`Can not find package for name like ${cmdOption.buildTarget}`);
    }
    const { dir, packageJson } = foundPkg;
    const paths = require(path_1.default.resolve('node_modules/react-scripts/config/paths'));
    const changedPaths = paths;
    // console.log('[debug] ', foundPkg);
    if (cmdOption.buildType === 'lib') {
        changedPaths.appBuild = path_1.default.resolve(dir, 'build');
        changedPaths.appIndexJs = path_1.default.resolve(dir, lodash_1.default.get(packageJson, 'dr.cra-lib-entry', 'public_api.ts'));
    }
    else if (cmdOption.buildType === 'app') {
        changedPaths.appIndexJs = path_1.default.resolve(dir, lodash_1.default.get(packageJson, 'dr.cra-app-entry', 'start.tsx'));
        changedPaths.appBuild = config_1.default.resolve('staticDir');
    }
    config_1.default.configHandlerMgr().runEachSync((cfgFile, result, handler) => {
        if (handler.changeCraPaths != null) {
            log.info('Execute CRA scripts paths overrides', cfgFile);
            handler.changeCraPaths(changedPaths);
        }
    });
    exports.configFileInPackage = path_1.default.resolve(dir, lodash_1.default.get(packageJson, ['dr', 'config-overrides-path'], 'config-overrides.ts'));
    if (fs_1.default.existsSync(exports.configFileInPackage)) {
        const cfgMgr = new config_handler_1.ConfigHandlerMgr([exports.configFileInPackage]);
        cfgMgr.runEachSync((cfgFile, result, handler) => {
            if (handler.changeCraPaths != null) {
                log.info('Execute CRA scripts paths configuration overrides from ', cfgFile);
                handler.changeCraPaths(changedPaths);
            }
        });
    }
    else {
        exports.configFileInPackage = null;
    }
    // tslint:disable-next-line: no-console
    // console.log('[cra-scripts-paths] changed react-scripts paths:\n', changedPaths);
    craScriptsPaths = changedPaths;
    fs_extra_1.default.mkdirpSync(changedPaths.appBuild);
    // fork-ts-checker needs this file path
    process.env._plink_cra_scripts_indexJs = changedPaths.appIndexJs;
    process.env._plink_cra_scripts_tsConfig = changedPaths.appTsConfig;
    return changedPaths;
}
exports.default = paths;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JhLXNjcmlwdHMtcGF0aHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjcmEtc2NyaXB0cy1wYXRocy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtQ0FBc0M7QUFDdEMsK0RBQWtEO0FBQ2xELGdEQUF3QjtBQUN4QixvREFBdUI7QUFDdkIsNENBQW9CO0FBQ3BCLCtEQUErRDtBQUMvRCx3RUFBOEM7QUFDOUMsdUVBQXNFO0FBRXRFLG9EQUE0QjtBQUM1Qix3REFBNkI7QUFDN0IsTUFBTSxHQUFHLEdBQUcsZ0JBQU0sQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQXlCbEQsSUFBSSxlQUFnQyxDQUFDO0FBR3JDLFNBQXdCLEtBQUs7SUFDM0IsSUFBSSxlQUFlLEVBQUU7UUFDbkIsT0FBTyxlQUFlLENBQUM7S0FDeEI7SUFDRCxNQUFNLFNBQVMsR0FBRyxxQkFBYSxFQUFFLENBQUM7SUFDbEMsTUFBTSxRQUFRLEdBQUcsaUNBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEQsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0tBQ2hGO0lBQ0QsTUFBTSxFQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUMsR0FBRyxRQUFRLENBQUM7SUFFcEMsTUFBTSxLQUFLLEdBQW9CLE9BQU8sQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUMsQ0FBQztJQUNoRyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUM7SUFFM0IscUNBQXFDO0lBQ3JDLElBQUksU0FBUyxDQUFDLFNBQVMsS0FBSyxLQUFLLEVBQUU7UUFDakMsWUFBWSxDQUFDLFFBQVEsR0FBRyxjQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuRCxZQUFZLENBQUMsVUFBVSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO0tBQ3RHO1NBQU0sSUFBSSxTQUFTLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtRQUN4QyxZQUFZLENBQUMsVUFBVSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2pHLFlBQVksQ0FBQyxRQUFRLEdBQUcsZ0JBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDbkQ7SUFFRCxnQkFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsV0FBVyxDQUFzQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7UUFDcEYsSUFBSSxPQUFPLENBQUMsY0FBYyxJQUFJLElBQUksRUFBRTtZQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3pELE9BQU8sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDdEM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILDJCQUFtQixHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGdCQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUVwSCxJQUFJLFlBQUUsQ0FBQyxVQUFVLENBQUMsMkJBQW1CLENBQUMsRUFBRTtRQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLGlDQUFnQixDQUFDLENBQUMsMkJBQW1CLENBQUMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxXQUFXLENBQXNCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNuRSxJQUFJLE9BQU8sQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO2dCQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLHlEQUF5RCxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUM3RSxPQUFPLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7S0FDSjtTQUFNO1FBQ0wsMkJBQW1CLEdBQUcsSUFBSSxDQUFDO0tBQzVCO0lBQ0QsdUNBQXVDO0lBQ3ZDLG1GQUFtRjtJQUNuRixlQUFlLEdBQUcsWUFBWSxDQUFDO0lBQy9CLGtCQUFLLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4Qyx1Q0FBdUM7SUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQztJQUNuRSxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBbkRELHdCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0Q21kT3B0aW9uc30gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge2ZpbmRQYWNrYWdlfSBmcm9tICcuL2J1aWxkLXRhcmdldC1oZWxwZXInO1xuaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbi8vIGltcG9ydCB0eXBlIHtQbGlua0Vudn0gZnJvbSAnQHdmaC9wbGluay93ZmgvZGlzdC9ub2RlLXBhdGgnO1xuaW1wb3J0IHBDZmcgZnJvbSAnQHdmaC9wbGluay93ZmgvZGlzdC9jb25maWcnO1xuaW1wb3J0IHsgQ29uZmlnSGFuZGxlck1nciB9IGZyb20gJ0B3ZmgvcGxpbmsvd2ZoL2Rpc3QvY29uZmlnLWhhbmRsZXInO1xuaW1wb3J0IHtSZWFjdFNjcmlwdHNIYW5kbGVyfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBsb2c0anMgZnJvbSAnbG9nNGpzJztcbmltcG9ydCBmc2V4dCBmcm9tICdmcy1leHRyYSc7XG5jb25zdCBsb2cgPSBsb2c0anMuZ2V0TG9nZ2VyKCdjcmEtc2NyaXB0cy1wYXRocycpO1xuXG5leHBvcnQgaW50ZXJmYWNlIENyYVNjcmlwdHNQYXRocyB7XG4gIGRvdGVudjogc3RyaW5nO1xuICBhcHBQYXRoOiBzdHJpbmc7XG4gIGFwcEJ1aWxkOiBzdHJpbmc7XG4gIGFwcFB1YmxpYzogc3RyaW5nO1xuICBhcHBIdG1sOiBzdHJpbmc7XG4gIGFwcEluZGV4SnM6IHN0cmluZztcbiAgYXBwUGFja2FnZUpzb246IHN0cmluZztcbiAgYXBwU3JjOiBzdHJpbmc7XG4gIGFwcFRzQ29uZmlnOiBzdHJpbmc7XG4gIGFwcEpzQ29uZmlnOiBzdHJpbmc7XG4gIHlhcm5Mb2NrRmlsZTogc3RyaW5nO1xuICB0ZXN0c1NldHVwOiBzdHJpbmc7XG4gIHByb3h5U2V0dXA6IHN0cmluZztcbiAgYXBwTm9kZU1vZHVsZXM6IHN0cmluZztcbiAgcHVibGljVXJsT3JQYXRoOiBzdHJpbmc7XG4gIC8vIFRoZXNlIHByb3BlcnRpZXMgb25seSBleGlzdCBiZWZvcmUgZWplY3Rpbmc6XG4gIG93blBhdGg6IHN0cmluZztcbiAgb3duTm9kZU1vZHVsZXM6IHN0cmluZzsgLy8gVGhpcyBpcyBlbXB0eSBvbiBucG0gM1xuICBhcHBUeXBlRGVjbGFyYXRpb25zOiBzdHJpbmc7XG4gIG93blR5cGVEZWNsYXJhdGlvbnM6IHN0cmluZztcbn1cblxubGV0IGNyYVNjcmlwdHNQYXRoczogQ3JhU2NyaXB0c1BhdGhzO1xuZXhwb3J0IGxldCBjb25maWdGaWxlSW5QYWNrYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXRocygpIHtcbiAgaWYgKGNyYVNjcmlwdHNQYXRocykge1xuICAgIHJldHVybiBjcmFTY3JpcHRzUGF0aHM7XG4gIH1cbiAgY29uc3QgY21kT3B0aW9uID0gZ2V0Q21kT3B0aW9ucygpO1xuICBjb25zdCBmb3VuZFBrZyA9IGZpbmRQYWNrYWdlKGNtZE9wdGlvbi5idWlsZFRhcmdldCk7XG4gIGlmIChmb3VuZFBrZyA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4gbm90IGZpbmQgcGFja2FnZSBmb3IgbmFtZSBsaWtlICR7Y21kT3B0aW9uLmJ1aWxkVGFyZ2V0fWApO1xuICB9XG4gIGNvbnN0IHtkaXIsIHBhY2thZ2VKc29ufSA9IGZvdW5kUGtnO1xuXG4gIGNvbnN0IHBhdGhzOiBDcmFTY3JpcHRzUGF0aHMgPSByZXF1aXJlKFBhdGgucmVzb2x2ZSgnbm9kZV9tb2R1bGVzL3JlYWN0LXNjcmlwdHMvY29uZmlnL3BhdGhzJykpO1xuICBjb25zdCBjaGFuZ2VkUGF0aHMgPSBwYXRocztcblxuICAvLyBjb25zb2xlLmxvZygnW2RlYnVnXSAnLCBmb3VuZFBrZyk7XG4gIGlmIChjbWRPcHRpb24uYnVpbGRUeXBlID09PSAnbGliJykge1xuICAgIGNoYW5nZWRQYXRocy5hcHBCdWlsZCA9IFBhdGgucmVzb2x2ZShkaXIsICdidWlsZCcpO1xuICAgIGNoYW5nZWRQYXRocy5hcHBJbmRleEpzID0gUGF0aC5yZXNvbHZlKGRpciwgXy5nZXQocGFja2FnZUpzb24sICdkci5jcmEtbGliLWVudHJ5JywgJ3B1YmxpY19hcGkudHMnKSk7XG4gIH0gZWxzZSBpZiAoY21kT3B0aW9uLmJ1aWxkVHlwZSA9PT0gJ2FwcCcpIHtcbiAgICBjaGFuZ2VkUGF0aHMuYXBwSW5kZXhKcyA9IFBhdGgucmVzb2x2ZShkaXIsIF8uZ2V0KHBhY2thZ2VKc29uLCAnZHIuY3JhLWFwcC1lbnRyeScsICdzdGFydC50c3gnKSk7XG4gICAgY2hhbmdlZFBhdGhzLmFwcEJ1aWxkID0gcENmZy5yZXNvbHZlKCdzdGF0aWNEaXInKTtcbiAgfVxuXG4gIHBDZmcuY29uZmlnSGFuZGxlck1ncigpLnJ1bkVhY2hTeW5jPFJlYWN0U2NyaXB0c0hhbmRsZXI+KChjZmdGaWxlLCByZXN1bHQsIGhhbmRsZXIpID0+IHtcbiAgICBpZiAoaGFuZGxlci5jaGFuZ2VDcmFQYXRocyAhPSBudWxsKSB7XG4gICAgICBsb2cuaW5mbygnRXhlY3V0ZSBDUkEgc2NyaXB0cyBwYXRocyBvdmVycmlkZXMnLCBjZmdGaWxlKTtcbiAgICAgIGhhbmRsZXIuY2hhbmdlQ3JhUGF0aHMoY2hhbmdlZFBhdGhzKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbmZpZ0ZpbGVJblBhY2thZ2UgPSBQYXRoLnJlc29sdmUoZGlyLCBfLmdldChwYWNrYWdlSnNvbiwgWydkcicsICdjb25maWctb3ZlcnJpZGVzLXBhdGgnXSwgJ2NvbmZpZy1vdmVycmlkZXMudHMnKSk7XG5cbiAgaWYgKGZzLmV4aXN0c1N5bmMoY29uZmlnRmlsZUluUGFja2FnZSkpIHtcbiAgICBjb25zdCBjZmdNZ3IgPSBuZXcgQ29uZmlnSGFuZGxlck1ncihbY29uZmlnRmlsZUluUGFja2FnZV0pO1xuICAgIGNmZ01nci5ydW5FYWNoU3luYzxSZWFjdFNjcmlwdHNIYW5kbGVyPigoY2ZnRmlsZSwgcmVzdWx0LCBoYW5kbGVyKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlci5jaGFuZ2VDcmFQYXRocyAhPSBudWxsKSB7XG4gICAgICAgIGxvZy5pbmZvKCdFeGVjdXRlIENSQSBzY3JpcHRzIHBhdGhzIGNvbmZpZ3VyYXRpb24gb3ZlcnJpZGVzIGZyb20gJywgY2ZnRmlsZSk7XG4gICAgICAgIGhhbmRsZXIuY2hhbmdlQ3JhUGF0aHMoY2hhbmdlZFBhdGhzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWdGaWxlSW5QYWNrYWdlID0gbnVsbDtcbiAgfVxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbnNvbGVcbiAgLy8gY29uc29sZS5sb2coJ1tjcmEtc2NyaXB0cy1wYXRoc10gY2hhbmdlZCByZWFjdC1zY3JpcHRzIHBhdGhzOlxcbicsIGNoYW5nZWRQYXRocyk7XG4gIGNyYVNjcmlwdHNQYXRocyA9IGNoYW5nZWRQYXRocztcbiAgZnNleHQubWtkaXJwU3luYyhjaGFuZ2VkUGF0aHMuYXBwQnVpbGQpO1xuICAvLyBmb3JrLXRzLWNoZWNrZXIgbmVlZHMgdGhpcyBmaWxlIHBhdGhcbiAgcHJvY2Vzcy5lbnYuX3BsaW5rX2NyYV9zY3JpcHRzX2luZGV4SnMgPSBjaGFuZ2VkUGF0aHMuYXBwSW5kZXhKcztcbiAgcHJvY2Vzcy5lbnYuX3BsaW5rX2NyYV9zY3JpcHRzX3RzQ29uZmlnID0gY2hhbmdlZFBhdGhzLmFwcFRzQ29uZmlnO1xuICByZXR1cm4gY2hhbmdlZFBhdGhzO1xufVxuXG5cbiJdfQ==