#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const fs_1 = __importDefault(require("fs"));
const patch_text_1 = __importDefault(require("@wfh/plink/wfh/dist/utils/patch-text"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../utils");
const dist_1 = require("@wfh/plink/wfh/dist");
const initInjectors_1 = __importDefault(require("@wfh/webpack-common/dist/initInjectors"));
const log4js_1 = __importDefault(require("log4js"));
const cli = (program, withGlobalOptions) => {
    const genCmd = program.command('cra-gen <dir>')
        .description('Generate a sample package in specific directory')
        .option('-d, --dry-run', 'Do not generate files, just list new file names', false)
        .action((dir) => __awaiter(void 0, void 0, void 0, function* () {
        (yield Promise.resolve().then(() => __importStar(require('./cli-gen')))).genPackage(dir, genCmd.opts().dryRun);
    }));
    const buildCmd = program.command('cra-build <app|lib> <package-name>')
        .description('Compile react application or library, <package-name> is the target package name')
        .action((type, pkgName) => __awaiter(void 0, void 0, void 0, function* () {
        yield initEverything(buildCmd, type, pkgName);
        require('react-scripts/scripts/build');
    }));
    withClicOpt(buildCmd);
    withGlobalOptions(buildCmd);
    const initCmd = program.command('cra-init')
        .description('Initial workspace files based on files which are newly generated by create-react-app')
        .action(() => __awaiter(void 0, void 0, void 0, function* () {
        yield dist_1.initConfigAsync(initCmd.opts());
        const log = log4js_1.default.getLogger('cra');
        const { default: parse } = yield Promise.resolve().then(() => __importStar(require('@wfh/plink/wfh/dist/utils/json-sync-parser')));
        let fileContent = fs_1.default.readFileSync('tsconfig.json', 'utf8');
        const ast = parse(fileContent);
        let pMap = new Map(ast.properties.map(el => [/^"(.*)"$/.exec(el.name.text)[1], el]));
        const replacements = [];
        if (pMap.has('extends')) {
            // tslint:disable-next-line: no-console
            console.log('there is a "extends" in tsconfig.json, skip it');
        }
        else {
            const baseTsConfig = path_1.default.relative(process.cwd(), require.resolve('@wfh/plink/wfh/tsconfig-base.json')).replace(/\\/g, '/');
            replacements.push({ start: 1, end: 1, replacement: `\n  "extends": "${baseTsConfig}",` });
        }
        // log.warn(Array.from(pMap.keys()));
        const coAst = pMap.get('compilerOptions').value;
        const rootDir = coAst.properties.find(prop => prop.name.text === '"rootDir"');
        if (rootDir == null) {
            replacements.push({ start: coAst.start + 1, end: coAst.start + 1,
                replacement: '\n    "rootDir": ".",' });
        }
        if (replacements.length > 0) {
            fileContent = patch_text_1.default(fileContent, replacements);
            fs_1.default.writeFileSync('tsconfig.json', fileContent);
            log.info('tsconfig.json is updated.');
        }
    }));
    withGlobalOptions(initCmd);
};
exports.default = cli;
function withClicOpt(cmd) {
    cmd.option('-w, --watch', 'Watch file changes and compile', false)
        .option('--dev', 'set NODE_ENV to "development", enable react-scripts in dev mode', false)
        .option('--purl, --publicUrl <string>', 'set environment variable PUBLIC_URL for react-scripts', '/');
}
function initEverything(buildCmd, type, pkgName) {
    return __awaiter(this, void 0, void 0, function* () {
        yield dist_1.initConfigAsync(buildCmd.opts());
        yield initInjectors_1.default(process.env.PUBLIC_URL || '/');
        if (!['app', 'lib'].includes(type)) {
            const log = log4js_1.default.getLogger('cra');
            log.error(`type argument must be one of "${['app', 'lib']}"`);
            return;
        }
        utils_1.saveCmdOptionsToEnv(pkgName, buildCmd, type);
        yield (yield Promise.resolve().then(() => __importStar(require('../preload')))).poo();
    });
}

//# sourceMappingURL=cli.js.map
