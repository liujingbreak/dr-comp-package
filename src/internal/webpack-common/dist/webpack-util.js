"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findLoader = void 0;
/**
 *
 * @param rules webpack configuration.module.rules
 * @param cb
 */
function findLoader(rules, cb) {
    for (const rule of rules || []) {
        if (rule.oneOf && findLoader(rule.oneOf, cb)) {
            return true;
        }
        if (rule.use) {
            if (findLoaderInRuleSetUse(rule.use, rule, cb))
                return true;
        }
        const ruleDirectLoader = rule.loader || rule.loaders;
        if (ruleDirectLoader && findLoaderInRuleSetUse(ruleDirectLoader, rule, cb)) {
            return true;
        }
    }
}
exports.findLoader = findLoader;
function findLoaderInRuleSetUse(use, rule, cb) {
    let useItems = typeof use === 'function' ? use(null) : use;
    if (!Array.isArray(useItems)) {
        useItems = [useItems];
    }
    let i = 0;
    for (const useItem of useItems) {
        if (typeof useItem === 'string') {
            if (cb(useItem, {}, i, useItems, rule)) {
                return true;
            }
        }
        else if (typeof useItem === 'function') {
            continue;
        }
        else if (useItem.loader) {
            if (cb(useItem.loader, useItem, i, useItems, rule)) {
                return true;
            }
        }
        i++;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VicGFjay11dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjay11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBOzs7O0dBSUc7QUFDSCxTQUFnQixVQUFVLENBQUMsS0FBNEIsRUFDckQsRUFLWTtJQUVaLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUUsRUFBRTtRQUM5QixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDNUMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksc0JBQXNCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO2dCQUM1QyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDckQsSUFBSSxnQkFBZ0IsSUFBSSxzQkFBc0IsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDMUUsT0FBTyxJQUFJLENBQUM7U0FDYjtLQUNGO0FBQ0gsQ0FBQztBQXJCRCxnQ0FxQkM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLEdBQXVCLEVBQUUsSUFBeUIsRUFBRSxFQUFvQztJQUN0SCxJQUFJLFFBQVEsR0FBRyxPQUFPLEdBQUcsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzVCLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3ZCO0lBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7UUFDOUIsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUN0QyxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7YUFBTSxJQUFJLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFBRTtZQUN4QyxTQUFTO1NBQ1Y7YUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDekIsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDbEQsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBQ0QsQ0FBQyxFQUFFLENBQUM7S0FDTDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2VicGFjayBmcm9tICd3ZWJwYWNrJztcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSBydWxlcyB3ZWJwYWNrIGNvbmZpZ3VyYXRpb24ubW9kdWxlLnJ1bGVzXG4gKiBAcGFyYW0gY2IgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTG9hZGVyKHJ1bGVzOiB3ZWJwYWNrLlJ1bGVTZXRSdWxlW10sXG4gIGNiOiAobG9hZGVyOiBzdHJpbmcsXG4gICAgcGFyZW50OiB3ZWJwYWNrLlJ1bGVTZXRMb2FkZXIsXG4gICAgcGFyZW50SWR4OiBudW1iZXIsXG4gICAgcGFyZW50U2libGluZ3M6IHdlYnBhY2suUnVsZVNldFVzZUl0ZW1bXSxcbiAgICBncmFuZHBhOiB3ZWJwYWNrLlJ1bGVTZXRSdWxlXG4gICkgPT4gYm9vbGVhbikge1xuXG4gIGZvciAoY29uc3QgcnVsZSBvZiBydWxlcyB8fCBbXSkge1xuICAgIGlmIChydWxlLm9uZU9mICYmIGZpbmRMb2FkZXIocnVsZS5vbmVPZiwgY2IpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHJ1bGUudXNlKSB7XG4gICAgICBpZiAoZmluZExvYWRlckluUnVsZVNldFVzZShydWxlLnVzZSwgcnVsZSwgY2IpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcnVsZURpcmVjdExvYWRlciA9IHJ1bGUubG9hZGVyIHx8IHJ1bGUubG9hZGVycztcbiAgICBpZiAocnVsZURpcmVjdExvYWRlciAmJiBmaW5kTG9hZGVySW5SdWxlU2V0VXNlKHJ1bGVEaXJlY3RMb2FkZXIsIHJ1bGUsIGNiKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRMb2FkZXJJblJ1bGVTZXRVc2UodXNlOiB3ZWJwYWNrLlJ1bGVTZXRVc2UsIHJ1bGU6IHdlYnBhY2suUnVsZVNldFJ1bGUsIGNiOiBQYXJhbWV0ZXJzPHR5cGVvZiBmaW5kTG9hZGVyPlsxXSkge1xuICBsZXQgdXNlSXRlbXMgPSB0eXBlb2YgdXNlID09PSAnZnVuY3Rpb24nID8gdXNlKG51bGwpIDogdXNlO1xuICBpZiAoIUFycmF5LmlzQXJyYXkodXNlSXRlbXMpKSB7XG4gICAgdXNlSXRlbXMgPSBbdXNlSXRlbXNdO1xuICB9XG4gIGxldCBpID0gMDtcbiAgZm9yIChjb25zdCB1c2VJdGVtIG9mIHVzZUl0ZW1zKSB7XG4gICAgaWYgKHR5cGVvZiB1c2VJdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGNiKHVzZUl0ZW0sIHt9LCBpLCB1c2VJdGVtcywgcnVsZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdXNlSXRlbSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmICh1c2VJdGVtLmxvYWRlcikge1xuICAgICAgaWYgKGNiKHVzZUl0ZW0ubG9hZGVyLCB1c2VJdGVtLCBpLCB1c2VJdGVtcywgcnVsZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGkrKztcbiAgfVxufVxuIl19