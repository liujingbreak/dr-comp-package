"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const commander_1 = require("commander");
const package_json_1 = tslib_1.__importDefault(require("../package.json"));
const path_1 = tslib_1.__importDefault(require("path"));
const cfg = require('dr-comp-package/wfh/lib/config.js');
const logConfig = require('dr-comp-package/wfh/lib/logConfig.js');
const package_runner_1 = require("dr-comp-package/wfh/dist/package-runner");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const program = new commander_1.Command();
program.version(package_json_1.default.version);
program.option('-c, --config <config-file>', 'Read config files, if there are multiple files, the latter one overrides previous one', (curr, prev) => prev.concat(curr), []);
program.option('--prop <property-path=value as JSON | literal>', '<property-path>=<value as JSON | literal> ... directly set configuration properties, property name is lodash.set() path-like string\n e.g.\n', (curr, prev) => prev.concat(curr), []);
program.option('--secret', 'secret code for deploy to "prod" environment');
const deployCmd = program.command('deploy <env> <app> [scripts-file#function]')
    .option('--static', 'as an static resource build', true)
    .action((env, app, scriptsFile) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    yield cfg.init({ c: program.opts().config.length === 0 ? undefined : program.opts().config });
    logConfig(cfg());
    // console.log(Path.resolve(__dirname, '_send-patch.js'));
    yield package_runner_1.runSinglePackage({
        target: path_1.default.resolve(__dirname, '_send-patch.js') + '#test',
        arguments: [deployCmd.opts().static]
    });
}));
program.usage(program.usage() + chalk_1.default.blueBright('\nPrebuild and deploy static resource to file server and compile node server side TS files'));
const githashCmd = program.command('githash')
    .option('--env', 'target environment, e.g. "local", "dev", "test", "stage", "prod", default as all environment')
    // .option('-a,--all', 'list git hash info for all environment artifacts')
    .action(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
    const Artifacts = require('./artifacts');
    if (githashCmd.opts().env) {
        // tslint:disable-next-line: no-console
        console.log(yield Artifacts.stringifyListVersions(githashCmd.opts().env));
    }
    else {
        // tslint:disable-next-line: no-console
        console.log(yield Artifacts.stringifyListAllVersions());
    }
}));
// ------ send --------
const sendCmd = program.command('send <app-name> <zip-file> [secret]')
    .requiredOption('--env <local | dev | test | stage | prod>', 'Deploy target, e.g. one of  "local", "dev", "test", "stage", "prod"')
    .action((appName, zip, secret) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    yield cfg.init({ c: program.opts().config.length === 0 ? undefined : program.opts().config });
    logConfig(cfg());
    package_runner_1.prepareLazyNodeInjector({});
    require('./_send-patch').send(sendCmd.opts().env, appName, zip, program.opts().secret);
}));
sendCmd.usage(sendCmd.usage() + '\nSend static resource to remote server');
// ------ mockzip --------
const mockzipCmd = program.command('mockzip');
mockzipCmd.option('-d', 'create a mock zip file in specific directory');
mockzipCmd.action(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
    yield cfg.init({ c: program.opts().config.length === 0 ? undefined : program.opts().config });
    logConfig(cfg());
    const Artifacts = require('./artifacts');
    const fileContent = '' + new Date().toUTCString();
    const file = mockzipCmd.opts().d ? mockzipCmd.opts().d : cfg.resolve('destDir', 'prebuild-mock.zip');
    fs_extra_1.default.mkdirpSync(cfg.resolve('destDir'));
    yield Artifacts.writeMockZip(file, fileContent);
    // tslint:disable-next-line: no-console
    console.log('Mock zip:', file);
}));
program.parseAsync(process.argv);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
