"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const dir_tree_1 = require("./dir-tree");
exports.DirTree = dir_tree_1.DirTree;
const url_1 = tslib_1.__importDefault(require("url"));
// import get from 'lodash/get';
// import trimStart from 'lodash/trimStart';
const trim_1 = tslib_1.__importDefault(require("lodash/trim"));
const escapeRegExp_1 = tslib_1.__importDefault(require("lodash/escapeRegExp"));
function addToHandlerTree(path, handler, tree) {
    if (path.startsWith('/'))
        path = path.slice(1);
    let leadingPath = path;
    const splittedPath = path.split('/');
    let restingRegex = null;
    const paramIdx = splittedPath.findIndex(element => element.startsWith(':') || /\s*\*\s*/.test(element));
    if (paramIdx >= 0) {
        leadingPath = splittedPath.slice(0, paramIdx).join('/');
        restingRegex = new RegExp('^' + splittedPath.slice(paramIdx).map(el => {
            if (el.startsWith(':')) {
                return '([^/]+)';
            }
            else if (el === '*') {
                return '.*';
            }
            else {
                return escapeRegExp_1.default(el);
            }
        }).join('\\/') + '$');
        // tslint:disable-next-line:no-console
        console.log(`path ${path}'s regexp:`, restingRegex);
    }
    const data = {
        handler,
        treePath: leadingPath,
        restingRegex
    };
    const existing = tree.getData(leadingPath);
    if (existing) {
        existing.push(data);
    }
    else {
        tree.putData(leadingPath, [data]);
    }
}
exports.addToHandlerTree = addToHandlerTree;
function matchedHandlers(tree, reqUrl) {
    reqUrl = trim_1.default(reqUrl, '/');
    const found = [];
    lookup(found, tree, reqUrl);
    const parsedReqUrl = url_1.default.parse(reqUrl);
    if (parsedReqUrl.query) {
        lookup(found, tree, parsedReqUrl.pathname);
    }
    return found;
}
exports.matchedHandlers = matchedHandlers;
function lookup(found, tree, reqUrl) {
    tree.getAllData(reqUrl).forEach(shandlers => {
        for (const sh of shandlers) {
            let restingReqUrl = reqUrl.slice(sh.treePath.length);
            restingReqUrl = trim_1.default(restingReqUrl, '/');
            if (sh.restingRegex == null) {
                if (restingReqUrl.length === 0) {
                    found.push(sh.handler);
                    continue;
                }
                continue;
            }
            const re = sh.restingRegex.exec(restingReqUrl);
            if (re) {
                found.push(sh.handler);
            }
        }
        return false;
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHIvaHR0cC1yZXF1ZXN0LXByb3h5L2lzb20vcGF0aC1tYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFtQztBQVEzQixrQkFSQSxrQkFBTyxDQVFBO0FBTmYsc0RBQXNCO0FBQ3RCLGdDQUFnQztBQUNoQyw0Q0FBNEM7QUFDNUMsK0RBQStCO0FBQy9CLCtFQUErQztBQXdCL0MsU0FBZ0IsZ0JBQWdCLENBQy9CLElBQVksRUFBRSxPQUFVLEVBQUUsSUFBaUM7SUFDM0QsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUN2QixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDdkIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFJLFlBQVksR0FBVyxJQUFJLENBQUM7SUFDaEMsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3hHLElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtRQUNsQixXQUFXLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hELFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDckUsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixPQUFPLFNBQVMsQ0FBQzthQUNqQjtpQkFBTSxJQUFJLEVBQUUsS0FBSyxHQUFHLEVBQUU7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDO2FBQ1o7aUJBQU07Z0JBQ04sT0FBTyxzQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3hCO1FBQ0YsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLHNDQUFzQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDcEQ7SUFFRCxNQUFNLElBQUksR0FBcUI7UUFDOUIsT0FBTztRQUNQLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFlBQVk7S0FDWixDQUFDO0lBQ0YsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQyxJQUFJLFFBQVEsRUFBRTtRQUNiLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDcEI7U0FBTTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNsQztBQUNGLENBQUM7QUFsQ0QsNENBa0NDO0FBRUQsU0FBZ0IsZUFBZSxDQUFJLElBQWlDLEVBQUUsTUFBYztJQUNuRixNQUFNLEdBQUcsY0FBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzQixNQUFNLEtBQUssR0FBUSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUIsTUFBTSxZQUFZLEdBQUcsYUFBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUU7UUFDdkIsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzNDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBVEQsMENBU0M7QUFFRCxTQUFTLE1BQU0sQ0FBSSxLQUFVLEVBQUUsSUFBaUMsRUFBRSxNQUFjO0lBQy9FLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzNDLEtBQUssTUFBTSxFQUFFLElBQUksU0FBUyxFQUFFO1lBQzNCLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyRCxhQUFhLEdBQUcsY0FBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN6QyxJQUFJLEVBQUUsQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFO2dCQUM1QixJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29CQUMvQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDdkIsU0FBUztpQkFDVDtnQkFDRCxTQUFTO2FBQ1Q7WUFDRCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMvQyxJQUFJLEVBQUUsRUFBRTtnQkFDUCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN2QjtTQUNEO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci9odHRwLXJlcXVlc3QtcHJveHkvaXNvbS9wYXRoLW1hdGNoZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpclRyZWV9IGZyb20gJy4vZGlyLXRyZWUnO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgVXJsIGZyb20gJ3VybCc7XG4vLyBpbXBvcnQgZ2V0IGZyb20gJ2xvZGFzaC9nZXQnO1xuLy8gaW1wb3J0IHRyaW1TdGFydCBmcm9tICdsb2Rhc2gvdHJpbVN0YXJ0JztcbmltcG9ydCB0cmltIGZyb20gJ2xvZGFzaC90cmltJztcbmltcG9ydCBlc2NhcGVSZWdFeHAgZnJvbSAnbG9kYXNoL2VzY2FwZVJlZ0V4cCc7XG5cbmV4cG9ydCB7RGlyVHJlZX07XG5leHBvcnQgaW50ZXJmYWNlIE1vY2tDb250ZXh0IHtcblx0dXJsUGFyYW0/OiB7W25hbWU6IHN0cmluZ106IHN0cmluZ307XG59XG5cbmV4cG9ydCB0eXBlIEJvZHlIYW5kbGVyID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LFxuXHRoYWNrZWRSZXFIZWFkZXJzOiB7W25hbWU6IHN0cmluZ106IHN0cmluZ30sXG5cdHJlcXVlc3RCb2R5OiBhbnksXG5cdGxhc3RSZXN1bHQ6IGFueSwgY3R4OiBNb2NrQ29udGV4dCkgPT4gYW55O1xuXG5leHBvcnQgdHlwZSBIZWFkZXJIYW5kbGVyID0gKHJlcTogZXhwcmVzcy5SZXF1ZXN0LCBoZWFkZXI6IHtbbmFtZTogc3RyaW5nXTogYW55fSkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBIYW5kbGVycyB7XG5cdFtwYXRoOiBzdHJpbmddOiBTZXQ8Qm9keUhhbmRsZXIgfCBIZWFkZXJIYW5kbGVyPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdG9yZWRIYW5kbGVyPEg+IHtcblx0dHJlZVBhdGg6IHN0cmluZztcblx0cmVzdGluZ1JlZ2V4OiBSZWdFeHAgfCBudWxsO1xuXHRoYW5kbGVyOiBIO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9IYW5kbGVyVHJlZTxIIGV4dGVuZHMgKEJvZHlIYW5kbGVyIHwgSGVhZGVySGFuZGxlcik+KFxuXHRwYXRoOiBzdHJpbmcsIGhhbmRsZXI6IEgsIHRyZWU6IERpclRyZWU8U3RvcmVkSGFuZGxlcjxIPltdPikge1xuXHRpZiAocGF0aC5zdGFydHNXaXRoKCcvJykpXG5cdFx0cGF0aCA9IHBhdGguc2xpY2UoMSk7XG5cdGxldCBsZWFkaW5nUGF0aCA9IHBhdGg7XG5cdGNvbnN0IHNwbGl0dGVkUGF0aCA9IHBhdGguc3BsaXQoJy8nKTtcblx0bGV0IHJlc3RpbmdSZWdleDogUmVnRXhwID0gbnVsbDtcblx0Y29uc3QgcGFyYW1JZHggPSBzcGxpdHRlZFBhdGguZmluZEluZGV4KGVsZW1lbnQgPT4gZWxlbWVudC5zdGFydHNXaXRoKCc6JykgfHwgL1xccypcXCpcXHMqLy50ZXN0KGVsZW1lbnQpKTtcblx0aWYgKHBhcmFtSWR4ID49IDApIHtcblx0XHRsZWFkaW5nUGF0aCA9IHNwbGl0dGVkUGF0aC5zbGljZSgwLCBwYXJhbUlkeCkuam9pbignLycpO1xuXHRcdHJlc3RpbmdSZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgc3BsaXR0ZWRQYXRoLnNsaWNlKHBhcmFtSWR4KS5tYXAoZWwgPT4ge1xuXHRcdFx0aWYgKGVsLnN0YXJ0c1dpdGgoJzonKSkge1xuXHRcdFx0XHRyZXR1cm4gJyhbXi9dKyknO1xuXHRcdFx0fSBlbHNlIGlmIChlbCA9PT0gJyonKSB7XG5cdFx0XHRcdHJldHVybiAnLionO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGVzY2FwZVJlZ0V4cChlbCk7XG5cdFx0XHR9XG5cdFx0fSkuam9pbignXFxcXC8nKSArICckJyk7XG5cdFx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcblx0XHRjb25zb2xlLmxvZyhgcGF0aCAke3BhdGh9J3MgcmVnZXhwOmAsIHJlc3RpbmdSZWdleCk7XG5cdH1cblxuXHRjb25zdCBkYXRhOiBTdG9yZWRIYW5kbGVyPEg+ID0ge1xuXHRcdGhhbmRsZXIsXG5cdFx0dHJlZVBhdGg6IGxlYWRpbmdQYXRoLFxuXHRcdHJlc3RpbmdSZWdleFxuXHR9O1xuXHRjb25zdCBleGlzdGluZyA9IHRyZWUuZ2V0RGF0YShsZWFkaW5nUGF0aCk7XG5cdGlmIChleGlzdGluZykge1xuXHRcdGV4aXN0aW5nLnB1c2goZGF0YSk7XG5cdH0gZWxzZSB7XG5cdFx0dHJlZS5wdXREYXRhKGxlYWRpbmdQYXRoLCBbZGF0YV0pO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVkSGFuZGxlcnM8SD4odHJlZTogRGlyVHJlZTxTdG9yZWRIYW5kbGVyPEg+W10+LCByZXFVcmw6IHN0cmluZyk6IEhbXSB7XG5cdHJlcVVybCA9IHRyaW0ocmVxVXJsLCAnLycpO1xuXHRjb25zdCBmb3VuZDogSFtdID0gW107XG5cdGxvb2t1cChmb3VuZCwgdHJlZSwgcmVxVXJsKTtcblx0Y29uc3QgcGFyc2VkUmVxVXJsID0gVXJsLnBhcnNlKHJlcVVybCk7XG5cdGlmIChwYXJzZWRSZXFVcmwucXVlcnkpIHtcblx0XHRsb29rdXAoZm91bmQsIHRyZWUsIHBhcnNlZFJlcVVybC5wYXRobmFtZSk7XG5cdH1cblx0cmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBsb29rdXA8SD4oZm91bmQ6IEhbXSwgdHJlZTogRGlyVHJlZTxTdG9yZWRIYW5kbGVyPEg+W10+LCByZXFVcmw6IHN0cmluZykge1xuXHR0cmVlLmdldEFsbERhdGEocmVxVXJsKS5mb3JFYWNoKHNoYW5kbGVycyA9PiB7XG5cdFx0Zm9yIChjb25zdCBzaCBvZiBzaGFuZGxlcnMpIHtcblx0XHRcdGxldCByZXN0aW5nUmVxVXJsID0gcmVxVXJsLnNsaWNlKHNoLnRyZWVQYXRoLmxlbmd0aCk7XG5cdFx0XHRyZXN0aW5nUmVxVXJsID0gdHJpbShyZXN0aW5nUmVxVXJsLCAnLycpO1xuXHRcdFx0aWYgKHNoLnJlc3RpbmdSZWdleCA9PSBudWxsKSB7XG5cdFx0XHRcdGlmIChyZXN0aW5nUmVxVXJsLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdGZvdW5kLnB1c2goc2guaGFuZGxlcik7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCByZSA9IHNoLnJlc3RpbmdSZWdleC5leGVjKHJlc3RpbmdSZXFVcmwpO1xuXHRcdFx0aWYgKHJlKSB7XG5cdFx0XHRcdGZvdW5kLnB1c2goc2guaGFuZGxlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSk7XG59XG5cblxuIl19
