"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const dir_tree_1 = require("./dir-tree");
exports.DirTree = dir_tree_1.DirTree;
const url_1 = tslib_1.__importDefault(require("url"));
// import get from 'lodash/get';
// import trimStart from 'lodash/trimStart';
const trim_1 = tslib_1.__importDefault(require("lodash/trim"));
const escapeRegExp_1 = tslib_1.__importDefault(require("lodash/escapeRegExp"));
function addToHandlerTree(path, handler, tree) {
    if (path.startsWith('/'))
        path = path.slice(1);
    let leadingPath = path;
    const splittedPath = path.split('/');
    let restingRegex;
    const paramIdx = splittedPath.findIndex(element => element.startsWith(':') || /\s*\*\s*/.test(element));
    if (paramIdx >= 0) {
        leadingPath = splittedPath.slice(0, paramIdx).join('/');
        restingRegex = new RegExp('^' + splittedPath.slice(paramIdx).map(el => {
            if (el.startsWith(':')) {
                return '([^/]+)';
            }
            else if (el === '*') {
                return '.*';
            }
            else {
                return escapeRegExp_1.default(el);
            }
        }).join('\\/') + '$');
        // tslint:disable-next-line:no-console
        console.log(`path ${path}'s regexp:`, restingRegex);
    }
    const data = {
        handler,
        treePath: leadingPath,
        restingRegex
    };
    const existing = tree.getData(leadingPath);
    if (existing) {
        existing.push(data);
    }
    else {
        tree.putData(leadingPath, [data]);
    }
}
exports.addToHandlerTree = addToHandlerTree;
function matchedHandlers(tree, reqUrl) {
    reqUrl = trim_1.default(reqUrl, '/');
    const found = [];
    lookup(found, tree, reqUrl);
    const parsedReqUrl = url_1.default.parse(reqUrl);
    if (parsedReqUrl.query) {
        lookup(found, tree, parsedReqUrl.pathname || '');
    }
    return found;
}
exports.matchedHandlers = matchedHandlers;
function lookup(found, tree, reqUrl) {
    tree.getAllData(reqUrl).forEach(shandlers => {
        for (const sh of shandlers) {
            let restingReqUrl = reqUrl.slice(sh.treePath.length);
            restingReqUrl = trim_1.default(restingReqUrl, '/');
            if (sh.restingRegex == null) {
                if (restingReqUrl.length === 0) {
                    found.push(sh.handler);
                    continue;
                }
                continue;
            }
            const re = sh.restingRegex.exec(restingReqUrl);
            if (re) {
                found.push(sh.handler);
            }
        }
        return false;
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHIvaHR0cC1yZXF1ZXN0LXByb3h5L2lzb20vcGF0aC1tYXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFtQztBQVEzQixrQkFSQSxrQkFBTyxDQVFBO0FBTmYsc0RBQXNCO0FBQ3RCLGdDQUFnQztBQUNoQyw0Q0FBNEM7QUFDNUMsK0RBQStCO0FBQy9CLCtFQUErQztBQXdCL0MsU0FBZ0IsZ0JBQWdCLENBQzlCLElBQVksRUFBRSxPQUFVLEVBQUUsSUFBaUM7SUFDM0QsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUN0QixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDdkIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFJLFlBQWdDLENBQUM7SUFDckMsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3hHLElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtRQUNqQixXQUFXLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hELFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDcEUsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN0QixPQUFPLFNBQVMsQ0FBQzthQUNsQjtpQkFBTSxJQUFJLEVBQUUsS0FBSyxHQUFHLEVBQUU7Z0JBQ3JCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7aUJBQU07Z0JBQ0wsT0FBTyxzQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLHNDQUFzQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDckQ7SUFFRCxNQUFNLElBQUksR0FBcUI7UUFDN0IsT0FBTztRQUNQLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFlBQVk7S0FDYixDQUFDO0lBQ0YsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQyxJQUFJLFFBQVEsRUFBRTtRQUNaLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDckI7U0FBTTtRQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUM7QUFsQ0QsNENBa0NDO0FBRUQsU0FBZ0IsZUFBZSxDQUFJLElBQWlDLEVBQUUsTUFBYztJQUNsRixNQUFNLEdBQUcsY0FBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzQixNQUFNLEtBQUssR0FBUSxFQUFFLENBQUM7SUFDdEIsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUIsTUFBTSxZQUFZLEdBQUcsYUFBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxJQUFJLFlBQVksQ0FBQyxLQUFLLEVBQUU7UUFDdEIsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUNsRDtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQVRELDBDQVNDO0FBRUQsU0FBUyxNQUFNLENBQUksS0FBVSxFQUFFLElBQWlDLEVBQUUsTUFBYztJQUM5RSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUMxQyxLQUFLLE1BQU0sRUFBRSxJQUFJLFNBQVMsRUFBRTtZQUMxQixJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckQsYUFBYSxHQUFHLGNBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDekMsSUFBSSxFQUFFLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtnQkFDM0IsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDOUIsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3ZCLFNBQVM7aUJBQ1Y7Z0JBQ0QsU0FBUzthQUNWO1lBQ0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDL0MsSUFBSSxFQUFFLEVBQUU7Z0JBQ04sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDeEI7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHIvaHR0cC1yZXF1ZXN0LXByb3h5L2lzb20vcGF0aC1tYXRjaGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJUcmVlfSBmcm9tICcuL2Rpci10cmVlJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IFVybCBmcm9tICd1cmwnO1xuLy8gaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0Jztcbi8vIGltcG9ydCB0cmltU3RhcnQgZnJvbSAnbG9kYXNoL3RyaW1TdGFydCc7XG5pbXBvcnQgdHJpbSBmcm9tICdsb2Rhc2gvdHJpbSc7XG5pbXBvcnQgZXNjYXBlUmVnRXhwIGZyb20gJ2xvZGFzaC9lc2NhcGVSZWdFeHAnO1xuXG5leHBvcnQge0RpclRyZWV9O1xuZXhwb3J0IGludGVyZmFjZSBNb2NrQ29udGV4dCB7XG4gIHVybFBhcmFtPzoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9O1xufVxuXG5leHBvcnQgdHlwZSBCb2R5SGFuZGxlciA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCxcbiAgaGFja2VkUmVxSGVhZGVyczoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9LFxuICByZXF1ZXN0Qm9keTogYW55LFxuICBsYXN0UmVzdWx0OiBhbnksIGN0eDogTW9ja0NvbnRleHQpID0+IGFueTtcblxuZXhwb3J0IHR5cGUgSGVhZGVySGFuZGxlciA9IChyZXE6IGV4cHJlc3MuUmVxdWVzdCwgaGVhZGVyOiB7W25hbWU6IHN0cmluZ106IGFueX0pID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZGxlcnMge1xuICBbcGF0aDogc3RyaW5nXTogU2V0PEJvZHlIYW5kbGVyIHwgSGVhZGVySGFuZGxlcj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RvcmVkSGFuZGxlcjxIPiB7XG4gIHRyZWVQYXRoOiBzdHJpbmc7XG4gIHJlc3RpbmdSZWdleD86IFJlZ0V4cDtcbiAgaGFuZGxlcjogSDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRvSGFuZGxlclRyZWU8SCBleHRlbmRzIChCb2R5SGFuZGxlciB8IEhlYWRlckhhbmRsZXIpPihcbiAgcGF0aDogc3RyaW5nLCBoYW5kbGVyOiBILCB0cmVlOiBEaXJUcmVlPFN0b3JlZEhhbmRsZXI8SD5bXT4pIHtcbiAgaWYgKHBhdGguc3RhcnRzV2l0aCgnLycpKVxuICAgIHBhdGggPSBwYXRoLnNsaWNlKDEpO1xuICBsZXQgbGVhZGluZ1BhdGggPSBwYXRoO1xuICBjb25zdCBzcGxpdHRlZFBhdGggPSBwYXRoLnNwbGl0KCcvJyk7XG4gIGxldCByZXN0aW5nUmVnZXg6IFJlZ0V4cCB8IHVuZGVmaW5lZDtcbiAgY29uc3QgcGFyYW1JZHggPSBzcGxpdHRlZFBhdGguZmluZEluZGV4KGVsZW1lbnQgPT4gZWxlbWVudC5zdGFydHNXaXRoKCc6JykgfHwgL1xccypcXCpcXHMqLy50ZXN0KGVsZW1lbnQpKTtcbiAgaWYgKHBhcmFtSWR4ID49IDApIHtcbiAgICBsZWFkaW5nUGF0aCA9IHNwbGl0dGVkUGF0aC5zbGljZSgwLCBwYXJhbUlkeCkuam9pbignLycpO1xuICAgIHJlc3RpbmdSZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgc3BsaXR0ZWRQYXRoLnNsaWNlKHBhcmFtSWR4KS5tYXAoZWwgPT4ge1xuICAgICAgaWYgKGVsLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICByZXR1cm4gJyhbXi9dKyknO1xuICAgICAgfSBlbHNlIGlmIChlbCA9PT0gJyonKSB7XG4gICAgICAgIHJldHVybiAnLionO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZVJlZ0V4cChlbCk7XG4gICAgICB9XG4gICAgfSkuam9pbignXFxcXC8nKSArICckJyk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyhgcGF0aCAke3BhdGh9J3MgcmVnZXhwOmAsIHJlc3RpbmdSZWdleCk7XG4gIH1cblxuICBjb25zdCBkYXRhOiBTdG9yZWRIYW5kbGVyPEg+ID0ge1xuICAgIGhhbmRsZXIsXG4gICAgdHJlZVBhdGg6IGxlYWRpbmdQYXRoLFxuICAgIHJlc3RpbmdSZWdleFxuICB9O1xuICBjb25zdCBleGlzdGluZyA9IHRyZWUuZ2V0RGF0YShsZWFkaW5nUGF0aCk7XG4gIGlmIChleGlzdGluZykge1xuICAgIGV4aXN0aW5nLnB1c2goZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5wdXREYXRhKGxlYWRpbmdQYXRoLCBbZGF0YV0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVkSGFuZGxlcnM8SD4odHJlZTogRGlyVHJlZTxTdG9yZWRIYW5kbGVyPEg+W10+LCByZXFVcmw6IHN0cmluZyk6IEhbXSB7XG4gIHJlcVVybCA9IHRyaW0ocmVxVXJsLCAnLycpO1xuICBjb25zdCBmb3VuZDogSFtdID0gW107XG4gIGxvb2t1cChmb3VuZCwgdHJlZSwgcmVxVXJsKTtcbiAgY29uc3QgcGFyc2VkUmVxVXJsID0gVXJsLnBhcnNlKHJlcVVybCk7XG4gIGlmIChwYXJzZWRSZXFVcmwucXVlcnkpIHtcbiAgICBsb29rdXAoZm91bmQsIHRyZWUsIHBhcnNlZFJlcVVybC5wYXRobmFtZSB8fCAnJyk7XG4gIH1cbiAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBsb29rdXA8SD4oZm91bmQ6IEhbXSwgdHJlZTogRGlyVHJlZTxTdG9yZWRIYW5kbGVyPEg+W10+LCByZXFVcmw6IHN0cmluZykge1xuICB0cmVlLmdldEFsbERhdGEocmVxVXJsKS5mb3JFYWNoKHNoYW5kbGVycyA9PiB7XG4gICAgZm9yIChjb25zdCBzaCBvZiBzaGFuZGxlcnMpIHtcbiAgICAgIGxldCByZXN0aW5nUmVxVXJsID0gcmVxVXJsLnNsaWNlKHNoLnRyZWVQYXRoLmxlbmd0aCk7XG4gICAgICByZXN0aW5nUmVxVXJsID0gdHJpbShyZXN0aW5nUmVxVXJsLCAnLycpO1xuICAgICAgaWYgKHNoLnJlc3RpbmdSZWdleCA9PSBudWxsKSB7XG4gICAgICAgIGlmIChyZXN0aW5nUmVxVXJsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGZvdW5kLnB1c2goc2guaGFuZGxlcik7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCByZSA9IHNoLnJlc3RpbmdSZWdleC5leGVjKHJlc3RpbmdSZXFVcmwpO1xuICAgICAgaWYgKHJlKSB7XG4gICAgICAgIGZvdW5kLnB1c2goc2guaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59XG5cblxuIl19
