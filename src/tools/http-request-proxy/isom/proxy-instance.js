"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const _ = tslib_1.__importStar(require("lodash"));
const url_1 = tslib_1.__importDefault(require("url"));
function intercept(req, headers, body, resHandlers, name) {
    var bodyHandlerProm;
    var handlers = _filterHandlers(req, resHandlers);
    if (handlers.length > 0) {
        bodyHandlerProm = Promise.resolve({ req, headers, body });
        handlers.forEach(func => {
            bodyHandlerProm = bodyHandlerProm.then(data => {
                const resolvedRes = func(data.req, data.headers, data.body, data.result);
                if (resolvedRes != null) {
                    return Promise.resolve(resolvedRes)
                        .then(result => {
                        return Object.assign(data, { result });
                    });
                }
                return Promise.resolve(data);
            });
        });
        bodyHandlerProm = bodyHandlerProm.then(data => data.result);
    }
    else {
        bodyHandlerProm = Promise.resolve(null);
    }
    return bodyHandlerProm;
}
exports.intercept = intercept;
function _filterHandlers(req, resHandlers) {
    var handlers = [];
    var handlerSet = _.get(resHandlers, url_1.default.parse(req.url).pathname);
    if (handlerSet)
        handlers.push(...handlerSet.values());
    var defaultHandlerSet = resHandlers['*'];
    if (defaultHandlerSet)
        handlers.push(...defaultHandlerSet.values());
    return handlers;
}
class ProxyInstanceForBrowser {
    constructor(name, options = {}) {
        this.options = options;
        this.resHandlers = {};
        this.reqHandlers = {};
        this.mockHandlers = {};
        this.resHeaderHandlers = {};
        this.name = name;
    }
    get isRemoveCookieDomain() {
        return !!this.options.removeCookieDomain;
    }
    addOptions(opt) {
        _.assign(this.options, opt);
        return this;
    }
    /**
     * @param {*} path sub path after '/http-request-proxy'
     * @param {*} handler (url: string, method:string,
     * 	responseHeaders: {[name: string]:string}, responseBody: string | Buffer) => null | Promise<string>
     */
    interceptResponse(path, handler) {
        this.addHandler(path, handler, this.resHandlers);
    }
    interceptRequest(path, handler) {
        this.addHandler(path, handler, this.reqHandlers);
    }
    mockResponse(path, handler) {
        this.addHandler(path, handler, this.mockHandlers);
    }
    interceptResHeader(path, handler) {
        this.addHandler(path, handler, this.resHeaderHandlers);
    }
    addHandler(path, handler, to) {
        if (path !== '*' && !_.startsWith(path, '/'))
            path = '/' + path;
        var list = _.get(to, path);
        if (list == null) {
            list = new Set();
            to[path] = list;
        }
        list.add(handler);
    }
}
exports.ProxyInstanceForBrowser = ProxyInstanceForBrowser;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
