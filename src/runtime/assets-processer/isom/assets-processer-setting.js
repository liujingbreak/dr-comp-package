"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSetting = exports.defaultSetting = void 0;
const plink_1 = require("@wfh/plink");
/**
 * Plink run this funtion to get package level setting value
 */
function defaultSetting() {
    const defaultValue = {
        fetchUrl: null,
        fetchRetry: 5,
        downloadMode: 'fork',
        fetchLogErrPerTimes: 20,
        fetchIntervalSec: 90,
        cacheControlMaxAge: {
            js: '365 days',
            css: '365 days',
            less: '365 days',
            html: null,
            png: '365 days',
            jpg: '365 days',
            jpeg: '365 days',
            gif: '365 days',
            svg: '365 days',
            eot: '365 days',
            ttf: '365 days',
            woff: '365 days',
            woff2: '365 days'
        },
        fallbackIndexHtml: { '^/[^/?#.]+': '<%=match[0]%>/index.html' },
        httpProxy: {},
        fetchMailServer: null,
        serveIndex: false,
        requireToken: false
    };
    if (plink_1.config().devMode || plink_1.config().cliOptions.env === 'local') {
        const devValue = {
            fetchRetry: 0,
            fetchLogErrPerTimes: 1,
            fetchIntervalSec: 60,
            cacheControlMaxAge: {},
            fetchMailServer: null,
            proxyToDevServer: { target: 'http://localhost:4200' }
        };
        return Object.assign(defaultValue, devValue);
    }
    return defaultValue;
}
exports.defaultSetting = defaultSetting;
/**
 * The return setting value is merged with files specified by command line options --prop and -c
 * @return setting of current package
 */
function getSetting() {
    // tslint:disable:no-string-literal
    return plink_1.config()['@wfh/assets-processer'];
}
exports.getSetting = getSetting;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUFrQztBQTBEbEM7O0dBRUc7QUFDSCxTQUFnQixjQUFjO0lBQzVCLE1BQU0sWUFBWSxHQUEyQjtRQUMzQyxRQUFRLEVBQUUsSUFBSTtRQUNkLFVBQVUsRUFBRSxDQUFDO1FBQ2IsWUFBWSxFQUFFLE1BQU07UUFDcEIsbUJBQW1CLEVBQUUsRUFBRTtRQUN2QixnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLGtCQUFrQixFQUFFO1lBQ2xCLEVBQUUsRUFBRSxVQUFVO1lBQ2QsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixJQUFJLEVBQUUsSUFBSTtZQUNWLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixHQUFHLEVBQUUsVUFBVTtZQUNmLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxVQUFVO1NBQ2xCO1FBQ0QsaUJBQWlCLEVBQUUsRUFBQyxZQUFZLEVBQUUsMEJBQTBCLEVBQUM7UUFDN0QsU0FBUyxFQUFFLEVBQUU7UUFDYixlQUFlLEVBQUUsSUFBSTtRQUNyQixVQUFVLEVBQUUsS0FBSztRQUNqQixZQUFZLEVBQUUsS0FBSztLQUNwQixDQUFDO0lBRUYsSUFBSSxjQUFNLEVBQUUsQ0FBQyxPQUFPLElBQUksY0FBTSxFQUFFLENBQUMsVUFBVyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7UUFDNUQsTUFBTSxRQUFRLEdBQW9DO1lBQ2hELFVBQVUsRUFBRSxDQUFDO1lBQ2IsbUJBQW1CLEVBQUUsQ0FBQztZQUN0QixnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLGtCQUFrQixFQUFFLEVBQUU7WUFDdEIsZUFBZSxFQUFFLElBQUk7WUFDckIsZ0JBQWdCLEVBQUUsRUFBQyxNQUFNLEVBQUUsdUJBQXVCLEVBQUM7U0FDcEQsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUM7SUFDRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBekNELHdDQXlDQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLFVBQVU7SUFDeEIsbUNBQW1DO0lBQ25DLE9BQU8sY0FBTSxFQUFFLENBQUMsdUJBQXVCLENBQUUsQ0FBQztBQUM1QyxDQUFDO0FBSEQsZ0NBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvbmZpZ30gZnJvbSAnQHdmaC9wbGluayc7XG5pbXBvcnQge0NvbmZpZyBhcyBQcm94eUNvbmZpZ30gZnJvbSAnaHR0cC1wcm94eS1taWRkbGV3YXJlJztcbi8qKlxuICogUGFja2FnZSBzZXR0aW5nIHR5cGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBc3NldHNQcm9jZXNzZXJTZXR0aW5nIHtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoVXJsOiBzdHJpbmcgfCBudWxsO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hSZXRyeTogbnVtYmVyO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZG93bmxvYWRNb2RlOiAnZm9yayc7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaExvZ0VyclBlclRpbWVzOiBudW1iZXI7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaEludGVydmFsU2VjOiBudW1iZXI7XG4gIC8qKiBSZXNwb25zZSBtYXhBZ2UgaGVhZGVyIHZhbHVlIGFnYWluc3QgZGlmZmVyZW50IG1lZGlhIHR5cGUgZmlsZSAqL1xuICBjYWNoZUNvbnRyb2xNYXhBZ2U6IHtba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudWxsfTtcbiAgLyoqIEZvciBIVE1MIDUgaGlzdG9yeSBiYXNlZCBjbGllbnQgc2lkZSByb3V0ZSwgc2VydmluZyBpbmRleC5odG1sIGZvciBcbiAgICogc3BlY2lmaWMgcGF0aC5cbiAgICogXG4gICAqIEtleSBpcyBhIFJlZ0V4cCBzdHJpbmcsIHZhbHVlIGlzIHRhcmdldCBwYXRoLlxuICAgKiBlLmcuICB7J14vW14vPyMuXSsnOiAnPCU9bWF0Y2hbMF0lPi9pbmRleC5odG1sJ31cbiAgICogXG4gICAqIEluIGNhc2UgdXNlciBhY2Nlc3MgXCIvaGVsbG93P3VpZD0xMjNcIiwgdGhlIGFjdHVhbCBFeHByZXNzLmpzXG4gICAqIGByZXF1ZXN0LnBhdGhgIHdpbGwgYmUgY2hhbmdlIHRvIFwiL2luZGV4Lmh0bWxcIiwgYHJlcXVlc3QucXVlcnlgIHdpbGwgYmUga2VwdFxuICAgKi9cbiAgZmFsbGJhY2tJbmRleEh0bWw6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9O1xuICBodHRwUHJveHk6IHtbcHJveHlQYXRoOiBzdHJpbmddOiBzdHJpbmd9O1xuICBmZXRjaE1haWxTZXJ2ZXI6IHtcbiAgICBpbWFwOiBzdHJpbmc7XG4gICAgc210cDogc3RyaW5nO1xuICAgIHVzZXI6IHN0cmluZztcbiAgICBsb2dpblNlY3JldDogc3RyaW5nO1xuICB9IHwgbnVsbDtcbiAgLyoqIFNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlIHdpbGwgZW5hYmxlIHNlcnZpbmcgSW5kZXggSFRNTCBwYWdlIGZvciBzdGF0aWMgcmVzb3VyY2UgdW5kZXI6XG4gICAqICA8cm9vdCBkaXI+L2Rpc3Qvc3RhdGljLlxuICAgKiBcbiAgICogWW91IG1heSBhbHNvIGFzc2lnbiBhIGRpZmZlcmVudCB2YWx1ZSB0byBQbGluayBwcm9wZXJ0eSBcInN0YXRpY0RpclwiIHRvIGNoYW5nZSBzdGF0aWMgcmVzb3VyY2UgZGlyZWN0b3J5LFxuICAgKiBlLmcuIEJ5IGNvbW1hbmQgbGluZSBvcHRpb24gYC0tcHJvcCBzdGF0aWNEaXI9PGRpcj5gXG4gICAqL1xuICBzZXJ2ZUluZGV4OiBib29sZWFuO1xuICByZXF1aXJlVG9rZW46IGJvb2xlYW47XG4gIC8qKiBcbiAgICogQHR5cGUgaW1wb3J0KCdodHRwLXByb3h5LW1pZGRsZXdhcmUnKS5Db25maWdcbiAgICogUHJveHkgcmVxdWVzdCB0byBhbm90aGVyIGRldiBzZXJ2ZXIsIGlmIHByb3h5IGdvdCBhbiBlcnJvciByZXNwb25zZSwgdGhlbiBmYWxsYmFjayByZXF1ZXN0IHRvXG4gICAqIGxvY2FsIHN0YXRpYyBmaWxlIHJlc291cmNlXG4gICAqIGUuZy4ge3RhcmdldDogaHR0cDovL2xvY2FsaHNvdDozMDAwfSBmb3IgY3JlYXRlLXJlYWN0LWFwcCBkZXYgc2VydmVyLFxuICAgKiB7dGFyZ2V0OiBodHRwOi8vbG9jYWxob3N0OjQyMDB9IGZvciBBbmd1bGFyIGRldiBzZXJ2ZXJcbiAgICogXG4gICAqIERlZmF1bHQgdmFsdWUgaXMge3RhcmdldDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMCd9IHdoZW4gXCItLWRldlwiIG1vZGUgaXMgb24uXG4gICAqIFxuICAgKiBDaGFuZ2VPcmlnaW4gYW5kIHdzICh3ZWJzb2NrZXQpIHdpbGwgYmUgZW5hYmxlZCwgc2luY2UgZGV2U2VydmVyIG1vc3RseSBsaWtlIHdpbGxcbiAgICogZW5hYmxlIFdlYnBhY2sgSE1SIHRocm91Z2ggd2Vic29ja2V0LlxuICAqL1xuICBwcm94eVRvRGV2U2VydmVyPzogUHJveHlDb25maWc7XG59XG5cbi8qKlxuICogUGxpbmsgcnVuIHRoaXMgZnVudGlvbiB0byBnZXQgcGFja2FnZSBsZXZlbCBzZXR0aW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0U2V0dGluZygpOiBBc3NldHNQcm9jZXNzZXJTZXR0aW5nIHtcbiAgY29uc3QgZGVmYXVsdFZhbHVlOiBBc3NldHNQcm9jZXNzZXJTZXR0aW5nID0ge1xuICAgIGZldGNoVXJsOiBudWxsLFxuICAgIGZldGNoUmV0cnk6IDUsXG4gICAgZG93bmxvYWRNb2RlOiAnZm9yaycsXG4gICAgZmV0Y2hMb2dFcnJQZXJUaW1lczogMjAsXG4gICAgZmV0Y2hJbnRlcnZhbFNlYzogOTAsXG4gICAgY2FjaGVDb250cm9sTWF4QWdlOiB7XG4gICAgICBqczogJzM2NSBkYXlzJyxcbiAgICAgIGNzczogJzM2NSBkYXlzJyxcbiAgICAgIGxlc3M6ICczNjUgZGF5cycsXG4gICAgICBodG1sOiBudWxsLFxuICAgICAgcG5nOiAnMzY1IGRheXMnLFxuICAgICAganBnOiAnMzY1IGRheXMnLFxuICAgICAganBlZzogJzM2NSBkYXlzJyxcbiAgICAgIGdpZjogJzM2NSBkYXlzJyxcbiAgICAgIHN2ZzogJzM2NSBkYXlzJyxcbiAgICAgIGVvdDogJzM2NSBkYXlzJyxcbiAgICAgIHR0ZjogJzM2NSBkYXlzJyxcbiAgICAgIHdvZmY6ICczNjUgZGF5cycsXG4gICAgICB3b2ZmMjogJzM2NSBkYXlzJ1xuICAgIH0sXG4gICAgZmFsbGJhY2tJbmRleEh0bWw6IHsnXi9bXi8/Iy5dKyc6ICc8JT1tYXRjaFswXSU+L2luZGV4Lmh0bWwnfSxcbiAgICBodHRwUHJveHk6IHt9LFxuICAgIGZldGNoTWFpbFNlcnZlcjogbnVsbCxcbiAgICBzZXJ2ZUluZGV4OiBmYWxzZSxcbiAgICByZXF1aXJlVG9rZW46IGZhbHNlXG4gIH07XG5cbiAgaWYgKGNvbmZpZygpLmRldk1vZGUgfHwgY29uZmlnKCkuY2xpT3B0aW9ucyEuZW52ID09PSAnbG9jYWwnKSB7XG4gICAgY29uc3QgZGV2VmFsdWU6IFBhcnRpYWw8QXNzZXRzUHJvY2Vzc2VyU2V0dGluZz4gPSB7XG4gICAgICBmZXRjaFJldHJ5OiAwLFxuICAgICAgZmV0Y2hMb2dFcnJQZXJUaW1lczogMSxcbiAgICAgIGZldGNoSW50ZXJ2YWxTZWM6IDYwLFxuICAgICAgY2FjaGVDb250cm9sTWF4QWdlOiB7fSxcbiAgICAgIGZldGNoTWFpbFNlcnZlcjogbnVsbCxcbiAgICAgIHByb3h5VG9EZXZTZXJ2ZXI6IHt0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0OjQyMDAnfVxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdFZhbHVlLCBkZXZWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBUaGUgcmV0dXJuIHNldHRpbmcgdmFsdWUgaXMgbWVyZ2VkIHdpdGggZmlsZXMgc3BlY2lmaWVkIGJ5IGNvbW1hbmQgbGluZSBvcHRpb25zIC0tcHJvcCBhbmQgLWNcbiAqIEByZXR1cm4gc2V0dGluZyBvZiBjdXJyZW50IHBhY2thZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNldHRpbmcoKTogQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyB7XG4gIC8vIHRzbGludDpkaXNhYmxlOm5vLXN0cmluZy1saXRlcmFsXG4gIHJldHVybiBjb25maWcoKVsnQHdmaC9hc3NldHMtcHJvY2Vzc2VyJ10hO1xufVxuIl19