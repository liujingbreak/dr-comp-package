"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSetting = exports.defaultSetting = void 0;
const plink_1 = require("@wfh/plink");
/**
 * Plink run this funtion to get package level setting value
 */
function defaultSetting() {
    const defaultValue = {
        fetchUrl: null,
        fetchRetry: 5,
        downloadMode: 'fork',
        fetchLogErrPerTimes: 20,
        fetchIntervalSec: 90,
        cacheControlMaxAge: {
            js: '365 days',
            css: '365 days',
            less: '365 days',
            html: null,
            png: '365 days',
            jpg: '365 days',
            jpeg: '365 days',
            gif: '365 days',
            svg: '365 days',
            eot: '365 days',
            ttf: '365 days',
            woff: '365 days',
            woff2: '365 days'
        },
        fallbackIndexHtml: { '^/[^/?#.]+': '<%=match[0]%>/index.html' },
        httpProxy: {},
        fetchMailServer: null,
        serveIndex: false,
        requireToken: false
    };
    if (plink_1.config().devMode || plink_1.config().cliOptions.env === 'local') {
        const devValue = {
            fetchRetry: 0,
            fetchLogErrPerTimes: 1,
            fetchIntervalSec: 60,
            cacheControlMaxAge: {},
            fetchMailServer: null,
            proxyToDevServer: { target: 'http://localhost:4200' }
        };
        return Object.assign(defaultValue, devValue);
    }
    return defaultValue;
}
exports.defaultSetting = defaultSetting;
/**
 * The return setting value is merged with files specified by command line options --prop and -c
 * @return setting of current package
 */
function getSetting() {
    // tslint:disable:no-string-literal
    return plink_1.config()['@wfh/assets-processer'];
}
exports.getSetting = getSetting;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLXByb2Nlc3Nlci1zZXR0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUFrQztBQTBEbEM7O0dBRUc7QUFDSCxTQUFnQixjQUFjO0lBQzVCLE1BQU0sWUFBWSxHQUEyQjtRQUMzQyxRQUFRLEVBQUUsSUFBSTtRQUNkLFVBQVUsRUFBRSxDQUFDO1FBQ2IsWUFBWSxFQUFFLE1BQU07UUFDcEIsbUJBQW1CLEVBQUUsRUFBRTtRQUN2QixnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLGtCQUFrQixFQUFFO1lBQ2xCLEVBQUUsRUFBRSxVQUFVO1lBQ2QsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixJQUFJLEVBQUUsSUFBSTtZQUNWLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixJQUFJLEVBQUUsVUFBVTtZQUNoQixHQUFHLEVBQUUsVUFBVTtZQUNmLEdBQUcsRUFBRSxVQUFVO1lBQ2YsR0FBRyxFQUFFLFVBQVU7WUFDZixHQUFHLEVBQUUsVUFBVTtZQUNmLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxVQUFVO1NBQ2xCO1FBQ0QsaUJBQWlCLEVBQUUsRUFBQyxZQUFZLEVBQUUsMEJBQTBCLEVBQUM7UUFDN0QsU0FBUyxFQUFFLEVBQUU7UUFDYixlQUFlLEVBQUUsSUFBSTtRQUNyQixVQUFVLEVBQUUsS0FBSztRQUNqQixZQUFZLEVBQUUsS0FBSztLQUNwQixDQUFDO0lBRUYsSUFBSSxjQUFNLEVBQUUsQ0FBQyxPQUFPLElBQUksY0FBTSxFQUFFLENBQUMsVUFBVyxDQUFDLEdBQUcsS0FBSyxPQUFPLEVBQUU7UUFDNUQsTUFBTSxRQUFRLEdBQW9DO1lBQ2hELFVBQVUsRUFBRSxDQUFDO1lBQ2IsbUJBQW1CLEVBQUUsQ0FBQztZQUN0QixnQkFBZ0IsRUFBRSxFQUFFO1lBQ3BCLGtCQUFrQixFQUFFLEVBQUU7WUFDdEIsZUFBZSxFQUFFLElBQUk7WUFDckIsZ0JBQWdCLEVBQUUsRUFBQyxNQUFNLEVBQUUsdUJBQXVCLEVBQUM7U0FDcEQsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUM7SUFDRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDO0FBekNELHdDQXlDQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLFVBQVU7SUFDeEIsbUNBQW1DO0lBQ25DLE9BQU8sY0FBTSxFQUFFLENBQUMsdUJBQXVCLENBQUUsQ0FBQztBQUM1QyxDQUFDO0FBSEQsZ0NBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NvbmZpZ30gZnJvbSAnQHdmaC9wbGluayc7XG5pbXBvcnQge09wdGlvbnN9IGZyb20gJ2h0dHAtcHJveHktbWlkZGxld2FyZSc7XG4vKipcbiAqIFBhY2thZ2Ugc2V0dGluZyB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyB7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBmZXRjaFVybDogc3RyaW5nIHwgbnVsbDtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGZldGNoUmV0cnk6IG51bWJlcjtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIGRvd25sb2FkTW9kZTogJ2ZvcmsnO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hMb2dFcnJQZXJUaW1lczogbnVtYmVyO1xuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZmV0Y2hJbnRlcnZhbFNlYzogbnVtYmVyO1xuICAvKiogUmVzcG9uc2UgbWF4QWdlIGhlYWRlciB2YWx1ZSBhZ2FpbnN0IGRpZmZlcmVudCBtZWRpYSB0eXBlIGZpbGUgKi9cbiAgY2FjaGVDb250cm9sTWF4QWdlOiB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVsbH07XG4gIC8qKiBGb3IgSFRNTCA1IGhpc3RvcnkgYmFzZWQgY2xpZW50IHNpZGUgcm91dGUsIHNlcnZpbmcgaW5kZXguaHRtbCBmb3IgXG4gICAqIHNwZWNpZmljIHBhdGguXG4gICAqIFxuICAgKiBLZXkgaXMgYSBSZWdFeHAgc3RyaW5nLCB2YWx1ZSBpcyB0YXJnZXQgcGF0aC5cbiAgICogZS5nLiAgeydeL1teLz8jLl0rJzogJzwlPW1hdGNoWzBdJT4vaW5kZXguaHRtbCd9XG4gICAqIFxuICAgKiBJbiBjYXNlIHVzZXIgYWNjZXNzIFwiL2hlbGxvdz91aWQ9MTIzXCIsIHRoZSBhY3R1YWwgRXhwcmVzcy5qc1xuICAgKiBgcmVxdWVzdC5wYXRoYCB3aWxsIGJlIGNoYW5nZSB0byBcIi9pbmRleC5odG1sXCIsIGByZXF1ZXN0LnF1ZXJ5YCB3aWxsIGJlIGtlcHRcbiAgICovXG4gIGZhbGxiYWNrSW5kZXhIdG1sOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfTtcbiAgaHR0cFByb3h5OiB7W3Byb3h5UGF0aDogc3RyaW5nXTogc3RyaW5nfTtcbiAgZmV0Y2hNYWlsU2VydmVyOiB7XG4gICAgaW1hcDogc3RyaW5nO1xuICAgIHNtdHA6IHN0cmluZztcbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgbG9naW5TZWNyZXQ6IHN0cmluZztcbiAgfSB8IG51bGw7XG4gIC8qKiBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gdHJ1ZSB3aWxsIGVuYWJsZSBzZXJ2aW5nIEluZGV4IEhUTUwgcGFnZSBmb3Igc3RhdGljIHJlc291cmNlIHVuZGVyOlxuICAgKiAgPHJvb3QgZGlyPi9kaXN0L3N0YXRpYy5cbiAgICogXG4gICAqIFlvdSBtYXkgYWxzbyBhc3NpZ24gYSBkaWZmZXJlbnQgdmFsdWUgdG8gUGxpbmsgcHJvcGVydHkgXCJzdGF0aWNEaXJcIiB0byBjaGFuZ2Ugc3RhdGljIHJlc291cmNlIGRpcmVjdG9yeSxcbiAgICogZS5nLiBCeSBjb21tYW5kIGxpbmUgb3B0aW9uIGAtLXByb3Agc3RhdGljRGlyPTxkaXI+YFxuICAgKi9cbiAgc2VydmVJbmRleDogYm9vbGVhbjtcbiAgcmVxdWlyZVRva2VuOiBib29sZWFuO1xuICAvKiogXG4gICAqIEB0eXBlIGltcG9ydCgnaHR0cC1wcm94eS1taWRkbGV3YXJlJykuQ29uZmlnXG4gICAqIFByb3h5IHJlcXVlc3QgdG8gYW5vdGhlciBkZXYgc2VydmVyLCBpZiBwcm94eSBnb3QgYW4gZXJyb3IgcmVzcG9uc2UsIHRoZW4gZmFsbGJhY2sgcmVxdWVzdCB0b1xuICAgKiBsb2NhbCBzdGF0aWMgZmlsZSByZXNvdXJjZVxuICAgKiBlLmcuIHt0YXJnZXQ6IGh0dHA6Ly9sb2NhbGhzb3Q6MzAwMH0gZm9yIGNyZWF0ZS1yZWFjdC1hcHAgZGV2IHNlcnZlcixcbiAgICoge3RhcmdldDogaHR0cDovL2xvY2FsaG9zdDo0MjAwfSBmb3IgQW5ndWxhciBkZXYgc2VydmVyXG4gICAqIFxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIHt0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0OjQyMDAnfSB3aGVuIFwiLS1kZXZcIiBtb2RlIGlzIG9uLlxuICAgKiBcbiAgICogQ2hhbmdlT3JpZ2luIGFuZCB3cyAod2Vic29ja2V0KSB3aWxsIGJlIGVuYWJsZWQsIHNpbmNlIGRldlNlcnZlciBtb3N0bHkgbGlrZSB3aWxsXG4gICAqIGVuYWJsZSBXZWJwYWNrIEhNUiB0aHJvdWdoIHdlYnNvY2tldC5cbiAgKi9cbiAgcHJveHlUb0RldlNlcnZlcj86IE9wdGlvbnM7XG59XG5cbi8qKlxuICogUGxpbmsgcnVuIHRoaXMgZnVudGlvbiB0byBnZXQgcGFja2FnZSBsZXZlbCBzZXR0aW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0U2V0dGluZygpOiBBc3NldHNQcm9jZXNzZXJTZXR0aW5nIHtcbiAgY29uc3QgZGVmYXVsdFZhbHVlOiBBc3NldHNQcm9jZXNzZXJTZXR0aW5nID0ge1xuICAgIGZldGNoVXJsOiBudWxsLFxuICAgIGZldGNoUmV0cnk6IDUsXG4gICAgZG93bmxvYWRNb2RlOiAnZm9yaycsXG4gICAgZmV0Y2hMb2dFcnJQZXJUaW1lczogMjAsXG4gICAgZmV0Y2hJbnRlcnZhbFNlYzogOTAsXG4gICAgY2FjaGVDb250cm9sTWF4QWdlOiB7XG4gICAgICBqczogJzM2NSBkYXlzJyxcbiAgICAgIGNzczogJzM2NSBkYXlzJyxcbiAgICAgIGxlc3M6ICczNjUgZGF5cycsXG4gICAgICBodG1sOiBudWxsLFxuICAgICAgcG5nOiAnMzY1IGRheXMnLFxuICAgICAganBnOiAnMzY1IGRheXMnLFxuICAgICAganBlZzogJzM2NSBkYXlzJyxcbiAgICAgIGdpZjogJzM2NSBkYXlzJyxcbiAgICAgIHN2ZzogJzM2NSBkYXlzJyxcbiAgICAgIGVvdDogJzM2NSBkYXlzJyxcbiAgICAgIHR0ZjogJzM2NSBkYXlzJyxcbiAgICAgIHdvZmY6ICczNjUgZGF5cycsXG4gICAgICB3b2ZmMjogJzM2NSBkYXlzJ1xuICAgIH0sXG4gICAgZmFsbGJhY2tJbmRleEh0bWw6IHsnXi9bXi8/Iy5dKyc6ICc8JT1tYXRjaFswXSU+L2luZGV4Lmh0bWwnfSxcbiAgICBodHRwUHJveHk6IHt9LFxuICAgIGZldGNoTWFpbFNlcnZlcjogbnVsbCxcbiAgICBzZXJ2ZUluZGV4OiBmYWxzZSxcbiAgICByZXF1aXJlVG9rZW46IGZhbHNlXG4gIH07XG5cbiAgaWYgKGNvbmZpZygpLmRldk1vZGUgfHwgY29uZmlnKCkuY2xpT3B0aW9ucyEuZW52ID09PSAnbG9jYWwnKSB7XG4gICAgY29uc3QgZGV2VmFsdWU6IFBhcnRpYWw8QXNzZXRzUHJvY2Vzc2VyU2V0dGluZz4gPSB7XG4gICAgICBmZXRjaFJldHJ5OiAwLFxuICAgICAgZmV0Y2hMb2dFcnJQZXJUaW1lczogMSxcbiAgICAgIGZldGNoSW50ZXJ2YWxTZWM6IDYwLFxuICAgICAgY2FjaGVDb250cm9sTWF4QWdlOiB7fSxcbiAgICAgIGZldGNoTWFpbFNlcnZlcjogbnVsbCxcbiAgICAgIHByb3h5VG9EZXZTZXJ2ZXI6IHt0YXJnZXQ6ICdodHRwOi8vbG9jYWxob3N0OjQyMDAnfVxuICAgIH07XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdFZhbHVlLCBkZXZWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBUaGUgcmV0dXJuIHNldHRpbmcgdmFsdWUgaXMgbWVyZ2VkIHdpdGggZmlsZXMgc3BlY2lmaWVkIGJ5IGNvbW1hbmQgbGluZSBvcHRpb25zIC0tcHJvcCBhbmQgLWNcbiAqIEByZXR1cm4gc2V0dGluZyBvZiBjdXJyZW50IHBhY2thZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNldHRpbmcoKTogQXNzZXRzUHJvY2Vzc2VyU2V0dGluZyB7XG4gIC8vIHRzbGludDpkaXNhYmxlOm5vLXN0cmluZy1saXRlcmFsXG4gIHJldHVybiBjb25maWcoKVsnQHdmaC9hc3NldHMtcHJvY2Vzc2VyJ10hO1xufVxuIl19