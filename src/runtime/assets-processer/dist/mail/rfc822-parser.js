"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const async_LLn_parser_1 = require("dr-comp-package/wfh/dist/async-LLn-parser");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
var RCF822TokenType;
(function (RCF822TokenType) {
    RCF822TokenType[RCF822TokenType["CRLF"] = 0] = "CRLF";
    RCF822TokenType[RCF822TokenType[":"] = 1] = ":";
    RCF822TokenType[RCF822TokenType[";"] = 2] = ";";
    RCF822TokenType[RCF822TokenType["quoteStr"] = 3] = "quoteStr";
    RCF822TokenType[RCF822TokenType["CONTENT"] = 4] = "CONTENT";
})(RCF822TokenType = exports.RCF822TokenType || (exports.RCF822TokenType = {}));
const CR = '\r'.charCodeAt(0);
const LF = '\n'.charCodeAt(0);
const BACK_SLASH = '\\'.charCodeAt(0);
const QUOTE_MARK1 = '"'.charCodeAt(0);
const QUOTE_MARK2 = '\''.charCodeAt(0);
const COLON_MARK = ':'.charCodeAt(0);
const SEMI_COL = ';'.charCodeAt(0);
const parseLex = (la) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    let chrCode = yield la.la();
    while (chrCode != null) {
        const chr = String.fromCharCode(chrCode);
        if (yield la.isNext(CR, LF)) {
            if (!/[\t ]/.test(String.fromCharCode((yield la.la(3))))) {
                la.startToken(RCF822TokenType.CRLF);
                yield la.advance(2);
                la.emitToken();
            }
            else {
                yield la.advance(2);
                yield skipWhiteSpace(la);
            }
        }
        else if ((yield la.la()) === LF) {
            if (!/[\t ]/.test(String.fromCharCode((yield la.la(2))))) {
                la.startToken(RCF822TokenType.CRLF);
                yield la.advance();
                la.emitToken();
            }
            else {
                yield la.advance();
                yield skipWhiteSpace(la);
            }
        }
        else if (chr === ':' || chr === ';') {
            la.startToken(RCF822TokenType[chr]);
            yield la.advance();
            la.emitToken();
            yield skipWhiteSpace(la);
        }
        else if (/\s/.test(chr)) {
            yield skipWhiteSpace(la);
        }
        else if (chr === '"' || chr === '\'') {
            yield quoteStr(la);
        }
        else {
            la.startToken(RCF822TokenType.CONTENT);
            // console.log(tk);
            yield la.advance();
            let code = yield la.la();
            let emit = false;
            while (code != null) {
                switch (code) {
                    case CR:
                    case LF:
                    case COLON_MARK:
                    case SEMI_COL:
                    case CR:
                    case QUOTE_MARK1:
                    case QUOTE_MARK2:
                        emit = true;
                        la.emitToken();
                        break;
                    default:
                        yield la.advance();
                        code = yield la.la();
                }
                if (emit)
                    break;
            }
        }
        chrCode = yield la.la();
    }
});
function quoteStr(la) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        la.startToken(RCF822TokenType.quoteStr);
        const openChar = yield la.advance();
        while (true) {
            const next = yield la.la();
            if (next == null) {
                return la.throwError();
            }
            if (next === BACK_SLASH) {
                yield la.advance(2);
            }
            else if (next === openChar) {
                yield la.advance();
                la.emitToken();
                break;
            }
            else {
                yield la.advance();
            }
        }
    });
}
function skipWhiteSpace(la) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        do {
            const code = yield la.la();
            if (code == null)
                return;
            if (/\s/.test(String.fromCharCode(code))) {
                yield la.advance();
            }
            else {
                break;
            }
        } while (true);
    });
}
const parseGrammar = (la) => tslib_1.__awaiter(this, void 0, void 0, function* () {
    yield parseHeaders(la);
    while ((yield la.la()) != null) {
        // await la.advance();
        // tslint:disable-next-line: no-console
        console.log((yield la.advance()).text);
    }
});
function parseHeaders(la) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const name = yield la.la();
    });
}
function parse(readable) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const input = new rxjs_1.Subject();
        const done = input.pipe(operators_1.observeOn(rxjs_1.queueScheduler), async_LLn_parser_1.mapChunks('RCF822-lexer', parseLex), operators_1.map(chunk => {
            chunk.text = Buffer.from(Uint8Array.from(chunk.values)).toString();
            // if (chunk.type === RCF822TokenType.CONTENT)
            // (chunk as Token<RCF822TokenType>).text = chunk.values!.join();
            delete chunk.values;
            return [chunk];
        }), async_LLn_parser_1.mapChunksObs('RCF822-parser', la => rxjs_1.from(parseGrammar(la))), operators_1.share()).toPromise();
        if (readable instanceof Buffer) {
            input.next(readable);
            input.complete();
        }
        else {
            // TODO:
        }
        yield done;
    });
}
exports.parse = parse;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
