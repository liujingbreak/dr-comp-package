"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const http_proxy_middleware_1 = tslib_1.__importDefault(require("http-proxy-middleware"));
const __api_1 = tslib_1.__importDefault(require("__api"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const url_1 = tslib_1.__importDefault(require("url"));
const log = require('log4js').getLogger(__api_1.default.packageName);
function proxyToDevServer() {
    const config = __api_1.default.config.get(__api_1.default.packageName).indexHtmlProxy;
    if (config == null)
        return;
    config.changeOrigin = true;
    config.ws = true;
    config.onError = (err, req, res) => {
        if (err.code === 'ECONNREFUSED') {
            log.warn('Can not connect to %s%s, farward to local static resource', config.target, req.url);
            return req.__goNext();
        }
        log.warn(err);
        req.__goNext(err);
    };
    const proxyHandler = http_proxy_middleware_1.default(config);
    __api_1.default.use((req, res, next) => {
        req.__goNext = next;
        proxyHandler(req, res, next);
    });
}
exports.proxyToDevServer = proxyToDevServer;
function fallbackIndexHtml() {
    const ruleObj = __api_1.default.config.get(__api_1.default.packageName).fallbackIndexHtml;
    const rules = [];
    Object.keys(ruleObj).forEach(key => {
        rules.push({
            reg: new RegExp(key),
            tmpl: lodash_1.default.template(ruleObj[key])
        });
    });
    __api_1.default.use('/', (req, res, next) => {
        if (req.method !== 'GET')
            return next();
        rules.some(({ reg, tmpl }) => {
            const orig = req.url;
            const match = reg.exec(req.url);
            if (!match)
                return false;
            // Reference to https://github.com/kapouer/express-urlrewrite/blob/master/index.js#L45
            req.url = req.originalUrl = tmpl({ match });
            log.debug('rewrite url %s to %s', orig, req.url);
            req.query = url_1.default.parse(req.url, true, true).query;
            return true;
        });
        next();
    });
}
exports.fallbackIndexHtml = fallbackIndexHtml;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL3RzL2luZGV4LWh0bWwtcm91dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMEZBQTBDO0FBRTFDLDBEQUF3QjtBQUN4Qiw0REFBdUI7QUFDdkIsc0RBQXNCO0FBQ3RCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsZUFBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBS3pELFNBQWdCLGdCQUFnQjtJQUM5QixNQUFNLE1BQU0sR0FBNkIsZUFBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGNBQWMsQ0FBQztJQUN4RixJQUFJLE1BQU0sSUFBSSxJQUFJO1FBQ2hCLE9BQU87SUFDVCxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUMzQixNQUFNLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztJQUVqQixNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNqQyxJQUFLLEdBQTZCLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFBRTtZQUMxRCxHQUFHLENBQUMsSUFBSSxDQUFDLDJEQUEyRCxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlGLE9BQVEsR0FBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxQztRQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixHQUFxQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUM7SUFFRixNQUFNLFlBQVksR0FBRywrQkFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLGVBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ3hCLEdBQXFCLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUN2QyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFyQkQsNENBcUJDO0FBRUQsU0FBZ0IsaUJBQWlCO0lBQy9CLE1BQU0sT0FBTyxHQUE0QixlQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsaUJBQWlCLENBQUM7SUFFM0YsTUFBTSxLQUFLLEdBQW1ELEVBQUUsQ0FBQztJQUVqRSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNqQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ1QsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLEVBQUUsZ0JBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBVyxDQUFDO1NBQ3pDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsZUFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQzlCLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLO1lBQ3RCLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFFaEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBQyxFQUFFLEVBQUU7WUFDekIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNyQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsS0FBSztnQkFDUixPQUFPLEtBQUssQ0FBQztZQUNmLHNGQUFzRjtZQUN0RixHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztZQUMxQyxHQUFHLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakQsR0FBRyxDQUFDLEtBQUssR0FBRyxhQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNqRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUE3QkQsOENBNkJDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL2Rpc3QvaW5kZXgtaHRtbC1yb3V0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcm94eSBmcm9tICdodHRwLXByb3h5LW1pZGRsZXdhcmUnO1xuaW1wb3J0IHtOZXh0RnVuY3Rpb24sIFJlcXVlc3R9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGFwaSBmcm9tICdfX2FwaSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFVybCBmcm9tICd1cmwnO1xuY29uc3QgbG9nID0gcmVxdWlyZSgnbG9nNGpzJykuZ2V0TG9nZ2VyKGFwaS5wYWNrYWdlTmFtZSk7XG5cbmludGVyZmFjZSBSZXFXaXRoTmV4dENiIGV4dGVuZHMgUmVxdWVzdCB7XG4gIF9fZ29OZXh0OiBOZXh0RnVuY3Rpb247XG59XG5leHBvcnQgZnVuY3Rpb24gcHJveHlUb0RldlNlcnZlcigpIHtcbiAgY29uc3QgY29uZmlnOiBwcm94eS5Db25maWcgfCB1bmRlZmluZWQgPSBhcGkuY29uZmlnLmdldChhcGkucGFja2FnZU5hbWUpLmluZGV4SHRtbFByb3h5O1xuICBpZiAoY29uZmlnID09IG51bGwpXG4gICAgcmV0dXJuO1xuICBjb25maWcuY2hhbmdlT3JpZ2luID0gdHJ1ZTtcbiAgY29uZmlnLndzID0gdHJ1ZTtcblxuICBjb25maWcub25FcnJvciA9IChlcnIsIHJlcSwgcmVzKSA9PiB7XG4gICAgaWYgKChlcnIgYXMgTm9kZUpTLkVycm5vRXhjZXB0aW9uKS5jb2RlID09PSAnRUNPTk5SRUZVU0VEJykge1xuICAgICAgbG9nLndhcm4oJ0NhbiBub3QgY29ubmVjdCB0byAlcyVzLCBmYXJ3YXJkIHRvIGxvY2FsIHN0YXRpYyByZXNvdXJjZScsIGNvbmZpZy50YXJnZXQsIHJlcS51cmwpO1xuICAgICAgcmV0dXJuIChyZXEgYXMgUmVxV2l0aE5leHRDYikuX19nb05leHQoKTtcbiAgICB9XG4gICAgbG9nLndhcm4oZXJyKTtcbiAgICAocmVxIGFzIFJlcVdpdGhOZXh0Q2IpLl9fZ29OZXh0KGVycik7XG4gIH07XG5cbiAgY29uc3QgcHJveHlIYW5kbGVyID0gcHJveHkoY29uZmlnKTtcbiAgYXBpLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAocmVxIGFzIFJlcVdpdGhOZXh0Q2IpLl9fZ29OZXh0ID0gbmV4dDtcbiAgICBwcm94eUhhbmRsZXIocmVxLCByZXMsIG5leHQpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZhbGxiYWNrSW5kZXhIdG1sKCkge1xuICBjb25zdCBydWxlT2JqOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IGFwaS5jb25maWcuZ2V0KGFwaS5wYWNrYWdlTmFtZSkuZmFsbGJhY2tJbmRleEh0bWw7XG5cbiAgY29uc3QgcnVsZXM6IEFycmF5PHtyZWc6IFJlZ0V4cCwgdG1wbDogXy5UZW1wbGF0ZUV4ZWN1dG9yfT4gPSBbXTtcblxuICBPYmplY3Qua2V5cyhydWxlT2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgcnVsZXMucHVzaCh7XG4gICAgICByZWc6IG5ldyBSZWdFeHAoa2V5KSxcbiAgICAgIHRtcGw6IF8udGVtcGxhdGUocnVsZU9ialtrZXldIGFzIHN0cmluZylcbiAgICB9KTtcbiAgfSk7XG5cbiAgYXBpLnVzZSgnLycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJylcbiAgICAgIHJldHVybiBuZXh0KCk7XG5cbiAgICBydWxlcy5zb21lKCh7cmVnLCB0bXBsfSkgPT4ge1xuICAgICAgY29uc3Qgb3JpZyA9IHJlcS51cmw7XG4gICAgICBjb25zdCBtYXRjaCA9IHJlZy5leGVjKHJlcS51cmwpO1xuICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gUmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9rYXBvdWVyL2V4cHJlc3MtdXJscmV3cml0ZS9ibG9iL21hc3Rlci9pbmRleC5qcyNMNDVcbiAgICAgIHJlcS51cmwgPSByZXEub3JpZ2luYWxVcmwgPSB0bXBsKHttYXRjaH0pO1xuICAgICAgbG9nLmRlYnVnKCdyZXdyaXRlIHVybCAlcyB0byAlcycsIG9yaWcsIHJlcS51cmwpO1xuICAgICAgcmVxLnF1ZXJ5ID0gVXJsLnBhcnNlKHJlcS51cmwsIHRydWUsIHRydWUpLnF1ZXJ5O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgbmV4dCgpO1xuICB9KTtcbn1cbiJdfQ==
