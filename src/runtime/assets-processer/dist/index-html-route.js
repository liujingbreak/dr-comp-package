"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const http_proxy_middleware_1 = tslib_1.__importDefault(require("http-proxy-middleware"));
const __api_1 = tslib_1.__importDefault(require("__api"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const log = require('log4js').getLogger(__api_1.default.packageName);
function proxyToDevServer() {
    const config = __api_1.default.config.get(__api_1.default.packageName).indexHtmlProxy;
    if (config == null)
        return;
    config.changeOrigin = true;
    config.ws = true;
    config.onError = (err, req, res) => {
        if (err.code === 'ECONNREFUSED') {
            log.warn('Can not connect to %s, farward to local static resource', config.target);
            return req.__goNext();
        }
        log.warn(err);
        req.__goNext(err);
    };
    const proxyHandler = http_proxy_middleware_1.default(config);
    __api_1.default.use((req, res, next) => {
        req.__goNext = next;
        proxyHandler(req, res, next);
    });
}
function resourcePathRewrite() {
    proxyToDevServer();
    const ruleObj = __api_1.default.config.get(__api_1.default.packageName).resourcePathRewrite;
    const rules = [];
    Object.keys(ruleObj).forEach(key => {
        rules.push({
            reg: new RegExp(key),
            tmpl: lodash_1.default.template(ruleObj[key])
        });
    });
    __api_1.default.use((req, res, next) => {
        if (req.method !== 'GET')
            return next();
        rules.some(({ reg, tmpl }) => {
            const match = reg.exec(req.path);
            if (!match)
                return false;
            const origin = req.path;
            req.path = tmpl({ match });
            log.info('rewrite path %s to %s', origin, req.path);
            return true;
        });
        next();
    });
}
exports.default = resourcePathRewrite;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL3RzL2luZGV4LWh0bWwtcm91dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMEZBQTBDO0FBRTFDLDBEQUF3QjtBQUN4Qiw0REFBdUI7QUFDdkIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxlQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFLekQsU0FBUyxnQkFBZ0I7SUFDdkIsTUFBTSxNQUFNLEdBQTZCLGVBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLENBQUM7SUFDeEYsSUFBSSxNQUFNLElBQUksSUFBSTtRQUNoQixPQUFPO0lBQ1QsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDM0IsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFFakIsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDakMsSUFBSyxHQUE2QixDQUFDLElBQUksS0FBSyxjQUFjLEVBQUU7WUFDMUQsR0FBRyxDQUFDLElBQUksQ0FBQyx5REFBeUQsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbkYsT0FBUSxHQUFxQixDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFDO1FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNiLEdBQXFCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLCtCQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsZUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDeEIsR0FBcUIsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3ZDLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQXdCLG1CQUFtQjtJQUN6QyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CLE1BQU0sT0FBTyxHQUE0QixlQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsbUJBQW1CLENBQUM7SUFFN0YsTUFBTSxLQUFLLEdBQW1ELEVBQUUsQ0FBQztJQUVqRSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNqQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ1QsR0FBRyxFQUFFLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNwQixJQUFJLEVBQUUsZ0JBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBVyxDQUFDO1NBQ3pDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsZUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDekIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEtBQUs7WUFDdEIsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUVoQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBRTtZQUN6QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsS0FBSztnQkFDUixPQUFPLEtBQUssQ0FBQztZQUNmLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDeEIsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUE1QkQsc0NBNEJDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL2Rpc3QvaW5kZXgtaHRtbC1yb3V0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcm94eSBmcm9tICdodHRwLXByb3h5LW1pZGRsZXdhcmUnO1xuaW1wb3J0IHtOZXh0RnVuY3Rpb24sIFJlcXVlc3R9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGFwaSBmcm9tICdfX2FwaSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuY29uc3QgbG9nID0gcmVxdWlyZSgnbG9nNGpzJykuZ2V0TG9nZ2VyKGFwaS5wYWNrYWdlTmFtZSk7XG5cbmludGVyZmFjZSBSZXFXaXRoTmV4dENiIGV4dGVuZHMgUmVxdWVzdCB7XG4gIF9fZ29OZXh0OiBOZXh0RnVuY3Rpb247XG59XG5mdW5jdGlvbiBwcm94eVRvRGV2U2VydmVyKCkge1xuICBjb25zdCBjb25maWc6IHByb3h5LkNvbmZpZyB8IHVuZGVmaW5lZCA9IGFwaS5jb25maWcuZ2V0KGFwaS5wYWNrYWdlTmFtZSkuaW5kZXhIdG1sUHJveHk7XG4gIGlmIChjb25maWcgPT0gbnVsbClcbiAgICByZXR1cm47XG4gIGNvbmZpZy5jaGFuZ2VPcmlnaW4gPSB0cnVlO1xuICBjb25maWcud3MgPSB0cnVlO1xuXG4gIGNvbmZpZy5vbkVycm9yID0gKGVyciwgcmVxLCByZXMpID0+IHtcbiAgICBpZiAoKGVyciBhcyBOb2RlSlMuRXJybm9FeGNlcHRpb24pLmNvZGUgPT09ICdFQ09OTlJFRlVTRUQnKSB7XG4gICAgICBsb2cud2FybignQ2FuIG5vdCBjb25uZWN0IHRvICVzLCBmYXJ3YXJkIHRvIGxvY2FsIHN0YXRpYyByZXNvdXJjZScsIGNvbmZpZy50YXJnZXQpO1xuICAgICAgcmV0dXJuIChyZXEgYXMgUmVxV2l0aE5leHRDYikuX19nb05leHQoKTtcbiAgICB9XG4gICAgbG9nLndhcm4oZXJyKTtcbiAgICAocmVxIGFzIFJlcVdpdGhOZXh0Q2IpLl9fZ29OZXh0KGVycik7XG4gIH07XG5cbiAgY29uc3QgcHJveHlIYW5kbGVyID0gcHJveHkoY29uZmlnKTtcbiAgYXBpLnVzZSgocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAocmVxIGFzIFJlcVdpdGhOZXh0Q2IpLl9fZ29OZXh0ID0gbmV4dDtcbiAgICBwcm94eUhhbmRsZXIocmVxLCByZXMsIG5leHQpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb3VyY2VQYXRoUmV3cml0ZSgpIHtcbiAgcHJveHlUb0RldlNlcnZlcigpO1xuICBjb25zdCBydWxlT2JqOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IGFwaS5jb25maWcuZ2V0KGFwaS5wYWNrYWdlTmFtZSkucmVzb3VyY2VQYXRoUmV3cml0ZTtcblxuICBjb25zdCBydWxlczogQXJyYXk8e3JlZzogUmVnRXhwLCB0bXBsOiBfLlRlbXBsYXRlRXhlY3V0b3J9PiA9IFtdO1xuXG4gIE9iamVjdC5rZXlzKHJ1bGVPYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICBydWxlcy5wdXNoKHtcbiAgICAgIHJlZzogbmV3IFJlZ0V4cChrZXkpLFxuICAgICAgdG1wbDogXy50ZW1wbGF0ZShydWxlT2JqW2tleV0gYXMgc3RyaW5nKVxuICAgIH0pO1xuICB9KTtcblxuICBhcGkudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJylcbiAgICAgIHJldHVybiBuZXh0KCk7XG5cbiAgICBydWxlcy5zb21lKCh7cmVnLCB0bXBsfSkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2ggPSByZWcuZXhlYyhyZXEucGF0aCk7XG4gICAgICBpZiAoIW1hdGNoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjb25zdCBvcmlnaW4gPSByZXEucGF0aDtcbiAgICAgIHJlcS5wYXRoID0gdG1wbCh7bWF0Y2h9KTtcbiAgICAgIGxvZy5pbmZvKCdyZXdyaXRlIHBhdGggJXMgdG8gJXMnLCBvcmlnaW4sIHJlcS5wYXRoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIG5leHQoKTtcbiAgfSk7XG59XG4iXX0=
