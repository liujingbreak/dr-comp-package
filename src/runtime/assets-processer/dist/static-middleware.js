"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const serve_static_zip_1 = tslib_1.__importDefault(require("serve-static-zip"));
const path_1 = tslib_1.__importDefault(require("path"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const express_1 = tslib_1.__importDefault(require("express"));
const ms = require('ms');
function createStaticRoute(staticDir, maxAgeMap = {}) {
    let maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    return express_1.default.static(staticDir, { setHeaders: createSetHeaderFunc(maxAgeNumMap) });
}
exports.createStaticRoute = createStaticRoute;
function createZipRoute(maxAgeMap = {}) {
    const maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    const zss = serve_static_zip_1.default('', { setHeaders: createSetHeaderFunc(maxAgeNumMap) });
    return zss;
}
exports.createZipRoute = createZipRoute;
function createSetHeaderFunc(maxAgeNumMap) {
    return (res, path, entry) => {
        var ext = path_1.default.extname(path).toLowerCase();
        if (ext.startsWith('.'))
            ext = ext.substring(1);
        if (lodash_1.default.has(maxAgeNumMap, ext))
            setCacheControlHeader(res, maxAgeNumMap[ext]);
        else
            res.setHeader('Cache-Control', 'no-store');
        // res.setHeader('Access-Control-Allow-Origin', '*');
    };
}
function setCacheControlHeader(res, _maxage = 0, immutable = false) {
    if (_maxage == null) {
        res.setHeader('Cache-Control', 'no-store');
        return;
    }
    var cacheControl = 'public, max-age=' + Math.floor(_maxage / 1000);
    if (immutable) {
        cacheControl += ', immutable';
    }
    res.setHeader('Cache-Control', cacheControl);
}
function parseMaxAgeMap(maxAgeMap) {
    let maxAgeNumMap = {};
    if (maxAgeMap) {
        Object.keys(maxAgeMap).forEach(key => {
            const value = maxAgeMap[key];
            maxAgeNumMap[key] = typeof value === 'string' ? ms(value) : value;
        });
    }
    else {
        maxAgeNumMap = {};
    }
    return maxAgeNumMap;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL3RzL3N0YXRpYy1taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdGQUF3QztBQUV4Qyx3REFBd0I7QUFDeEIsNERBQXVCO0FBQ3ZCLDhEQUE4QjtBQUU5QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFekIsU0FBZ0IsaUJBQWlCLENBQUMsU0FBaUIsRUFBRSxZQUFrRCxFQUFFO0lBQ3ZHLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDcEYsQ0FBQztBQUhELDhDQUdDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLFlBQXlDLEVBQUU7SUFFeEUsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sR0FBRyxHQUFHLDBCQUFRLENBQUMsRUFBRSxFQUFFLEVBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUMxRSxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFMRCx3Q0FLQztBQUVELFNBQVMsbUJBQW1CLENBQUMsWUFBeUM7SUFDcEUsT0FBTyxDQUFDLEdBQWEsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLEVBQUU7UUFDakQsSUFBSSxHQUFHLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1lBQ3JCLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksZ0JBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQztZQUMxQixxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O1lBRTlDLEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzdDLHFEQUFxRDtJQUN2RCxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxHQUFhLEVBQUUsVUFBeUIsQ0FBQyxFQUFFLFNBQVMsR0FBRyxLQUFLO0lBQ3pGLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtRQUNuQixHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMzQyxPQUFPO0tBQ1I7SUFDRCxJQUFJLFlBQVksR0FBRyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNuRSxJQUFJLFNBQVMsRUFBRTtRQUNiLFlBQVksSUFBSSxhQUFhLENBQUM7S0FDL0I7SUFDRCxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsU0FBK0M7SUFDckUsSUFBSSxZQUFZLEdBQWdDLEVBQUUsQ0FBQztJQUNuRCxJQUFJLFNBQVMsRUFBRTtRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ25DLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM3QixZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztLQUNKO1NBQU07UUFDTCxZQUFZLEdBQUcsRUFBRSxDQUFDO0tBQ25CO0lBQ0QsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvQGRyLWNvcmUvYXNzZXRzLXByb2Nlc3Nlci9kaXN0L3N0YXRpYy1taWRkbGV3YXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNlcnZlWmlwIGZyb20gJ3NlcnZlLXN0YXRpYy16aXAnO1xuaW1wb3J0IHtSZXNwb25zZSwgSGFuZGxlcn0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgUGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcblxuY29uc3QgbXMgPSByZXF1aXJlKCdtcycpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RhdGljUm91dGUoc3RhdGljRGlyOiBzdHJpbmcsIG1heEFnZU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXJ9ID0ge30pOiBIYW5kbGVyIHtcbiAgbGV0IG1heEFnZU51bU1hcCA9IHBhcnNlTWF4QWdlTWFwKG1heEFnZU1hcCk7XG4gIHJldHVybiBleHByZXNzLnN0YXRpYyhzdGF0aWNEaXIsIHtzZXRIZWFkZXJzOiBjcmVhdGVTZXRIZWFkZXJGdW5jKG1heEFnZU51bU1hcCl9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVppcFJvdXRlKG1heEFnZU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBzdHJpbmd9ID0ge30pOlxuc2VydmVaaXAuWmlwUmVzb3VyY2VNaWRkbGV3YXJlIHtcbiAgY29uc3QgbWF4QWdlTnVtTWFwID0gcGFyc2VNYXhBZ2VNYXAobWF4QWdlTWFwKTtcbiAgY29uc3QgenNzID0gc2VydmVaaXAoJycsIHtzZXRIZWFkZXJzOiBjcmVhdGVTZXRIZWFkZXJGdW5jKG1heEFnZU51bU1hcCl9KTtcbiAgcmV0dXJuIHpzcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2V0SGVhZGVyRnVuYyhtYXhBZ2VOdW1NYXA6IHtbZXh0bmFtZTogc3RyaW5nXTogbnVtYmVyfSkge1xuICByZXR1cm4gKHJlczogUmVzcG9uc2UsIHBhdGg6IHN0cmluZywgZW50cnk6IGFueSkgPT4ge1xuICAgIHZhciBleHQgPSBQYXRoLmV4dG5hbWUocGF0aCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZXh0LnN0YXJ0c1dpdGgoJy4nKSlcbiAgICAgIGV4dCA9IGV4dC5zdWJzdHJpbmcoMSk7XG4gICAgaWYgKF8uaGFzKG1heEFnZU51bU1hcCwgZXh0KSlcbiAgICAgIHNldENhY2hlQ29udHJvbEhlYWRlcihyZXMsIG1heEFnZU51bU1hcFtleHRdKTtcbiAgICBlbHNlXG4gICAgICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLXN0b3JlJyk7XG4gICAgLy8gcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2V0Q2FjaGVDb250cm9sSGVhZGVyKHJlczogUmVzcG9uc2UsIF9tYXhhZ2U6IG51bWJlciB8IG51bGwgPSAwLCBpbW11dGFibGUgPSBmYWxzZSkge1xuICBpZiAoX21heGFnZSA9PSBudWxsKSB7XG4gICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1zdG9yZScpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2FjaGVDb250cm9sID0gJ3B1YmxpYywgbWF4LWFnZT0nICsgTWF0aC5mbG9vcihfbWF4YWdlIC8gMTAwMCk7XG4gIGlmIChpbW11dGFibGUpIHtcbiAgICBjYWNoZUNvbnRyb2wgKz0gJywgaW1tdXRhYmxlJztcbiAgfVxuICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgY2FjaGVDb250cm9sKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNYXhBZ2VNYXAobWF4QWdlTWFwOiB7W2V4dG5hbWU6IHN0cmluZ106IHN0cmluZyB8IG51bWJlcn0pIHtcbiAgbGV0IG1heEFnZU51bU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG4gIGlmIChtYXhBZ2VNYXApIHtcbiAgICBPYmplY3Qua2V5cyhtYXhBZ2VNYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbWF4QWdlTWFwW2tleV07XG4gICAgICBtYXhBZ2VOdW1NYXBba2V5XSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBtcyh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtYXhBZ2VOdW1NYXAgPSB7fTtcbiAgfVxuICByZXR1cm4gbWF4QWdlTnVtTWFwO1xufVxuIl19
