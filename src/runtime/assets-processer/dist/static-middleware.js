"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const serve_static_zip_1 = tslib_1.__importDefault(require("serve-static-zip"));
const path_1 = tslib_1.__importDefault(require("path"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const express_1 = tslib_1.__importDefault(require("express"));
const ms = require('ms');
function createStaticRoute(staticDir, maxAgeMap = {}) {
    let maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    return express_1.default.static(staticDir, {
        setHeaders: createSetHeaderFunc(maxAgeNumMap),
        redirect: false
    });
}
exports.createStaticRoute = createStaticRoute;
function createZipRoute(maxAgeMap = {}) {
    const maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    const zss = serve_static_zip_1.default('', { setHeaders: createSetHeaderFunc(maxAgeNumMap) });
    return zss;
}
exports.createZipRoute = createZipRoute;
function createSetHeaderFunc(maxAgeNumMap) {
    return (res, path, entry) => {
        var ext = path_1.default.extname(path).toLowerCase();
        if (ext.startsWith('.'))
            ext = ext.substring(1);
        if (lodash_1.default.has(maxAgeNumMap, ext))
            setCacheControlHeader(res, maxAgeNumMap[ext]);
        else
            res.setHeader('Cache-Control', 'no-cache');
        res.setHeader('Access-Control-Allow-Origin', '*');
    };
}
function setCacheControlHeader(res, _maxage = 0, immutable = false) {
    if (_maxage == null) {
        res.setHeader('Cache-Control', 'no-cache');
        return;
    }
    var cacheControl = 'public, max-age=' + Math.floor(_maxage / 1000);
    if (immutable) {
        cacheControl += ', immutable';
    }
    res.setHeader('Cache-Control', cacheControl);
}
function parseMaxAgeMap(maxAgeMap) {
    let maxAgeNumMap = {};
    if (maxAgeMap) {
        Object.keys(maxAgeMap).forEach(key => {
            const value = maxAgeMap[key];
            maxAgeNumMap[key] = typeof value === 'string' ? ms(value) : value;
        });
    }
    else {
        maxAgeNumMap = {};
    }
    return maxAgeNumMap;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL3RzL3N0YXRpYy1taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdGQUF3QztBQUV4Qyx3REFBd0I7QUFDeEIsNERBQXVCO0FBQ3ZCLDhEQUE4QjtBQUU5QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFekIsU0FBZ0IsaUJBQWlCLENBQUMsU0FBaUIsRUFBRSxZQUFrRCxFQUFFO0lBQ3ZHLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUMvQixVQUFVLEVBQUUsbUJBQW1CLENBQUMsWUFBWSxDQUFDO1FBQzdDLFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUMsQ0FBQztBQUNMLENBQUM7QUFORCw4Q0FNQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxZQUF5QyxFQUFFO0lBRXhFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQyxNQUFNLEdBQUcsR0FBRywwQkFBUSxDQUFDLEVBQUUsRUFBRSxFQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDMUUsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBTEQsd0NBS0M7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFlBQXlDO0lBQ3BFLE9BQU8sQ0FBQyxHQUFhLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxFQUFFO1FBQ2pELElBQUksR0FBRyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztZQUNyQixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLGdCQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUM7WUFDMUIscUJBQXFCLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOztZQUU5QyxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3QyxHQUFHLENBQUMsU0FBUyxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUFDLEdBQWEsRUFBRSxVQUF5QixDQUFDLEVBQUUsU0FBUyxHQUFHLEtBQUs7SUFDekYsSUFBSSxPQUFPLElBQUksSUFBSSxFQUFFO1FBQ25CLEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzNDLE9BQU87S0FDUjtJQUNELElBQUksWUFBWSxHQUFHLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25FLElBQUksU0FBUyxFQUFFO1FBQ2IsWUFBWSxJQUFJLGFBQWEsQ0FBQztLQUMvQjtJQUNELEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxTQUErQztJQUNyRSxJQUFJLFlBQVksR0FBZ0MsRUFBRSxDQUFDO0lBQ25ELElBQUksU0FBUyxFQUFFO1FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO0tBQ0o7U0FBTTtRQUNMLFlBQVksR0FBRyxFQUFFLENBQUM7S0FDbkI7SUFDRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL2Rpc3Qvc3RhdGljLW1pZGRsZXdhcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2VydmVaaXAgZnJvbSAnc2VydmUtc3RhdGljLXppcCc7XG5pbXBvcnQge1Jlc3BvbnNlLCBIYW5kbGVyfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBQYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5jb25zdCBtcyA9IHJlcXVpcmUoJ21zJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0aWNSb3V0ZShzdGF0aWNEaXI6IHN0cmluZywgbWF4QWdlTWFwOiB7W2V4dG5hbWU6IHN0cmluZ106IHN0cmluZyB8IG51bWJlcn0gPSB7fSk6IEhhbmRsZXIge1xuICBsZXQgbWF4QWdlTnVtTWFwID0gcGFyc2VNYXhBZ2VNYXAobWF4QWdlTWFwKTtcbiAgcmV0dXJuIGV4cHJlc3Muc3RhdGljKHN0YXRpY0Rpciwge1xuICAgIHNldEhlYWRlcnM6IGNyZWF0ZVNldEhlYWRlckZ1bmMobWF4QWdlTnVtTWFwKSxcbiAgICByZWRpcmVjdDogZmFsc2VcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVaaXBSb3V0ZShtYXhBZ2VNYXA6IHtbZXh0bmFtZTogc3RyaW5nXTogc3RyaW5nfSA9IHt9KTpcbnNlcnZlWmlwLlppcFJlc291cmNlTWlkZGxld2FyZSB7XG4gIGNvbnN0IG1heEFnZU51bU1hcCA9IHBhcnNlTWF4QWdlTWFwKG1heEFnZU1hcCk7XG4gIGNvbnN0IHpzcyA9IHNlcnZlWmlwKCcnLCB7c2V0SGVhZGVyczogY3JlYXRlU2V0SGVhZGVyRnVuYyhtYXhBZ2VOdW1NYXApfSk7XG4gIHJldHVybiB6c3M7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNldEhlYWRlckZ1bmMobWF4QWdlTnVtTWFwOiB7W2V4dG5hbWU6IHN0cmluZ106IG51bWJlcn0pIHtcbiAgcmV0dXJuIChyZXM6IFJlc3BvbnNlLCBwYXRoOiBzdHJpbmcsIGVudHJ5OiBhbnkpID0+IHtcbiAgICB2YXIgZXh0ID0gUGF0aC5leHRuYW1lKHBhdGgpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGV4dC5zdGFydHNXaXRoKCcuJykpXG4gICAgICBleHQgPSBleHQuc3Vic3RyaW5nKDEpO1xuICAgIGlmIChfLmhhcyhtYXhBZ2VOdW1NYXAsIGV4dCkpXG4gICAgICBzZXRDYWNoZUNvbnRyb2xIZWFkZXIocmVzLCBtYXhBZ2VOdW1NYXBbZXh0XSk7XG4gICAgZWxzZVxuICAgICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1jYWNoZScpO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNldENhY2hlQ29udHJvbEhlYWRlcihyZXM6IFJlc3BvbnNlLCBfbWF4YWdlOiBudW1iZXIgfCBudWxsID0gMCwgaW1tdXRhYmxlID0gZmFsc2UpIHtcbiAgaWYgKF9tYXhhZ2UgPT0gbnVsbCkge1xuICAgIHJlcy5zZXRIZWFkZXIoJ0NhY2hlLUNvbnRyb2wnLCAnbm8tY2FjaGUnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNhY2hlQ29udHJvbCA9ICdwdWJsaWMsIG1heC1hZ2U9JyArIE1hdGguZmxvb3IoX21heGFnZSAvIDEwMDApO1xuICBpZiAoaW1tdXRhYmxlKSB7XG4gICAgY2FjaGVDb250cm9sICs9ICcsIGltbXV0YWJsZSc7XG4gIH1cbiAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsIGNhY2hlQ29udHJvbCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWF4QWdlTWFwKG1heEFnZU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXJ9KSB7XG4gIGxldCBtYXhBZ2VOdW1NYXA6IHtbZXh0bmFtZTogc3RyaW5nXTogbnVtYmVyfSA9IHt9O1xuICBpZiAobWF4QWdlTWFwKSB7XG4gICAgT2JqZWN0LmtleXMobWF4QWdlTWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1heEFnZU1hcFtrZXldO1xuICAgICAgbWF4QWdlTnVtTWFwW2tleV0gPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gbXModmFsdWUpIDogdmFsdWU7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWF4QWdlTnVtTWFwID0ge307XG4gIH1cbiAgcmV0dXJuIG1heEFnZU51bU1hcDtcbn1cbiJdfQ==
