"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const serve_static_zip_1 = tslib_1.__importDefault(require("serve-static-zip"));
const path_1 = tslib_1.__importDefault(require("path"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const express_1 = tslib_1.__importDefault(require("express"));
const ms = require('ms');
function createStaticRoute(staticDir, maxAgeMap = {}) {
    let maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    return express_1.default.static(staticDir, {
        setHeaders: createSetHeaderFunc(maxAgeNumMap),
        redirect: false
    });
}
exports.createStaticRoute = createStaticRoute;
function createZipRoute(maxAgeMap = {}) {
    const maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    const zss = serve_static_zip_1.default('', { setHeaders: createSetHeaderFunc(maxAgeNumMap) });
    return zss;
}
exports.createZipRoute = createZipRoute;
function createSetHeaderFunc(maxAgeNumMap) {
    return (res, path, entry) => {
        var ext = path_1.default.extname(path).toLowerCase();
        if (ext.startsWith('.'))
            ext = ext.substring(1);
        if (lodash_1.default.has(maxAgeNumMap, ext))
            setCacheControlHeader(res, maxAgeNumMap[ext]);
        else
            res.setHeader('Cache-Control', 'no-cache');
        // res.setHeader('Access-Control-Allow-Origin', '*');
    };
}
function setCacheControlHeader(res, _maxage = 0, immutable = false) {
    if (_maxage == null) {
        res.setHeader('Cache-Control', 'no-cache');
        return;
    }
    var cacheControl = 'public, max-age=' + Math.floor(_maxage / 1000);
    if (immutable) {
        cacheControl += ', immutable';
    }
    res.setHeader('Cache-Control', cacheControl);
}
function parseMaxAgeMap(maxAgeMap) {
    let maxAgeNumMap = {};
    if (maxAgeMap) {
        Object.keys(maxAgeMap).forEach(key => {
            const value = maxAgeMap[key];
            maxAgeNumMap[key] = typeof value === 'string' ? ms(value) : value;
        });
    }
    else {
        maxAgeNumMap = {};
    }
    return maxAgeNumMap;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL3RzL3N0YXRpYy1taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdGQUF3QztBQUV4Qyx3REFBd0I7QUFDeEIsNERBQXVCO0FBQ3ZCLDhEQUE4QjtBQUU5QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFekIsU0FBZ0IsaUJBQWlCLENBQUMsU0FBaUIsRUFBRSxZQUFrRCxFQUFFO0lBQ3ZHLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUMvQixVQUFVLEVBQUUsbUJBQW1CLENBQUMsWUFBWSxDQUFDO1FBQzdDLFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUMsQ0FBQztBQUNMLENBQUM7QUFORCw4Q0FNQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxZQUF5QyxFQUFFO0lBRXhFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQyxNQUFNLEdBQUcsR0FBRywwQkFBUSxDQUFDLEVBQUUsRUFBRSxFQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDMUUsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBTEQsd0NBS0M7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFlBQXlDO0lBQ3BFLE9BQU8sQ0FBQyxHQUFhLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxFQUFFO1FBQ2pELElBQUksR0FBRyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztZQUNyQixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLGdCQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUM7WUFDMUIscUJBQXFCLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOztZQUU5QyxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3QyxxREFBcUQ7SUFDdkQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMscUJBQXFCLENBQUMsR0FBYSxFQUFFLFVBQXlCLENBQUMsRUFBRSxTQUFTLEdBQUcsS0FBSztJQUN6RixJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQUU7UUFDbkIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDM0MsT0FBTztLQUNSO0lBQ0QsSUFBSSxZQUFZLEdBQUcsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDbkUsSUFBSSxTQUFTLEVBQUU7UUFDYixZQUFZLElBQUksYUFBYSxDQUFDO0tBQy9CO0lBQ0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLFNBQStDO0lBQ3JFLElBQUksWUFBWSxHQUFnQyxFQUFFLENBQUM7SUFDbkQsSUFBSSxTQUFTLEVBQUU7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUM7S0FDSjtTQUFNO1FBQ0wsWUFBWSxHQUFHLEVBQUUsQ0FBQztLQUNuQjtJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci1jb3JlL2Fzc2V0cy1wcm9jZXNzZXIvZGlzdC9zdGF0aWMtbWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXJ2ZVppcCBmcm9tICdzZXJ2ZS1zdGF0aWMtemlwJztcbmltcG9ydCB7UmVzcG9uc2UsIEhhbmRsZXJ9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5cbmNvbnN0IG1zID0gcmVxdWlyZSgnbXMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1JvdXRlKHN0YXRpY0Rpcjogc3RyaW5nLCBtYXhBZ2VNYXA6IHtbZXh0bmFtZTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyfSA9IHt9KTogSGFuZGxlciB7XG4gIGxldCBtYXhBZ2VOdW1NYXAgPSBwYXJzZU1heEFnZU1hcChtYXhBZ2VNYXApO1xuICByZXR1cm4gZXhwcmVzcy5zdGF0aWMoc3RhdGljRGlyLCB7XG4gICAgc2V0SGVhZGVyczogY3JlYXRlU2V0SGVhZGVyRnVuYyhtYXhBZ2VOdW1NYXApLFxuICAgIHJlZGlyZWN0OiBmYWxzZVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVppcFJvdXRlKG1heEFnZU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBzdHJpbmd9ID0ge30pOlxuc2VydmVaaXAuWmlwUmVzb3VyY2VNaWRkbGV3YXJlIHtcbiAgY29uc3QgbWF4QWdlTnVtTWFwID0gcGFyc2VNYXhBZ2VNYXAobWF4QWdlTWFwKTtcbiAgY29uc3QgenNzID0gc2VydmVaaXAoJycsIHtzZXRIZWFkZXJzOiBjcmVhdGVTZXRIZWFkZXJGdW5jKG1heEFnZU51bU1hcCl9KTtcbiAgcmV0dXJuIHpzcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2V0SGVhZGVyRnVuYyhtYXhBZ2VOdW1NYXA6IHtbZXh0bmFtZTogc3RyaW5nXTogbnVtYmVyfSkge1xuICByZXR1cm4gKHJlczogUmVzcG9uc2UsIHBhdGg6IHN0cmluZywgZW50cnk6IGFueSkgPT4ge1xuICAgIHZhciBleHQgPSBQYXRoLmV4dG5hbWUocGF0aCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZXh0LnN0YXJ0c1dpdGgoJy4nKSlcbiAgICAgIGV4dCA9IGV4dC5zdWJzdHJpbmcoMSk7XG4gICAgaWYgKF8uaGFzKG1heEFnZU51bU1hcCwgZXh0KSlcbiAgICAgIHNldENhY2hlQ29udHJvbEhlYWRlcihyZXMsIG1heEFnZU51bU1hcFtleHRdKTtcbiAgICBlbHNlXG4gICAgICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlJyk7XG4gICAgLy8gcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2V0Q2FjaGVDb250cm9sSGVhZGVyKHJlczogUmVzcG9uc2UsIF9tYXhhZ2U6IG51bWJlciB8IG51bGwgPSAwLCBpbW11dGFibGUgPSBmYWxzZSkge1xuICBpZiAoX21heGFnZSA9PSBudWxsKSB7XG4gICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1jYWNoZScpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2FjaGVDb250cm9sID0gJ3B1YmxpYywgbWF4LWFnZT0nICsgTWF0aC5mbG9vcihfbWF4YWdlIC8gMTAwMCk7XG4gIGlmIChpbW11dGFibGUpIHtcbiAgICBjYWNoZUNvbnRyb2wgKz0gJywgaW1tdXRhYmxlJztcbiAgfVxuICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgY2FjaGVDb250cm9sKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNYXhBZ2VNYXAobWF4QWdlTWFwOiB7W2V4dG5hbWU6IHN0cmluZ106IHN0cmluZyB8IG51bWJlcn0pIHtcbiAgbGV0IG1heEFnZU51bU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG4gIGlmIChtYXhBZ2VNYXApIHtcbiAgICBPYmplY3Qua2V5cyhtYXhBZ2VNYXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbWF4QWdlTWFwW2tleV07XG4gICAgICBtYXhBZ2VOdW1NYXBba2V5XSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBtcyh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtYXhBZ2VOdW1NYXAgPSB7fTtcbiAgfVxuICByZXR1cm4gbWF4QWdlTnVtTWFwO1xufVxuIl19
