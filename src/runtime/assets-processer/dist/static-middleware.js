"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const serve_static_zip_1 = tslib_1.__importDefault(require("serve-static-zip"));
const path_1 = tslib_1.__importDefault(require("path"));
const __api_1 = tslib_1.__importDefault(require("__api"));
const ms = require('ms');
function createStaticRoute(staticDir, maxAgeMap) {
    let maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    return __api_1.default.express.static(staticDir, { setHeaders: createSetHeaderFunc(maxAgeNumMap) });
}
exports.createStaticRoute = createStaticRoute;
function createZipRoute(maxAgeMap) {
    const maxAgeNumMap = parseMaxAgeMap(maxAgeMap);
    const zss = serve_static_zip_1.default('', { setHeaders: createSetHeaderFunc(maxAgeNumMap) });
    return zss;
}
exports.createZipRoute = createZipRoute;
function createSetHeaderFunc(maxAgeNumMap) {
    return (res, path, entry) => {
        var ext = path_1.default.extname(path).toLowerCase();
        if (ext.startsWith('.'))
            ext = ext.substring(1);
        if (maxAgeNumMap[ext])
            setCacheControlHeader(res, maxAgeNumMap[ext]);
        res.setHeader('Access-Control-Allow-Origin', '*');
    };
}
function setCacheControlHeader(res, _maxage = 0, immutable = false) {
    var cacheControl = 'public, max-age=' + Math.floor(_maxage / 1000);
    if (immutable) {
        cacheControl += ', immutable';
    }
    res.setHeader('Cache-Control', cacheControl);
}
function parseMaxAgeMap(maxAgeMap) {
    let maxAgeNumMap = {};
    if (maxAgeMap) {
        Object.keys(maxAgeMap).forEach(key => {
            const value = maxAgeMap[key];
            maxAgeNumMap[key] = typeof value === 'string' ? ms(value) : value;
        });
    }
    else {
        maxAgeNumMap = {};
    }
    return maxAgeNumMap;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9hc3NldHMtcHJvY2Vzc2VyL3RzL3N0YXRpYy1taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGdGQUF3QztBQUV4Qyx3REFBd0I7QUFDeEIsMERBQXdCO0FBRXhCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QixTQUFnQixpQkFBaUIsQ0FBQyxTQUFpQixFQUFFLFNBQWdEO0lBQ3BHLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGVBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUhELDhDQUdDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLFNBQXVDO0lBRXJFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQyxNQUFNLEdBQUcsR0FBRywwQkFBUSxDQUFDLEVBQUUsRUFBRSxFQUFDLFVBQVUsRUFBRSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDMUUsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBTEQsd0NBS0M7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFlBQXlDO0lBQ3JFLE9BQU8sQ0FBQyxHQUFhLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxFQUFFO1FBQ2xELElBQUksR0FBRyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztZQUN0QixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLFlBQVksQ0FBQyxHQUFHLENBQUM7WUFDcEIscUJBQXFCLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxTQUFTLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQVMscUJBQXFCLENBQUMsR0FBYSxFQUFFLE9BQU8sR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLEtBQUs7SUFDM0UsSUFBSSxZQUFZLEdBQUcsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFbkUsSUFBSSxTQUFTLEVBQUU7UUFDZCxZQUFZLElBQUksYUFBYSxDQUFDO0tBQzlCO0lBQ0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLFNBQStDO0lBQ3RFLElBQUksWUFBWSxHQUFnQyxFQUFFLENBQUM7SUFDbkQsSUFBSSxTQUFTLEVBQUU7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbkUsQ0FBQyxDQUFDLENBQUM7S0FDSDtTQUFNO1FBQ04sWUFBWSxHQUFHLEVBQUUsQ0FBQztLQUNsQjtJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3JCLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL0Bkci1jb3JlL2Fzc2V0cy1wcm9jZXNzZXIvZGlzdC9zdGF0aWMtbWlkZGxld2FyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXJ2ZVppcCBmcm9tICdzZXJ2ZS1zdGF0aWMtemlwJztcbmltcG9ydCB7UmVzcG9uc2UsIEhhbmRsZXJ9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgYXBpIGZyb20gJ19fYXBpJztcblxuY29uc3QgbXMgPSByZXF1aXJlKCdtcycpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RhdGljUm91dGUoc3RhdGljRGlyOiBzdHJpbmcsIG1heEFnZU1hcD86IHtbZXh0bmFtZTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyfSk6IEhhbmRsZXIge1xuXHRsZXQgbWF4QWdlTnVtTWFwID0gcGFyc2VNYXhBZ2VNYXAobWF4QWdlTWFwKTtcblx0cmV0dXJuIGFwaS5leHByZXNzLnN0YXRpYyhzdGF0aWNEaXIsIHtzZXRIZWFkZXJzOiBjcmVhdGVTZXRIZWFkZXJGdW5jKG1heEFnZU51bU1hcCl9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVppcFJvdXRlKG1heEFnZU1hcD86IHtbZXh0bmFtZTogc3RyaW5nXTogc3RyaW5nfSk6XG5zZXJ2ZVppcC5aaXBSZXNvdXJjZU1pZGRsZXdhcmUge1xuXHRjb25zdCBtYXhBZ2VOdW1NYXAgPSBwYXJzZU1heEFnZU1hcChtYXhBZ2VNYXApO1xuXHRjb25zdCB6c3MgPSBzZXJ2ZVppcCgnJywge3NldEhlYWRlcnM6IGNyZWF0ZVNldEhlYWRlckZ1bmMobWF4QWdlTnVtTWFwKX0pO1xuXHRyZXR1cm4genNzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZXRIZWFkZXJGdW5jKG1heEFnZU51bU1hcDoge1tleHRuYW1lOiBzdHJpbmddOiBudW1iZXJ9KSB7XG5cdHJldHVybiAocmVzOiBSZXNwb25zZSwgcGF0aDogc3RyaW5nLCBlbnRyeTogYW55KSA9PiB7XG5cdFx0dmFyIGV4dCA9IFBhdGguZXh0bmFtZShwYXRoKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlmIChleHQuc3RhcnRzV2l0aCgnLicpKVxuXHRcdFx0ZXh0ID0gZXh0LnN1YnN0cmluZygxKTtcblx0XHRpZiAobWF4QWdlTnVtTWFwW2V4dF0pXG5cdFx0XHRzZXRDYWNoZUNvbnRyb2xIZWFkZXIocmVzLCBtYXhBZ2VOdW1NYXBbZXh0XSk7XG5cdFx0cmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gc2V0Q2FjaGVDb250cm9sSGVhZGVyKHJlczogUmVzcG9uc2UsIF9tYXhhZ2UgPSAwLCBpbW11dGFibGUgPSBmYWxzZSkge1xuXHR2YXIgY2FjaGVDb250cm9sID0gJ3B1YmxpYywgbWF4LWFnZT0nICsgTWF0aC5mbG9vcihfbWF4YWdlIC8gMTAwMCk7XG5cblx0aWYgKGltbXV0YWJsZSkge1xuXHRcdGNhY2hlQ29udHJvbCArPSAnLCBpbW11dGFibGUnO1xuXHR9XG5cdHJlcy5zZXRIZWFkZXIoJ0NhY2hlLUNvbnRyb2wnLCBjYWNoZUNvbnRyb2wpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1heEFnZU1hcChtYXhBZ2VNYXA6IHtbZXh0bmFtZTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyfSkge1xuXHRsZXQgbWF4QWdlTnVtTWFwOiB7W2V4dG5hbWU6IHN0cmluZ106IG51bWJlcn0gPSB7fTtcblx0aWYgKG1heEFnZU1hcCkge1xuXHRcdE9iamVjdC5rZXlzKG1heEFnZU1hcCkuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0Y29uc3QgdmFsdWUgPSBtYXhBZ2VNYXBba2V5XTtcblx0XHRcdG1heEFnZU51bU1hcFtrZXldID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IG1zKHZhbHVlKSA6IHZhbHVlO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdG1heEFnZU51bU1hcCA9IHt9O1xuXHR9XG5cdHJldHVybiBtYXhBZ2VOdW1NYXA7XG59XG4iXX0=
