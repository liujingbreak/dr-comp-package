"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBufferResponse = void 0;
const stream_1 = require("stream");
function createBufferResponse(originRes, onFinish) {
    const bufs = [];
    const bufStream = new stream_1.Writable({
        write(chunk, encoding, cb) {
            bufs.push(chunk);
            cb();
        },
        final(cb) {
            if (bufs.length > 0) {
                let data = Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) :
                    typeof bufs[0] === 'string' ? bufs.join('') : bufs;
                if (Array.isArray(data) && data.length === 1) {
                    data = data[0];
                }
                onFinish(data, () => {
                    origEnd(data);
                });
            }
        }
    });
    // const origWrite = originRes.write;
    const origEnd = originRes.end.bind(originRes);
    const origOn = originRes.on;
    const origOnce = originRes.once;
    const origOff = originRes.off;
    originRes.write = function (...args) {
        return bufStream.write.apply(bufStream, args);
    };
    originRes.end = function (...args) {
        return bufStream.end.apply(bufStream, args);
    };
    originRes.on = function (evt, ...args) {
        if (evt === 'drain' || evt === 'finish') {
            return bufStream.on.call(bufStream, evt, ...args);
        }
        else {
            return origOn.call(bufStream, evt, ...args);
        }
    };
    originRes.once = function (evt, ...args) {
        if (evt === 'drain' || evt === 'finish') {
            return bufStream.once.call(bufStream, evt, ...args);
        }
        else {
            return origOnce.call(bufStream, evt, ...args);
        }
    };
    originRes.once = function (evt, ...args) {
        if (evt === 'drain' || evt === 'finish') {
            return bufStream.off.call(bufStream, evt, ...args);
        }
        else {
            return origOff.call(bufStream, evt, ...args);
        }
    };
    return originRes;
}
exports.createBufferResponse = createBufferResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBZ0M7QUFHaEMsU0FBZ0Isb0JBQW9CLENBQUMsU0FBbUIsRUFDdEQsUUFBaUU7SUFFakUsTUFBTSxJQUFJLEdBQThCLEVBQUUsQ0FBQztJQUMzQyxNQUFNLFNBQVMsR0FBRyxJQUFJLGlCQUFRLENBQUM7UUFDN0IsS0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pCLEVBQUUsRUFBRSxDQUFDO1FBQ1AsQ0FBQztRQUNELEtBQUssQ0FBQyxFQUFFO1lBQ04sSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkIsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFnQixDQUFDLENBQUMsQ0FBQztvQkFDckUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBRSxJQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNuRSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQzVDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hCO2dCQUNELFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO29CQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hCLENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0lBRUgscUNBQXFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFvQixTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvRCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDO0lBQzVCLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDaEMsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUU5QixTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVMsR0FBRyxJQUFXO1FBQ3ZDLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQztJQUVGLFNBQVMsQ0FBQyxHQUFHLEdBQUcsVUFBUyxHQUFHLElBQVc7UUFDckMsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0lBRUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxVQUFTLEdBQVcsRUFBRSxHQUFHLElBQVc7UUFDakQsSUFBSSxHQUFHLEtBQUssT0FBTyxJQUFJLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDdkMsT0FBTyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDbkQ7YUFBTTtZQUNMLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDLENBQUM7SUFDRixTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVMsR0FBVyxFQUFFLEdBQUcsSUFBVztRQUNuRCxJQUFJLEdBQUcsS0FBSyxPQUFPLElBQUksR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUN2QyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0wsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUMvQztJQUNILENBQUMsQ0FBQztJQUVGLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBUyxHQUFXLEVBQUUsR0FBRyxJQUFXO1FBQ25ELElBQUksR0FBRyxLQUFLLE9BQU8sSUFBSSxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ3ZDLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDTCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQzlDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQTdERCxvREE2REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1dyaXRhYmxlfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHtSZXNwb25zZX0gZnJvbSAnZXhwcmVzcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCdWZmZXJSZXNwb25zZShvcmlnaW5SZXM6IFJlc3BvbnNlLFxuICBvbkZpbmlzaDogKGRhdGE6IEJ1ZmZlciB8IHN0cmluZyB8IGFueSwgc2VuZDogKCkgPT4gdm9pZCkgPT4gdm9pZCk6IFJlc3BvbnNlIHtcblxuICBjb25zdCBidWZzOiAoQnVmZmVyIHwgc3RyaW5nIHwgYW55KVtdID0gW107XG4gIGNvbnN0IGJ1ZlN0cmVhbSA9IG5ldyBXcml0YWJsZSh7XG4gICAgd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICAgICAgYnVmcy5wdXNoKGNodW5rKTtcbiAgICAgIGNiKCk7XG4gICAgfSxcbiAgICBmaW5hbChjYikge1xuICAgICAgaWYgKGJ1ZnMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgZGF0YSA9IEJ1ZmZlci5pc0J1ZmZlcihidWZzWzBdKSA/IEJ1ZmZlci5jb25jYXQoYnVmcyBhcyBCdWZmZXJbXSkgOlxuICAgICAgICAgIHR5cGVvZiBidWZzWzBdID09PSAnc3RyaW5nJyA/IChidWZzIGFzIHN0cmluZ1tdKS5qb2luKCcnKSA6IGJ1ZnM7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpICYmIGRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgZGF0YSA9IGRhdGFbMF07XG4gICAgICAgIH1cbiAgICAgICAgb25GaW5pc2goZGF0YSwgKCkgPT4ge1xuICAgICAgICAgIG9yaWdFbmQoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gY29uc3Qgb3JpZ1dyaXRlID0gb3JpZ2luUmVzLndyaXRlO1xuICBjb25zdCBvcmlnRW5kOiBSZXNwb25zZVsnZW5kJ10gPSBvcmlnaW5SZXMuZW5kLmJpbmQob3JpZ2luUmVzKTtcbiAgY29uc3Qgb3JpZ09uID0gb3JpZ2luUmVzLm9uO1xuICBjb25zdCBvcmlnT25jZSA9IG9yaWdpblJlcy5vbmNlO1xuICBjb25zdCBvcmlnT2ZmID0gb3JpZ2luUmVzLm9mZjtcblxuICBvcmlnaW5SZXMud3JpdGUgPSBmdW5jdGlvbiguLi5hcmdzOiBhbnlbXSkge1xuICAgIHJldHVybiBidWZTdHJlYW0ud3JpdGUuYXBwbHkoYnVmU3RyZWFtLCBhcmdzKTtcbiAgfTtcblxuICBvcmlnaW5SZXMuZW5kID0gZnVuY3Rpb24oLi4uYXJnczogYW55W10pIHtcbiAgICByZXR1cm4gYnVmU3RyZWFtLmVuZC5hcHBseShidWZTdHJlYW0sIGFyZ3MpO1xuICB9O1xuXG4gIG9yaWdpblJlcy5vbiA9IGZ1bmN0aW9uKGV2dDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmIChldnQgPT09ICdkcmFpbicgfHwgZXZ0ID09PSAnZmluaXNoJykge1xuICAgICAgcmV0dXJuIGJ1ZlN0cmVhbS5vbi5jYWxsKGJ1ZlN0cmVhbSwgZXZ0LCAuLi5hcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9yaWdPbi5jYWxsKGJ1ZlN0cmVhbSwgZXZ0LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG4gIG9yaWdpblJlcy5vbmNlID0gZnVuY3Rpb24oZXZ0OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgaWYgKGV2dCA9PT0gJ2RyYWluJyB8fCBldnQgPT09ICdmaW5pc2gnKSB7XG4gICAgICByZXR1cm4gYnVmU3RyZWFtLm9uY2UuY2FsbChidWZTdHJlYW0sIGV2dCwgLi4uYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcmlnT25jZS5jYWxsKGJ1ZlN0cmVhbSwgZXZ0LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgb3JpZ2luUmVzLm9uY2UgPSBmdW5jdGlvbihldnQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgICBpZiAoZXZ0ID09PSAnZHJhaW4nIHx8IGV2dCA9PT0gJ2ZpbmlzaCcpIHtcbiAgICAgIHJldHVybiBidWZTdHJlYW0ub2ZmLmNhbGwoYnVmU3RyZWFtLCBldnQsIC4uLmFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3JpZ09mZi5jYWxsKGJ1ZlN0cmVhbSwgZXZ0LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIG9yaWdpblJlcztcbn1cbiJdfQ==