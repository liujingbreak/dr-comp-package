"use strict";
const tslib_1 = require("tslib");
const express = require("express");
const Path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs"));
// var favicon = require('serve-favicon');
const log4js = tslib_1.__importStar(require("log4js"));
var cookieParser = require('cookie-parser');
// var bodyParser = require('body-parser');
const body_parser_1 = tslib_1.__importDefault(require("body-parser"));
var engines = require('consolidate');
var swig = require('swig-templates');
const routes_1 = require("./routes");
const __api_1 = tslib_1.__importDefault(require("__api"));
var log = log4js.getLogger(__api_1.default.packageName);
var compression = require('compression');
// var swigInjectLoader = require('swig-package-tmpl-loader');
const VIEW_PATH = Path.relative(__api_1.default.config().rootPath, Path.resolve(__dirname, '..', 'views'));
var app;
function create(app, setting) {
    // view engine setup
    swig.setDefaults({
        varControls: ['{=', '=}'],
        cache: setting.devMode ? false : 'memory'
    });
    // var injector = require('__injector');
    // var translateHtml = require('@dr/translate-generator').htmlReplacer();
    // swigInjectLoader.swigSetup(swig, {
    // 	injector: injector
    // 	// fileContentHandler: function(file, source) {
    // 	// 	return translateHtml(source, file, api.config.get('locales[0]'));
    // 	// }
    // });
    engines.requires.swig = swig;
    app.engine('html', engines.swig);
    app.set('view cache', false);
    // app.engine('jade', engines.jade);
    app.set('trust proxy', true);
    app.set('views', [setting.rootPath]);
    app.set('view engine', 'html');
    app.set('x-powered-by', false);
    app.set('env', __api_1.default.config().devMode ? 'development' : 'production');
    routes_1.applyPackageDefinedAppSetting(app);
    // uncomment after placing your favicon in /public
    // app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
    // app.use(logger('dev'));
    app.use(log4js.connectLogger(log, {
        level: 'INFO'
    }));
    app.use(body_parser_1.default.json({
        limit: '50mb'
    }));
    app.use(body_parser_1.default.urlencoded({
        extended: false,
        limit: '50mb'
    }));
    app.use(body_parser_1.default.raw({
        limit: '50mb'
    }));
    app.use(body_parser_1.default.text({
        limit: '50mb'
    }));
    app.use(cookieParser());
    app.use(compression());
    const hashFile = Path.join(__api_1.default.config().rootPath, 'githash-server.txt');
    if (fs.existsSync(hashFile)) {
        const githash = fs.readFileSync(hashFile, 'utf8');
        app.get('/githash-server', (req, res) => {
            res.set('Content-Type', 'text/plain');
            res.send(githash);
        });
        app.get('/githash-server.txt', (req, res) => {
            res.set('Content-Type', 'text/plain');
            res.send(githash);
        });
    }
    routes_1.createPackageDefinedRouters(app);
    // error handlers
    // catch 404 and forward to error handler
    app.use(function (req, res, next) {
        log.info('Not Found: ' + req.originalUrl);
        var err = new Error('Not Found');
        err.status = 404;
        next(err);
    });
    // development error handler
    // will print stacktrace
    if (setting.devMode || app.get('env') === 'development') {
        app.use(function (err, req, res, next) {
            res.status(err.status || 500);
            log.error(req.originalUrl, err);
            res.render(Path.join(VIEW_PATH, '_drcp-express-error.html'), {
                message: err.message,
                error: err
            });
        });
    }
    // production error handler
    // no stacktraces leaked to user
    app.use(function (err, req, res, next) {
        res.status(err.status || 500);
        log.error(req.originalUrl, err);
        res.render(Path.join(VIEW_PATH, '_drcp-express-error.html'), {
            message: err.message,
            error: {}
        });
    });
    return app;
}
module.exports = {
    activate() {
        app = express();
        routes_1.setupApi(__api_1.default, app);
        __api_1.default.eventBus.on('packagesActivated', function () {
            log.info('packagesActivated');
            process.nextTick(() => {
                create(app, __api_1.default.config());
                __api_1.default.eventBus.emit('appCreated', app);
            });
        });
    },
    set app(expressApp) {
        app = expressApp;
    },
    get app() {
        return app;
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AZHItY29yZS9leHByZXNzLWFwcC90cy9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBb0M7QUFFcEMsbURBQTZCO0FBQzdCLCtDQUF5QjtBQUN6QiwwQ0FBMEM7QUFDMUMsdURBQWlDO0FBQ2pDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM1QywyQ0FBMkM7QUFDM0Msc0VBQXFDO0FBQ3JDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNyQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNyQyxxQ0FBOEY7QUFDOUYsMERBQXdCO0FBQ3hCLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN6Qyw4REFBOEQ7QUFFOUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUMxQyxJQUFJLEdBQW9CLENBQUM7QUFzQnpCLFNBQVMsTUFBTSxDQUFDLEdBQW9CLEVBQUUsT0FBWTtJQUNoRCxvQkFBb0I7SUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNmLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7UUFDekIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUTtLQUMxQyxDQUFDLENBQUM7SUFDSCx3Q0FBd0M7SUFDeEMseUVBQXlFO0lBQ3pFLHFDQUFxQztJQUNyQyxzQkFBc0I7SUFDdEIsbURB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LENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsMEJBQTBCLENBQUMsRUFBRTtZQUMzRCxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87WUFDcEIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQWpIRCxpQkFBUztJQUNQLFFBQVE7UUFDTixHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDaEIsaUJBQVEsQ0FBQyxlQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkIsZUFBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUU7WUFDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzlCLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO2dCQUNwQixNQUFNLENBQUMsR0FBRyxFQUFFLGVBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2dCQUMxQixlQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxJQUFJLEdBQUcsQ0FBQyxVQUEyQjtRQUNqQyxHQUFHLEdBQUcsVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFDRCxJQUFJLEdBQUc7UUFDTCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Q0FDRixDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9AZHItY29yZS9leHByZXNzLWFwcC9kaXN0L2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuaW1wb3J0IHtSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9ufSBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIFBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG4vLyB2YXIgZmF2aWNvbiA9IHJlcXVpcmUoJ3NlcnZlLWZhdmljb24nKTtcbmltcG9ydCAqIGFzIGxvZzRqcyBmcm9tICdsb2c0anMnO1xudmFyIGNvb2tpZVBhcnNlciA9IHJlcXVpcmUoJ2Nvb2tpZS1wYXJzZXInKTtcbi8vIHZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbnZhciBlbmdpbmVzID0gcmVxdWlyZSgnY29uc29saWRhdGUnKTtcbnZhciBzd2lnID0gcmVxdWlyZSgnc3dpZy10ZW1wbGF0ZXMnKTtcbmltcG9ydCB7c2V0dXBBcGksIGFwcGx5UGFja2FnZURlZmluZWRBcHBTZXR0aW5nLCBjcmVhdGVQYWNrYWdlRGVmaW5lZFJvdXRlcnN9IGZyb20gJy4vcm91dGVzJztcbmltcG9ydCBhcGkgZnJvbSAnX19hcGknO1xudmFyIGxvZyA9IGxvZzRqcy5nZXRMb2dnZXIoYXBpLnBhY2thZ2VOYW1lKTtcbnZhciBjb21wcmVzc2lvbiA9IHJlcXVpcmUoJ2NvbXByZXNzaW9uJyk7XG4vLyB2YXIgc3dpZ0luamVjdExvYWRlciA9IHJlcXVpcmUoJ3N3aWctcGFja2FnZS10bXBsLWxvYWRlcicpO1xuXG5jb25zdCBWSUVXX1BBVEggPSBQYXRoLnJlbGF0aXZlKGFwaS5jb25maWcoKS5yb290UGF0aCxcbiAgUGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ3ZpZXdzJykpO1xudmFyIGFwcDogZXhwcmVzcy5FeHByZXNzO1xuXG5leHBvcnQgPSB7XG4gIGFjdGl2YXRlKCkge1xuICAgIGFwcCA9IGV4cHJlc3MoKTtcbiAgICBzZXR1cEFwaShhcGksIGFwcCk7XG4gICAgYXBpLmV2ZW50QnVzLm9uKCdwYWNrYWdlc0FjdGl2YXRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgbG9nLmluZm8oJ3BhY2thZ2VzQWN0aXZhdGVkJyk7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgY3JlYXRlKGFwcCwgYXBpLmNvbmZpZygpKTtcbiAgICAgICAgYXBpLmV2ZW50QnVzLmVtaXQoJ2FwcENyZWF0ZWQnLCBhcHApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHNldCBhcHAoZXhwcmVzc0FwcDogZXhwcmVzcy5FeHByZXNzKSB7XG4gICAgYXBwID0gZXhwcmVzc0FwcDtcbiAgfSxcbiAgZ2V0IGFwcCgpIHtcbiAgICByZXR1cm4gYXBwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGUoYXBwOiBleHByZXNzLkV4cHJlc3MsIHNldHRpbmc6IGFueSkge1xuICAvLyB2aWV3IGVuZ2luZSBzZXR1cFxuICBzd2lnLnNldERlZmF1bHRzKHtcbiAgICB2YXJDb250cm9sczogWyd7PScsICc9fSddLFxuICAgIGNhY2hlOiBzZXR0aW5nLmRldk1vZGUgPyBmYWxzZSA6ICdtZW1vcnknXG4gIH0pO1xuICAvLyB2YXIgaW5qZWN0b3IgPSByZXF1aXJlKCdfX2luamVjdG9yJyk7XG4gIC8vIHZhciB0cmFuc2xhdGVIdG1sID0gcmVxdWlyZSgnQGRyL3RyYW5zbGF0ZS1nZW5lcmF0b3InKS5odG1sUmVwbGFjZXIoKTtcbiAgLy8gc3dpZ0luamVjdExvYWRlci5zd2lnU2V0dXAoc3dpZywge1xuICAvLyBcdGluamVjdG9yOiBpbmplY3RvclxuICAvLyBcdC8vIGZpbGVDb250ZW50SGFuZGxlcjogZnVuY3Rpb24oZmlsZSwgc291cmNlKSB7XG4gIC8vIFx0Ly8gXHRyZXR1cm4gdHJhbnNsYXRlSHRtbChzb3VyY2UsIGZpbGUsIGFwaS5jb25maWcuZ2V0KCdsb2NhbGVzWzBdJykpO1xuICAvLyBcdC8vIH1cbiAgLy8gfSk7XG5cbiAgZW5naW5lcy5yZXF1aXJlcy5zd2lnID0gc3dpZztcbiAgYXBwLmVuZ2luZSgnaHRtbCcsIGVuZ2luZXMuc3dpZyk7XG4gIGFwcC5zZXQoJ3ZpZXcgY2FjaGUnLCBmYWxzZSk7XG4gIC8vIGFwcC5lbmdpbmUoJ2phZGUnLCBlbmdpbmVzLmphZGUpO1xuICBhcHAuc2V0KCd0cnVzdCBwcm94eScsIHRydWUpO1xuICBhcHAuc2V0KCd2aWV3cycsIFtzZXR0aW5nLnJvb3RQYXRoXSk7XG4gIGFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2h0bWwnKTtcbiAgYXBwLnNldCgneC1wb3dlcmVkLWJ5JywgZmFsc2UpO1xuICBhcHAuc2V0KCdlbnYnLCBhcGkuY29uZmlnKCkuZGV2TW9kZSA/ICdkZXZlbG9wbWVudCcgOiAncHJvZHVjdGlvbicpO1xuICBhcHBseVBhY2thZ2VEZWZpbmVkQXBwU2V0dGluZyhhcHApO1xuICAvLyB1bmNvbW1lbnQgYWZ0ZXIgcGxhY2luZyB5b3VyIGZhdmljb24gaW4gL3B1YmxpY1xuICAvLyBhcHAudXNlKGZhdmljb24ocGF0aC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycsICdmYXZpY29uLmljbycpKSk7XG4gIC8vIGFwcC51c2UobG9nZ2VyKCdkZXYnKSk7XG4gIGFwcC51c2UobG9nNGpzLmNvbm5lY3RMb2dnZXIobG9nLCB7XG4gICAgbGV2ZWw6ICdJTkZPJ1xuICB9KSk7XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKHtcbiAgICBsaW1pdDogJzUwbWInXG4gIH0pKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe1xuICAgIGV4dGVuZGVkOiBmYWxzZSxcbiAgICBsaW1pdDogJzUwbWInXG4gIH0pKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLnJhdyh7XG4gICAgbGltaXQ6ICc1MG1iJ1xuICB9KSk7XG4gIGFwcC51c2UoYm9keVBhcnNlci50ZXh0KHtcbiAgICBsaW1pdDogJzUwbWInXG4gIH0pKTtcbiAgYXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG4gIGFwcC51c2UoY29tcHJlc3Npb24oKSk7XG5cbiAgY29uc3QgaGFzaEZpbGUgPSBQYXRoLmpvaW4oYXBpLmNvbmZpZygpLnJvb3RQYXRoLCAnZ2l0aGFzaC1zZXJ2ZXIudHh0Jyk7XG4gIGlmIChmcy5leGlzdHNTeW5jKGhhc2hGaWxlKSkge1xuICAgIGNvbnN0IGdpdGhhc2ggPSBmcy5yZWFkRmlsZVN5bmMoaGFzaEZpbGUsICd1dGY4Jyk7XG4gICAgYXBwLmdldCgnL2dpdGhhc2gtc2VydmVyJywgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuICAgICAgcmVzLnNldCgnQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKTtcbiAgICAgIHJlcy5zZW5kKGdpdGhhc2gpO1xuICAgIH0pO1xuICAgIGFwcC5nZXQoJy9naXRoYXNoLXNlcnZlci50eHQnLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG4gICAgICByZXMuc2V0KCdDb250ZW50LVR5cGUnLCAndGV4dC9wbGFpbicpO1xuICAgICAgcmVzLnNlbmQoZ2l0aGFzaCk7XG4gICAgfSk7XG4gIH1cbiAgY3JlYXRlUGFja2FnZURlZmluZWRSb3V0ZXJzKGFwcCk7XG4gIC8vIGVycm9yIGhhbmRsZXJzXG4gIC8vIGNhdGNoIDQwNCBhbmQgZm9yd2FyZCB0byBlcnJvciBoYW5kbGVyXG4gIGFwcC51c2UoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgICBsb2cuaW5mbygnTm90IEZvdW5kOiAnICsgcmVxLm9yaWdpbmFsVXJsKTtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdOb3QgRm91bmQnKTtcbiAgICAoZXJyIGFzIGFueSkuc3RhdHVzID0gNDA0O1xuICAgIG5leHQoZXJyKTtcbiAgfSk7XG5cbiAgLy8gZGV2ZWxvcG1lbnQgZXJyb3IgaGFuZGxlclxuICAvLyB3aWxsIHByaW50IHN0YWNrdHJhY2VcbiAgaWYgKHNldHRpbmcuZGV2TW9kZSB8fCBhcHAuZ2V0KCdlbnYnKSA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIGFwcC51c2UoZnVuY3Rpb24oZXJyOiBFcnJvciwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcbiAgICAgIHJlcy5zdGF0dXMoKGVyciBhcyBhbnkpLnN0YXR1cyB8fCA1MDApO1xuICAgICAgbG9nLmVycm9yKHJlcS5vcmlnaW5hbFVybCwgZXJyKTtcbiAgICAgIHJlcy5yZW5kZXIoUGF0aC5qb2luKFZJRVdfUEFUSCwgJ19kcmNwLWV4cHJlc3MtZXJyb3IuaHRtbCcpLCB7XG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgICBlcnJvcjogZXJyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHByb2R1Y3Rpb24gZXJyb3IgaGFuZGxlclxuICAvLyBubyBzdGFja3RyYWNlcyBsZWFrZWQgdG8gdXNlclxuICBhcHAudXNlKGZ1bmN0aW9uKGVycjogRXJyb3IsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gICAgcmVzLnN0YXR1cygoZXJyIGFzIGFueSkuc3RhdHVzIHx8IDUwMCk7XG4gICAgbG9nLmVycm9yKHJlcS5vcmlnaW5hbFVybCwgZXJyKTtcbiAgICByZXMucmVuZGVyKFBhdGguam9pbihWSUVXX1BBVEgsICdfZHJjcC1leHByZXNzLWVycm9yLmh0bWwnKSwge1xuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICBlcnJvcjoge31cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBhcHA7XG59XG4iXX0=
